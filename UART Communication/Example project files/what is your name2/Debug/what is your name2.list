
what is your name2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000204c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002158  08002158  00012158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021ec  080021ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080021ec  080021ec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021ec  080021ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021ec  080021ec  000121ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021f0  080021f0  000121f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080021f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08002264  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002264  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ca9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001201  00000000  00000000  00024d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  00025f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  00026550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d3a  00000000  00000000  00026af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006623  00000000  00000000  0003d832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008227a  00000000  00000000  00043e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c60cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b2c  00000000  00000000  000c6120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002140 	.word	0x08002140

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002140 	.word	0x08002140

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b0ba      	sub	sp, #232	; 0xe8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t name[100] = {0};
 8000162:	2300      	movs	r3, #0
 8000164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000168:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800016c:	2260      	movs	r2, #96	; 0x60
 800016e:	2100      	movs	r1, #0
 8000170:	4618      	mov	r0, r3
 8000172:	f001 fb63 	bl	800183c <memset>
	  uint8_t hello[19] = "What is your name?\n";
 8000176:	4b39      	ldr	r3, [pc, #228]	; (800025c <main+0x100>)
 8000178:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800017c:	461d      	mov	r5, r3
 800017e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000182:	682b      	ldr	r3, [r5, #0]
 8000184:	461a      	mov	r2, r3
 8000186:	8022      	strh	r2, [r4, #0]
 8000188:	3402      	adds	r4, #2
 800018a:	0c1b      	lsrs	r3, r3, #16
 800018c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018e:	f000 f9ed 	bl	800056c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000192:	f000 f86b 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000196:	f000 f8d5 	bl	8000344 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800019a:	f000 f8a9 	bl	80002f0 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (strlen(name) > 0) {
 800019e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d152      	bne.n	800024e <main+0xf2>
	  	          break;
	  	      }
	  HAL_UART_Transmit(&huart1, (uint8_t *) hello, 19, HAL_MAX_DELAY);
 80001a8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80001ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001b0:	2213      	movs	r2, #19
 80001b2:	482b      	ldr	r0, [pc, #172]	; (8000260 <main+0x104>)
 80001b4:	f001 f90b 	bl	80013ce <HAL_UART_Transmit>

	  	      int i = 0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  	      do {
	  	        HAL_UART_Receive(&huart1, (uint8_t *) &received_char, 1, HAL_MAX_DELAY);
 80001be:	1df9      	adds	r1, r7, #7
 80001c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001c4:	2201      	movs	r2, #1
 80001c6:	4826      	ldr	r0, [pc, #152]	; (8000260 <main+0x104>)
 80001c8:	f001 f993 	bl	80014f2 <HAL_UART_Receive>
	  	        if (received_char != '\n') {
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	2b0a      	cmp	r3, #10
 80001d0:	d00c      	beq.n	80001ec <main+0x90>
	  	          name[i] = received_char;
 80001d2:	79f9      	ldrb	r1, [r7, #7]
 80001d4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80001d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80001dc:	4413      	add	r3, r2
 80001de:	460a      	mov	r2, r1
 80001e0:	701a      	strb	r2, [r3, #0]
	  	          i++;
 80001e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80001e6:	3301      	adds	r3, #1
 80001e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  	        }
	  	      } while (received_char != '\n' && i < 100	);
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	2b0a      	cmp	r3, #10
 80001f0:	d003      	beq.n	80001fa <main+0x9e>
 80001f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80001f6:	2b63      	cmp	r3, #99	; 0x63
 80001f8:	dde1      	ble.n	80001be <main+0x62>
	  	      name[i] = '\0';
 80001fa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80001fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000202:	4413      	add	r3, r2
 8000204:	2200      	movs	r2, #0
 8000206:	701a      	strb	r2, [r3, #0]
	  	    if (name[0] != '\0')
 8000208:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800020c:	2b00      	cmp	r3, #0
 800020e:	d016      	beq.n	800023e <main+0xe2>
	  	    	    {

	  	    	sprintf(greeting, "Hello, %s\n", name);
 8000210:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000214:	f107 0308 	add.w	r3, r7, #8
 8000218:	4912      	ldr	r1, [pc, #72]	; (8000264 <main+0x108>)
 800021a:	4618      	mov	r0, r3
 800021c:	f001 fb16 	bl	800184c <siprintf>
	  	      HAL_UART_Transmit(&huart1, (uint8_t *) greeting, strlen(greeting), HAL_MAX_DELAY);
 8000220:	f107 0308 	add.w	r3, r7, #8
 8000224:	4618      	mov	r0, r3
 8000226:	f7ff ff91 	bl	800014c <strlen>
 800022a:	4603      	mov	r3, r0
 800022c:	b29a      	uxth	r2, r3
 800022e:	f107 0108 	add.w	r1, r7, #8
 8000232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000236:	480a      	ldr	r0, [pc, #40]	; (8000260 <main+0x104>)
 8000238:	f001 f8c9 	bl	80013ce <HAL_UART_Transmit>
 800023c:	e7af      	b.n	800019e <main+0x42>

	    }
	    else
	      {
	          HAL_UART_Transmit(&huart1, "Please enter a name.\n", 22, 1000);
 800023e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000242:	2216      	movs	r2, #22
 8000244:	4908      	ldr	r1, [pc, #32]	; (8000268 <main+0x10c>)
 8000246:	4806      	ldr	r0, [pc, #24]	; (8000260 <main+0x104>)
 8000248:	f001 f8c1 	bl	80013ce <HAL_UART_Transmit>
  {
 800024c:	e7a7      	b.n	800019e <main+0x42>
	  	          break;
 800024e:	bf00      	nop
 8000250:	2300      	movs	r3, #0
	      }
  }

  /* USER CODE END 3 */
}
 8000252:	4618      	mov	r0, r3
 8000254:	37e8      	adds	r7, #232	; 0xe8
 8000256:	46bd      	mov	sp, r7
 8000258:	bdb0      	pop	{r4, r5, r7, pc}
 800025a:	bf00      	nop
 800025c:	0800217c 	.word	0x0800217c
 8000260:	2000008c 	.word	0x2000008c
 8000264:	08002158 	.word	0x08002158
 8000268:	08002164 	.word	0x08002164

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b090      	sub	sp, #64	; 0x40
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fade 	bl	800183c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028e:	2302      	movs	r3, #2
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	2310      	movs	r3, #16
 8000298:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029a:	2302      	movs	r3, #2
 800029c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800029e:	2300      	movs	r3, #0
 80002a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002a2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a8:	f107 0318 	add.w	r3, r7, #24
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fc27 	bl	8000b00 <HAL_RCC_OscConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002b8:	f000 f85a 	bl	8000370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002bc:	230f      	movs	r3, #15
 80002be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c0:	2302      	movs	r3, #2
 80002c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2102      	movs	r1, #2
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fe94 	bl	8001004 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002e2:	f000 f845 	bl	8000370 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3740      	adds	r7, #64	; 0x40
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_USART1_UART_Init+0x4c>)
 80002f6:	4a12      	ldr	r2, [pc, #72]	; (8000340 <MX_USART1_UART_Init+0x50>)
 80002f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_USART1_UART_Init+0x4c>)
 80002fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_USART1_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000316:	220c      	movs	r2, #12
 8000318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_USART1_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000328:	f001 f804 	bl	8001334 <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000332:	f000 f81d 	bl	8000370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	2000008c 	.word	0x2000008c
 8000340:	40013800 	.word	0x40013800

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <MX_GPIO_Init+0x28>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a07      	ldr	r2, [pc, #28]	; (800036c <MX_GPIO_Init+0x28>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	6193      	str	r3, [r2, #24]
 8000356:	4b05      	ldr	r3, [pc, #20]	; (800036c <MX_GPIO_Init+0x28>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	40021000 	.word	0x40021000

08000370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000374:	b672      	cpsid	i
}
 8000376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000378:	e7fe      	b.n	8000378 <Error_Handler+0x8>
	...

0800037c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <HAL_MspInit+0x40>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <HAL_MspInit+0x40>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <HAL_MspInit+0x40>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <HAL_MspInit+0x40>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <HAL_MspInit+0x40>)
 80003a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a4:	61d3      	str	r3, [r2, #28]
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <HAL_MspInit+0x40>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000

080003c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a1c      	ldr	r2, [pc, #112]	; (800044c <HAL_UART_MspInit+0x8c>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d131      	bne.n	8000444 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <HAL_UART_MspInit+0x90>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a1a      	ldr	r2, [pc, #104]	; (8000450 <HAL_UART_MspInit+0x90>)
 80003e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <HAL_UART_MspInit+0x90>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <HAL_UART_MspInit+0x90>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a14      	ldr	r2, [pc, #80]	; (8000450 <HAL_UART_MspInit+0x90>)
 80003fe:	f043 0304 	orr.w	r3, r3, #4
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <HAL_UART_MspInit+0x90>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0304 	and.w	r3, r3, #4
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000414:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000416:	2302      	movs	r3, #2
 8000418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800041a:	2303      	movs	r3, #3
 800041c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	4619      	mov	r1, r3
 8000424:	480b      	ldr	r0, [pc, #44]	; (8000454 <HAL_UART_MspInit+0x94>)
 8000426:	f000 f9e7 	bl	80007f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800042a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <HAL_UART_MspInit+0x94>)
 8000440:	f000 f9da 	bl	80007f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000444:	bf00      	nop
 8000446:	3720      	adds	r7, #32
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40013800 	.word	0x40013800
 8000450:	40021000 	.word	0x40021000
 8000454:	40010800 	.word	0x40010800

08000458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800045c:	e7fe      	b.n	800045c <NMI_Handler+0x4>

0800045e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000462:	e7fe      	b.n	8000462 <HardFault_Handler+0x4>

08000464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <MemManage_Handler+0x4>

0800046a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <BusFault_Handler+0x4>

08000470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <UsageFault_Handler+0x4>

08000476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr

0800049a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049e:	f000 f8ab 	bl	80005f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004b0:	4a14      	ldr	r2, [pc, #80]	; (8000504 <_sbrk+0x5c>)
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <_sbrk+0x60>)
 80004b4:	1ad3      	subs	r3, r2, r3
 80004b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004bc:	4b13      	ldr	r3, [pc, #76]	; (800050c <_sbrk+0x64>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d102      	bne.n	80004ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <_sbrk+0x64>)
 80004c6:	4a12      	ldr	r2, [pc, #72]	; (8000510 <_sbrk+0x68>)
 80004c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <_sbrk+0x64>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4413      	add	r3, r2
 80004d2:	693a      	ldr	r2, [r7, #16]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d207      	bcs.n	80004e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004d8:	f001 f986 	bl	80017e8 <__errno>
 80004dc:	4603      	mov	r3, r0
 80004de:	220c      	movs	r2, #12
 80004e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004e6:	e009      	b.n	80004fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <_sbrk+0x64>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <_sbrk+0x64>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	4a05      	ldr	r2, [pc, #20]	; (800050c <_sbrk+0x64>)
 80004f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004fa:	68fb      	ldr	r3, [r7, #12]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20005000 	.word	0x20005000
 8000508:	00000400 	.word	0x00000400
 800050c:	200000d0 	.word	0x200000d0
 8000510:	200000e8 	.word	0x200000e8

08000514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000522:	490d      	ldr	r1, [pc, #52]	; (8000558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000538:	4c0a      	ldr	r4, [pc, #40]	; (8000564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000546:	f7ff ffe5 	bl	8000514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054a:	f001 f953 	bl	80017f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054e:	f7ff fe05 	bl	800015c <main>
  bx lr
 8000552:	4770      	bx	lr
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800055c:	080021f4 	.word	0x080021f4
  ldr r2, =_sbss
 8000560:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000564:	200000e8 	.word	0x200000e8

08000568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_2_IRQHandler>
	...

0800056c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <HAL_Init+0x28>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a07      	ldr	r2, [pc, #28]	; (8000594 <HAL_Init+0x28>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057c:	2003      	movs	r0, #3
 800057e:	f000 f907 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000582:	200f      	movs	r0, #15
 8000584:	f000 f808 	bl	8000598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000588:	f7ff fef8 	bl	800037c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40022000 	.word	0x40022000

08000598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_InitTick+0x54>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <HAL_InitTick+0x58>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80005b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f911 	bl	80007de <HAL_SYSTICK_Config>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e00e      	b.n	80005e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b0f      	cmp	r3, #15
 80005ca:	d80a      	bhi.n	80005e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005cc:	2200      	movs	r2, #0
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005d4:	f000 f8e7 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <HAL_InitTick+0x5c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	e000      	b.n	80005e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000008 	.word	0x20000008
 80005f4:	20000004 	.word	0x20000004

080005f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <HAL_IncTick+0x1c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <HAL_IncTick+0x20>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4413      	add	r3, r2
 8000608:	4a03      	ldr	r2, [pc, #12]	; (8000618 <HAL_IncTick+0x20>)
 800060a:	6013      	str	r3, [r2, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	20000008 	.word	0x20000008
 8000618:	200000d4 	.word	0x200000d4

0800061c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return uwTick;
 8000620:	4b02      	ldr	r3, [pc, #8]	; (800062c <HAL_GetTick+0x10>)
 8000622:	681b      	ldr	r3, [r3, #0]
}
 8000624:	4618      	mov	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	200000d4 	.word	0x200000d4

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000770:	f7ff ff90 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff49 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff5e 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff90 	bl	80006e8 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5f 	bl	8000694 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ffb0 	bl	800074c <SysTick_Config>
 80007ec:	4603      	mov	r3, r0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b08b      	sub	sp, #44	; 0x2c
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080a:	e169      	b.n	8000ae0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800080c:	2201      	movs	r2, #1
 800080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	69fa      	ldr	r2, [r7, #28]
 800081c:	4013      	ands	r3, r2
 800081e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000820:	69ba      	ldr	r2, [r7, #24]
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	429a      	cmp	r2, r3
 8000826:	f040 8158 	bne.w	8000ada <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	4a9a      	ldr	r2, [pc, #616]	; (8000a98 <HAL_GPIO_Init+0x2a0>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d05e      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 8000834:	4a98      	ldr	r2, [pc, #608]	; (8000a98 <HAL_GPIO_Init+0x2a0>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d875      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 800083a:	4a98      	ldr	r2, [pc, #608]	; (8000a9c <HAL_GPIO_Init+0x2a4>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d058      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 8000840:	4a96      	ldr	r2, [pc, #600]	; (8000a9c <HAL_GPIO_Init+0x2a4>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d86f      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 8000846:	4a96      	ldr	r2, [pc, #600]	; (8000aa0 <HAL_GPIO_Init+0x2a8>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d052      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 800084c:	4a94      	ldr	r2, [pc, #592]	; (8000aa0 <HAL_GPIO_Init+0x2a8>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d869      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 8000852:	4a94      	ldr	r2, [pc, #592]	; (8000aa4 <HAL_GPIO_Init+0x2ac>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d04c      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 8000858:	4a92      	ldr	r2, [pc, #584]	; (8000aa4 <HAL_GPIO_Init+0x2ac>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d863      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 800085e:	4a92      	ldr	r2, [pc, #584]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d046      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 8000864:	4a90      	ldr	r2, [pc, #576]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d85d      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 800086a:	2b12      	cmp	r3, #18
 800086c:	d82a      	bhi.n	80008c4 <HAL_GPIO_Init+0xcc>
 800086e:	2b12      	cmp	r3, #18
 8000870:	d859      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 8000872:	a201      	add	r2, pc, #4	; (adr r2, 8000878 <HAL_GPIO_Init+0x80>)
 8000874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000878:	080008f3 	.word	0x080008f3
 800087c:	080008cd 	.word	0x080008cd
 8000880:	080008df 	.word	0x080008df
 8000884:	08000921 	.word	0x08000921
 8000888:	08000927 	.word	0x08000927
 800088c:	08000927 	.word	0x08000927
 8000890:	08000927 	.word	0x08000927
 8000894:	08000927 	.word	0x08000927
 8000898:	08000927 	.word	0x08000927
 800089c:	08000927 	.word	0x08000927
 80008a0:	08000927 	.word	0x08000927
 80008a4:	08000927 	.word	0x08000927
 80008a8:	08000927 	.word	0x08000927
 80008ac:	08000927 	.word	0x08000927
 80008b0:	08000927 	.word	0x08000927
 80008b4:	08000927 	.word	0x08000927
 80008b8:	08000927 	.word	0x08000927
 80008bc:	080008d5 	.word	0x080008d5
 80008c0:	080008e9 	.word	0x080008e9
 80008c4:	4a79      	ldr	r2, [pc, #484]	; (8000aac <HAL_GPIO_Init+0x2b4>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d013      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ca:	e02c      	b.n	8000926 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	623b      	str	r3, [r7, #32]
          break;
 80008d2:	e029      	b.n	8000928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	3304      	adds	r3, #4
 80008da:	623b      	str	r3, [r7, #32]
          break;
 80008dc:	e024      	b.n	8000928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	3308      	adds	r3, #8
 80008e4:	623b      	str	r3, [r7, #32]
          break;
 80008e6:	e01f      	b.n	8000928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	330c      	adds	r3, #12
 80008ee:	623b      	str	r3, [r7, #32]
          break;
 80008f0:	e01a      	b.n	8000928 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d102      	bne.n	8000900 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008fa:	2304      	movs	r3, #4
 80008fc:	623b      	str	r3, [r7, #32]
          break;
 80008fe:	e013      	b.n	8000928 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d105      	bne.n	8000914 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000908:	2308      	movs	r3, #8
 800090a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69fa      	ldr	r2, [r7, #28]
 8000910:	611a      	str	r2, [r3, #16]
          break;
 8000912:	e009      	b.n	8000928 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000914:	2308      	movs	r3, #8
 8000916:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	615a      	str	r2, [r3, #20]
          break;
 800091e:	e003      	b.n	8000928 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
          break;
 8000924:	e000      	b.n	8000928 <HAL_GPIO_Init+0x130>
          break;
 8000926:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	2bff      	cmp	r3, #255	; 0xff
 800092c:	d801      	bhi.n	8000932 <HAL_GPIO_Init+0x13a>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	e001      	b.n	8000936 <HAL_GPIO_Init+0x13e>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3304      	adds	r3, #4
 8000936:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	2bff      	cmp	r3, #255	; 0xff
 800093c:	d802      	bhi.n	8000944 <HAL_GPIO_Init+0x14c>
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	e002      	b.n	800094a <HAL_GPIO_Init+0x152>
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	3b08      	subs	r3, #8
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	210f      	movs	r1, #15
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	401a      	ands	r2, r3
 800095c:	6a39      	ldr	r1, [r7, #32]
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	431a      	orrs	r2, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	2b00      	cmp	r3, #0
 8000974:	f000 80b1 	beq.w	8000ada <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000978:	4b4d      	ldr	r3, [pc, #308]	; (8000ab0 <HAL_GPIO_Init+0x2b8>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a4c      	ldr	r2, [pc, #304]	; (8000ab0 <HAL_GPIO_Init+0x2b8>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b4a      	ldr	r3, [pc, #296]	; (8000ab0 <HAL_GPIO_Init+0x2b8>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000990:	4a48      	ldr	r2, [pc, #288]	; (8000ab4 <HAL_GPIO_Init+0x2bc>)
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	089b      	lsrs	r3, r3, #2
 8000996:	3302      	adds	r3, #2
 8000998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	f003 0303 	and.w	r3, r3, #3
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	220f      	movs	r2, #15
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a40      	ldr	r2, [pc, #256]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d013      	beq.n	80009e4 <HAL_GPIO_Init+0x1ec>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a3f      	ldr	r2, [pc, #252]	; (8000abc <HAL_GPIO_Init+0x2c4>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d00d      	beq.n	80009e0 <HAL_GPIO_Init+0x1e8>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a3e      	ldr	r2, [pc, #248]	; (8000ac0 <HAL_GPIO_Init+0x2c8>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d007      	beq.n	80009dc <HAL_GPIO_Init+0x1e4>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a3d      	ldr	r2, [pc, #244]	; (8000ac4 <HAL_GPIO_Init+0x2cc>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d101      	bne.n	80009d8 <HAL_GPIO_Init+0x1e0>
 80009d4:	2303      	movs	r3, #3
 80009d6:	e006      	b.n	80009e6 <HAL_GPIO_Init+0x1ee>
 80009d8:	2304      	movs	r3, #4
 80009da:	e004      	b.n	80009e6 <HAL_GPIO_Init+0x1ee>
 80009dc:	2302      	movs	r3, #2
 80009de:	e002      	b.n	80009e6 <HAL_GPIO_Init+0x1ee>
 80009e0:	2301      	movs	r3, #1
 80009e2:	e000      	b.n	80009e6 <HAL_GPIO_Init+0x1ee>
 80009e4:	2300      	movs	r3, #0
 80009e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e8:	f002 0203 	and.w	r2, r2, #3
 80009ec:	0092      	lsls	r2, r2, #2
 80009ee:	4093      	lsls	r3, r2
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009f6:	492f      	ldr	r1, [pc, #188]	; (8000ab4 <HAL_GPIO_Init+0x2bc>)
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	3302      	adds	r3, #2
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d006      	beq.n	8000a1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a10:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	492c      	ldr	r1, [pc, #176]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	600b      	str	r3, [r1, #0]
 8000a1c:	e006      	b.n	8000a2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	43db      	mvns	r3, r3
 8000a26:	4928      	ldr	r1, [pc, #160]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a28:	4013      	ands	r3, r2
 8000a2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d006      	beq.n	8000a46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a38:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	4922      	ldr	r1, [pc, #136]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	604b      	str	r3, [r1, #4]
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	491e      	ldr	r1, [pc, #120]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a62:	689a      	ldr	r2, [r3, #8]
 8000a64:	4918      	ldr	r1, [pc, #96]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	608b      	str	r3, [r1, #8]
 8000a6c:	e006      	b.n	8000a7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	4914      	ldr	r1, [pc, #80]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d021      	beq.n	8000acc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a8a:	68da      	ldr	r2, [r3, #12]
 8000a8c:	490e      	ldr	r1, [pc, #56]	; (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	60cb      	str	r3, [r1, #12]
 8000a94:	e021      	b.n	8000ada <HAL_GPIO_Init+0x2e2>
 8000a96:	bf00      	nop
 8000a98:	10320000 	.word	0x10320000
 8000a9c:	10310000 	.word	0x10310000
 8000aa0:	10220000 	.word	0x10220000
 8000aa4:	10210000 	.word	0x10210000
 8000aa8:	10120000 	.word	0x10120000
 8000aac:	10110000 	.word	0x10110000
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010000 	.word	0x40010000
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	40011000 	.word	0x40011000
 8000ac4:	40011400 	.word	0x40011400
 8000ac8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_GPIO_Init+0x304>)
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4909      	ldr	r1, [pc, #36]	; (8000afc <HAL_GPIO_Init+0x304>)
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	3301      	adds	r3, #1
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f47f ae8e 	bne.w	800080c <HAL_GPIO_Init+0x14>
  }
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	372c      	adds	r7, #44	; 0x2c
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	40010400 	.word	0x40010400

08000b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e272      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 8087 	beq.w	8000c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b20:	4b92      	ldr	r3, [pc, #584]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 030c 	and.w	r3, r3, #12
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d00c      	beq.n	8000b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b2c:	4b8f      	ldr	r3, [pc, #572]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 030c 	and.w	r3, r3, #12
 8000b34:	2b08      	cmp	r3, #8
 8000b36:	d112      	bne.n	8000b5e <HAL_RCC_OscConfig+0x5e>
 8000b38:	4b8c      	ldr	r3, [pc, #560]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b44:	d10b      	bne.n	8000b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b46:	4b89      	ldr	r3, [pc, #548]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d06c      	beq.n	8000c2c <HAL_RCC_OscConfig+0x12c>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d168      	bne.n	8000c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e24c      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b66:	d106      	bne.n	8000b76 <HAL_RCC_OscConfig+0x76>
 8000b68:	4b80      	ldr	r3, [pc, #512]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a7f      	ldr	r2, [pc, #508]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	e02e      	b.n	8000bd4 <HAL_RCC_OscConfig+0xd4>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10c      	bne.n	8000b98 <HAL_RCC_OscConfig+0x98>
 8000b7e:	4b7b      	ldr	r3, [pc, #492]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a7a      	ldr	r2, [pc, #488]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	4b78      	ldr	r3, [pc, #480]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a77      	ldr	r2, [pc, #476]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	e01d      	b.n	8000bd4 <HAL_RCC_OscConfig+0xd4>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ba0:	d10c      	bne.n	8000bbc <HAL_RCC_OscConfig+0xbc>
 8000ba2:	4b72      	ldr	r3, [pc, #456]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a71      	ldr	r2, [pc, #452]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	4b6f      	ldr	r3, [pc, #444]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a6e      	ldr	r2, [pc, #440]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e00b      	b.n	8000bd4 <HAL_RCC_OscConfig+0xd4>
 8000bbc:	4b6b      	ldr	r3, [pc, #428]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a6a      	ldr	r2, [pc, #424]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b68      	ldr	r3, [pc, #416]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a67      	ldr	r2, [pc, #412]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d013      	beq.n	8000c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bdc:	f7ff fd1e 	bl	800061c <HAL_GetTick>
 8000be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be2:	e008      	b.n	8000bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000be4:	f7ff fd1a 	bl	800061c <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b64      	cmp	r3, #100	; 0x64
 8000bf0:	d901      	bls.n	8000bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e200      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf6:	4b5d      	ldr	r3, [pc, #372]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0f0      	beq.n	8000be4 <HAL_RCC_OscConfig+0xe4>
 8000c02:	e014      	b.n	8000c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c04:	f7ff fd0a 	bl	800061c <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c0c:	f7ff fd06 	bl	800061c <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b64      	cmp	r3, #100	; 0x64
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e1ec      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c1e:	4b53      	ldr	r3, [pc, #332]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f0      	bne.n	8000c0c <HAL_RCC_OscConfig+0x10c>
 8000c2a:	e000      	b.n	8000c2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d063      	beq.n	8000d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c3a:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 030c 	and.w	r3, r3, #12
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00b      	beq.n	8000c5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c46:	4b49      	ldr	r3, [pc, #292]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d11c      	bne.n	8000c8c <HAL_RCC_OscConfig+0x18c>
 8000c52:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d116      	bne.n	8000c8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5e:	4b43      	ldr	r3, [pc, #268]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <HAL_RCC_OscConfig+0x176>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d001      	beq.n	8000c76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e1c0      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c76:	4b3d      	ldr	r3, [pc, #244]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	4939      	ldr	r1, [pc, #228]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c86:	4313      	orrs	r3, r2
 8000c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8a:	e03a      	b.n	8000d02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d020      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c94:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <HAL_RCC_OscConfig+0x270>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9a:	f7ff fcbf 	bl	800061c <HAL_GetTick>
 8000c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca0:	e008      	b.n	8000cb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ca2:	f7ff fcbb 	bl	800061c <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d901      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e1a1      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0f0      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	4927      	ldr	r1, [pc, #156]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
 8000cd4:	e015      	b.n	8000d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <HAL_RCC_OscConfig+0x270>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fc9e 	bl	800061c <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fc9a 	bl	800061c <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e180      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f0      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d03a      	beq.n	8000d84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d019      	beq.n	8000d4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_RCC_OscConfig+0x274>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d1c:	f7ff fc7e 	bl	800061c <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d24:	f7ff fc7a 	bl	800061c <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e160      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f0      	beq.n	8000d24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f000 fad8 	bl	80012f8 <RCC_Delay>
 8000d48:	e01c      	b.n	8000d84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_RCC_OscConfig+0x274>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d50:	f7ff fc64 	bl	800061c <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d56:	e00f      	b.n	8000d78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d58:	f7ff fc60 	bl	800061c <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d908      	bls.n	8000d78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e146      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	42420000 	.word	0x42420000
 8000d74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d78:	4b92      	ldr	r3, [pc, #584]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1e9      	bne.n	8000d58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80a6 	beq.w	8000ede <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d96:	4b8b      	ldr	r3, [pc, #556]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10d      	bne.n	8000dbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b88      	ldr	r3, [pc, #544]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a87      	ldr	r2, [pc, #540]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b85      	ldr	r3, [pc, #532]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dbe:	4b82      	ldr	r3, [pc, #520]	; (8000fc8 <HAL_RCC_OscConfig+0x4c8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d118      	bne.n	8000dfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dca:	4b7f      	ldr	r3, [pc, #508]	; (8000fc8 <HAL_RCC_OscConfig+0x4c8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a7e      	ldr	r2, [pc, #504]	; (8000fc8 <HAL_RCC_OscConfig+0x4c8>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dd6:	f7ff fc21 	bl	800061c <HAL_GetTick>
 8000dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ddc:	e008      	b.n	8000df0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dde:	f7ff fc1d 	bl	800061c <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b64      	cmp	r3, #100	; 0x64
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e103      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df0:	4b75      	ldr	r3, [pc, #468]	; (8000fc8 <HAL_RCC_OscConfig+0x4c8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f0      	beq.n	8000dde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d106      	bne.n	8000e12 <HAL_RCC_OscConfig+0x312>
 8000e04:	4b6f      	ldr	r3, [pc, #444]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	4a6e      	ldr	r2, [pc, #440]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6213      	str	r3, [r2, #32]
 8000e10:	e02d      	b.n	8000e6e <HAL_RCC_OscConfig+0x36e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10c      	bne.n	8000e34 <HAL_RCC_OscConfig+0x334>
 8000e1a:	4b6a      	ldr	r3, [pc, #424]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	6a1b      	ldr	r3, [r3, #32]
 8000e1e:	4a69      	ldr	r2, [pc, #420]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	f023 0301 	bic.w	r3, r3, #1
 8000e24:	6213      	str	r3, [r2, #32]
 8000e26:	4b67      	ldr	r3, [pc, #412]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	4a66      	ldr	r2, [pc, #408]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	f023 0304 	bic.w	r3, r3, #4
 8000e30:	6213      	str	r3, [r2, #32]
 8000e32:	e01c      	b.n	8000e6e <HAL_RCC_OscConfig+0x36e>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	2b05      	cmp	r3, #5
 8000e3a:	d10c      	bne.n	8000e56 <HAL_RCC_OscConfig+0x356>
 8000e3c:	4b61      	ldr	r3, [pc, #388]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4a60      	ldr	r2, [pc, #384]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	6213      	str	r3, [r2, #32]
 8000e48:	4b5e      	ldr	r3, [pc, #376]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	4a5d      	ldr	r2, [pc, #372]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6213      	str	r3, [r2, #32]
 8000e54:	e00b      	b.n	8000e6e <HAL_RCC_OscConfig+0x36e>
 8000e56:	4b5b      	ldr	r3, [pc, #364]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	4a5a      	ldr	r2, [pc, #360]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e5c:	f023 0301 	bic.w	r3, r3, #1
 8000e60:	6213      	str	r3, [r2, #32]
 8000e62:	4b58      	ldr	r3, [pc, #352]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	4a57      	ldr	r2, [pc, #348]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e68:	f023 0304 	bic.w	r3, r3, #4
 8000e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d015      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e76:	f7ff fbd1 	bl	800061c <HAL_GetTick>
 8000e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e7c:	e00a      	b.n	8000e94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fbcd 	bl	800061c <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e0b1      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e94:	4b4b      	ldr	r3, [pc, #300]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0ee      	beq.n	8000e7e <HAL_RCC_OscConfig+0x37e>
 8000ea0:	e014      	b.n	8000ecc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fbbb 	bl	800061c <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fbb7 	bl	800061c <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e09b      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec0:	4b40      	ldr	r3, [pc, #256]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1ee      	bne.n	8000eaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d105      	bne.n	8000ede <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed2:	4b3c      	ldr	r3, [pc, #240]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a3b      	ldr	r2, [pc, #236]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000edc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 8087 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ee8:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d061      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d146      	bne.n	8000f8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000efc:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <HAL_RCC_OscConfig+0x4cc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f02:	f7ff fb8b 	bl	800061c <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f0a:	f7ff fb87 	bl	800061c <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e06d      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f1c:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1f0      	bne.n	8000f0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f30:	d108      	bne.n	8000f44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f32:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	4921      	ldr	r1, [pc, #132]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a19      	ldr	r1, [r3, #32]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f54:	430b      	orrs	r3, r1
 8000f56:	491b      	ldr	r1, [pc, #108]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_RCC_OscConfig+0x4cc>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff fb5b 	bl	800061c <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6a:	f7ff fb57 	bl	800061c <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e03d      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f0      	beq.n	8000f6a <HAL_RCC_OscConfig+0x46a>
 8000f88:	e035      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <HAL_RCC_OscConfig+0x4cc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fb44 	bl	800061c <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f98:	f7ff fb40 	bl	800061c <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e026      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x498>
 8000fb6:	e01e      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d107      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e019      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40007000 	.word	0x40007000
 8000fcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_RCC_OscConfig+0x500>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d106      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d001      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e0d0      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001018:	4b6a      	ldr	r3, [pc, #424]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	429a      	cmp	r2, r3
 8001024:	d910      	bls.n	8001048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001026:	4b67      	ldr	r3, [pc, #412]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f023 0207 	bic.w	r2, r3, #7
 800102e:	4965      	ldr	r1, [pc, #404]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	4313      	orrs	r3, r2
 8001034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001036:	4b63      	ldr	r3, [pc, #396]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d001      	beq.n	8001048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e0b8      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001060:	4b59      	ldr	r3, [pc, #356]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a58      	ldr	r2, [pc, #352]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800106a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001078:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4a52      	ldr	r2, [pc, #328]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001084:	4b50      	ldr	r3, [pc, #320]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	494d      	ldr	r1, [pc, #308]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d040      	beq.n	8001124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d107      	bne.n	80010ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d115      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e07f      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d107      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c2:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e073      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d2:	4b3d      	ldr	r3, [pc, #244]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e06b      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e2:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f023 0203 	bic.w	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4936      	ldr	r1, [pc, #216]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010f4:	f7ff fa92 	bl	800061c <HAL_GetTick>
 80010f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fa:	e00a      	b.n	8001112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010fc:	f7ff fa8e 	bl	800061c <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	f241 3288 	movw	r2, #5000	; 0x1388
 800110a:	4293      	cmp	r3, r2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e053      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 020c 	and.w	r2, r3, #12
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	429a      	cmp	r2, r3
 8001122:	d1eb      	bne.n	80010fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d210      	bcs.n	8001154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 0207 	bic.w	r2, r3, #7
 800113a:	4922      	ldr	r1, [pc, #136]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	4313      	orrs	r3, r2
 8001140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d001      	beq.n	8001154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e032      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4916      	ldr	r1, [pc, #88]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	4313      	orrs	r3, r2
 8001170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d009      	beq.n	8001192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	490e      	ldr	r1, [pc, #56]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	4313      	orrs	r3, r2
 8001190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001192:	f000 f821 	bl	80011d8 <HAL_RCC_GetSysClockFreq>
 8001196:	4602      	mov	r2, r0
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	490a      	ldr	r1, [pc, #40]	; (80011cc <HAL_RCC_ClockConfig+0x1c8>)
 80011a4:	5ccb      	ldrb	r3, [r1, r3]
 80011a6:	fa22 f303 	lsr.w	r3, r2, r3
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <HAL_RCC_ClockConfig+0x1cc>)
 80011ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_RCC_ClockConfig+0x1d0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f9f0 	bl	8000598 <HAL_InitTick>

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40022000 	.word	0x40022000
 80011c8:	40021000 	.word	0x40021000
 80011cc:	080021a0 	.word	0x080021a0
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d8:	b490      	push	{r4, r7}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011de:	4b29      	ldr	r3, [pc, #164]	; (8001284 <HAL_RCC_GetSysClockFreq+0xac>)
 80011e0:	1d3c      	adds	r4, r7, #4
 80011e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011e8:	f240 2301 	movw	r3, #513	; 0x201
 80011ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b04      	cmp	r3, #4
 8001210:	d002      	beq.n	8001218 <HAL_RCC_GetSysClockFreq+0x40>
 8001212:	2b08      	cmp	r3, #8
 8001214:	d003      	beq.n	800121e <HAL_RCC_GetSysClockFreq+0x46>
 8001216:	e02b      	b.n	8001270 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <HAL_RCC_GetSysClockFreq+0xb4>)
 800121a:	623b      	str	r3, [r7, #32]
      break;
 800121c:	e02b      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	0c9b      	lsrs	r3, r3, #18
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3328      	adds	r3, #40	; 0x28
 8001228:	443b      	add	r3, r7
 800122a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800122e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d012      	beq.n	8001260 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <HAL_RCC_GetSysClockFreq+0xb0>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	0c5b      	lsrs	r3, r3, #17
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	3328      	adds	r3, #40	; 0x28
 8001246:	443b      	add	r3, r7
 8001248:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800124c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001252:	fb03 f202 	mul.w	r2, r3, r2
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	fbb2 f3f3 	udiv	r3, r2, r3
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
 800125e:	e004      	b.n	800126a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	623b      	str	r3, [r7, #32]
      break;
 800126e:	e002      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001272:	623b      	str	r3, [r7, #32]
      break;
 8001274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001276:	6a3b      	ldr	r3, [r7, #32]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bc90      	pop	{r4, r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	08002190 	.word	0x08002190
 8001288:	40021000 	.word	0x40021000
 800128c:	007a1200 	.word	0x007a1200
 8001290:	003d0900 	.word	0x003d0900

08001294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001298:	4b02      	ldr	r3, [pc, #8]	; (80012a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	20000000 	.word	0x20000000

080012a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012ac:	f7ff fff2 	bl	8001294 <HAL_RCC_GetHCLKFreq>
 80012b0:	4602      	mov	r2, r0
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	4903      	ldr	r1, [pc, #12]	; (80012cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80012be:	5ccb      	ldrb	r3, [r1, r3]
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40021000 	.word	0x40021000
 80012cc:	080021b0 	.word	0x080021b0

080012d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012d4:	f7ff ffde 	bl	8001294 <HAL_RCC_GetHCLKFreq>
 80012d8:	4602      	mov	r2, r0
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	0adb      	lsrs	r3, r3, #11
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	4903      	ldr	r1, [pc, #12]	; (80012f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012e6:	5ccb      	ldrb	r3, [r1, r3]
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40021000 	.word	0x40021000
 80012f4:	080021b0 	.word	0x080021b0

080012f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <RCC_Delay+0x34>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <RCC_Delay+0x38>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001314:	bf00      	nop
  }
  while (Delay --);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1e5a      	subs	r2, r3, #1
 800131a:	60fa      	str	r2, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f9      	bne.n	8001314 <RCC_Delay+0x1c>
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	20000000 	.word	0x20000000
 8001330:	10624dd3 	.word	0x10624dd3

08001334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e03f      	b.n	80013c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d106      	bne.n	8001360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff f830 	bl	80003c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2224      	movs	r2, #36	; 0x24
 8001364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f9a7 	bl	80016cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800138c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	695a      	ldr	r2, [r3, #20]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800139c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2220      	movs	r2, #32
 80013b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2220      	movs	r2, #32
 80013c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b08a      	sub	sp, #40	; 0x28
 80013d2:	af02      	add	r7, sp, #8
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	4613      	mov	r3, r2
 80013dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b20      	cmp	r3, #32
 80013ec:	d17c      	bne.n	80014e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <HAL_UART_Transmit+0x2c>
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e075      	b.n	80014ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <HAL_UART_Transmit+0x3e>
 8001408:	2302      	movs	r3, #2
 800140a:	e06e      	b.n	80014ea <HAL_UART_Transmit+0x11c>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2221      	movs	r2, #33	; 0x21
 800141e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001422:	f7ff f8fb 	bl	800061c <HAL_GetTick>
 8001426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	88fa      	ldrh	r2, [r7, #6]
 800142c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	88fa      	ldrh	r2, [r7, #6]
 8001432:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800143c:	d108      	bne.n	8001450 <HAL_UART_Transmit+0x82>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d104      	bne.n	8001450 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	e003      	b.n	8001458 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001460:	e02a      	b.n	80014b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	2200      	movs	r2, #0
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f000 f8e2 	bl	8001636 <UART_WaitOnFlagUntilTimeout>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e036      	b.n	80014ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10b      	bne.n	800149a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001490:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	3302      	adds	r3, #2
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	e007      	b.n	80014aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	781a      	ldrb	r2, [r3, #0]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	3301      	adds	r3, #1
 80014a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	3b01      	subs	r3, #1
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014bc:	b29b      	uxth	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1cf      	bne.n	8001462 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2200      	movs	r2, #0
 80014ca:	2140      	movs	r1, #64	; 0x40
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 f8b2 	bl	8001636 <UART_WaitOnFlagUntilTimeout>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e006      	b.n	80014ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2220      	movs	r2, #32
 80014e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e000      	b.n	80014ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80014e8:	2302      	movs	r3, #2
  }
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b08a      	sub	sp, #40	; 0x28
 80014f6:	af02      	add	r7, sp, #8
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4613      	mov	r3, r2
 8001500:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b20      	cmp	r3, #32
 8001510:	f040 808c 	bne.w	800162c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <HAL_UART_Receive+0x2e>
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e084      	b.n	800162e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_UART_Receive+0x40>
 800152e:	2302      	movs	r3, #2
 8001530:	e07d      	b.n	800162e <HAL_UART_Receive+0x13c>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2222      	movs	r2, #34	; 0x22
 8001544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800154e:	f7ff f865 	bl	800061c <HAL_GetTick>
 8001552:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	88fa      	ldrh	r2, [r7, #6]
 800155e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001568:	d108      	bne.n	800157c <HAL_UART_Receive+0x8a>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d104      	bne.n	800157c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	e003      	b.n	8001584 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800158c:	e043      	b.n	8001616 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2200      	movs	r2, #0
 8001596:	2120      	movs	r1, #32
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f000 f84c 	bl	8001636 <UART_WaitOnFlagUntilTimeout>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e042      	b.n	800162e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10c      	bne.n	80015c8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	3302      	adds	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	e01f      	b.n	8001608 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015d0:	d007      	beq.n	80015e2 <HAL_UART_Receive+0xf0>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10a      	bne.n	80015f0 <HAL_UART_Receive+0xfe>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d106      	bne.n	80015f0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	e008      	b.n	8001602 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3301      	adds	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800160c:	b29b      	uxth	r3, r3
 800160e:	3b01      	subs	r3, #1
 8001610:	b29a      	uxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800161a:	b29b      	uxth	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1b6      	bne.n	800158e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2220      	movs	r2, #32
 8001624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	e000      	b.n	800162e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800162c:	2302      	movs	r3, #2
  }
}
 800162e:	4618      	mov	r0, r3
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	4613      	mov	r3, r2
 8001644:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001646:	e02c      	b.n	80016a2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800164e:	d028      	beq.n	80016a2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d007      	beq.n	8001666 <UART_WaitOnFlagUntilTimeout+0x30>
 8001656:	f7fe ffe1 	bl	800061c <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	429a      	cmp	r2, r3
 8001664:	d21d      	bcs.n	80016a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001674:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0201 	bic.w	r2, r2, #1
 8001684:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2220      	movs	r2, #32
 800168a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2220      	movs	r2, #32
 8001692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e00f      	b.n	80016c2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4013      	ands	r3, r2
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	bf0c      	ite	eq
 80016b2:	2301      	moveq	r3, #1
 80016b4:	2300      	movne	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d0c3      	beq.n	8001648 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001706:	f023 030c 	bic.w	r3, r3, #12
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	68b9      	ldr	r1, [r7, #8]
 8001710:	430b      	orrs	r3, r1
 8001712:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699a      	ldr	r2, [r3, #24]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a2c      	ldr	r2, [pc, #176]	; (80017e0 <UART_SetConfig+0x114>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d103      	bne.n	800173c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001734:	f7ff fdcc 	bl	80012d0 <HAL_RCC_GetPCLK2Freq>
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	e002      	b.n	8001742 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800173c:	f7ff fdb4 	bl	80012a8 <HAL_RCC_GetPCLK1Freq>
 8001740:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	009a      	lsls	r2, r3, #2
 800174c:	441a      	add	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <UART_SetConfig+0x118>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	0119      	lsls	r1, r3, #4
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	009a      	lsls	r2, r3, #2
 800176c:	441a      	add	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	fbb2 f2f3 	udiv	r2, r2, r3
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <UART_SetConfig+0x118>)
 800177a:	fba3 0302 	umull	r0, r3, r3, r2
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2064      	movs	r0, #100	; 0x64
 8001782:	fb00 f303 	mul.w	r3, r0, r3
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	3332      	adds	r3, #50	; 0x32
 800178c:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <UART_SetConfig+0x118>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001798:	4419      	add	r1, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	009a      	lsls	r2, r3, #2
 80017a4:	441a      	add	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <UART_SetConfig+0x118>)
 80017b2:	fba3 0302 	umull	r0, r3, r3, r2
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2064      	movs	r0, #100	; 0x64
 80017ba:	fb00 f303 	mul.w	r3, r0, r3
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	3332      	adds	r3, #50	; 0x32
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <UART_SetConfig+0x118>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	f003 020f 	and.w	r2, r3, #15
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	440a      	add	r2, r1
 80017d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40013800 	.word	0x40013800
 80017e4:	51eb851f 	.word	0x51eb851f

080017e8 <__errno>:
 80017e8:	4b01      	ldr	r3, [pc, #4]	; (80017f0 <__errno+0x8>)
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	2000000c 	.word	0x2000000c

080017f4 <__libc_init_array>:
 80017f4:	b570      	push	{r4, r5, r6, lr}
 80017f6:	2600      	movs	r6, #0
 80017f8:	4d0c      	ldr	r5, [pc, #48]	; (800182c <__libc_init_array+0x38>)
 80017fa:	4c0d      	ldr	r4, [pc, #52]	; (8001830 <__libc_init_array+0x3c>)
 80017fc:	1b64      	subs	r4, r4, r5
 80017fe:	10a4      	asrs	r4, r4, #2
 8001800:	42a6      	cmp	r6, r4
 8001802:	d109      	bne.n	8001818 <__libc_init_array+0x24>
 8001804:	f000 fc9c 	bl	8002140 <_init>
 8001808:	2600      	movs	r6, #0
 800180a:	4d0a      	ldr	r5, [pc, #40]	; (8001834 <__libc_init_array+0x40>)
 800180c:	4c0a      	ldr	r4, [pc, #40]	; (8001838 <__libc_init_array+0x44>)
 800180e:	1b64      	subs	r4, r4, r5
 8001810:	10a4      	asrs	r4, r4, #2
 8001812:	42a6      	cmp	r6, r4
 8001814:	d105      	bne.n	8001822 <__libc_init_array+0x2e>
 8001816:	bd70      	pop	{r4, r5, r6, pc}
 8001818:	f855 3b04 	ldr.w	r3, [r5], #4
 800181c:	4798      	blx	r3
 800181e:	3601      	adds	r6, #1
 8001820:	e7ee      	b.n	8001800 <__libc_init_array+0xc>
 8001822:	f855 3b04 	ldr.w	r3, [r5], #4
 8001826:	4798      	blx	r3
 8001828:	3601      	adds	r6, #1
 800182a:	e7f2      	b.n	8001812 <__libc_init_array+0x1e>
 800182c:	080021ec 	.word	0x080021ec
 8001830:	080021ec 	.word	0x080021ec
 8001834:	080021ec 	.word	0x080021ec
 8001838:	080021f0 	.word	0x080021f0

0800183c <memset>:
 800183c:	4603      	mov	r3, r0
 800183e:	4402      	add	r2, r0
 8001840:	4293      	cmp	r3, r2
 8001842:	d100      	bne.n	8001846 <memset+0xa>
 8001844:	4770      	bx	lr
 8001846:	f803 1b01 	strb.w	r1, [r3], #1
 800184a:	e7f9      	b.n	8001840 <memset+0x4>

0800184c <siprintf>:
 800184c:	b40e      	push	{r1, r2, r3}
 800184e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001852:	b500      	push	{lr}
 8001854:	b09c      	sub	sp, #112	; 0x70
 8001856:	ab1d      	add	r3, sp, #116	; 0x74
 8001858:	9002      	str	r0, [sp, #8]
 800185a:	9006      	str	r0, [sp, #24]
 800185c:	9107      	str	r1, [sp, #28]
 800185e:	9104      	str	r1, [sp, #16]
 8001860:	4808      	ldr	r0, [pc, #32]	; (8001884 <siprintf+0x38>)
 8001862:	4909      	ldr	r1, [pc, #36]	; (8001888 <siprintf+0x3c>)
 8001864:	f853 2b04 	ldr.w	r2, [r3], #4
 8001868:	9105      	str	r1, [sp, #20]
 800186a:	6800      	ldr	r0, [r0, #0]
 800186c:	a902      	add	r1, sp, #8
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	f000 f868 	bl	8001944 <_svfiprintf_r>
 8001874:	2200      	movs	r2, #0
 8001876:	9b02      	ldr	r3, [sp, #8]
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	b01c      	add	sp, #112	; 0x70
 800187c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001880:	b003      	add	sp, #12
 8001882:	4770      	bx	lr
 8001884:	2000000c 	.word	0x2000000c
 8001888:	ffff0208 	.word	0xffff0208

0800188c <__ssputs_r>:
 800188c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001890:	688e      	ldr	r6, [r1, #8]
 8001892:	4682      	mov	sl, r0
 8001894:	429e      	cmp	r6, r3
 8001896:	460c      	mov	r4, r1
 8001898:	4690      	mov	r8, r2
 800189a:	461f      	mov	r7, r3
 800189c:	d838      	bhi.n	8001910 <__ssputs_r+0x84>
 800189e:	898a      	ldrh	r2, [r1, #12]
 80018a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80018a4:	d032      	beq.n	800190c <__ssputs_r+0x80>
 80018a6:	6825      	ldr	r5, [r4, #0]
 80018a8:	6909      	ldr	r1, [r1, #16]
 80018aa:	3301      	adds	r3, #1
 80018ac:	eba5 0901 	sub.w	r9, r5, r1
 80018b0:	6965      	ldr	r5, [r4, #20]
 80018b2:	444b      	add	r3, r9
 80018b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80018b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80018bc:	106d      	asrs	r5, r5, #1
 80018be:	429d      	cmp	r5, r3
 80018c0:	bf38      	it	cc
 80018c2:	461d      	movcc	r5, r3
 80018c4:	0553      	lsls	r3, r2, #21
 80018c6:	d531      	bpl.n	800192c <__ssputs_r+0xa0>
 80018c8:	4629      	mov	r1, r5
 80018ca:	f000 fb6f 	bl	8001fac <_malloc_r>
 80018ce:	4606      	mov	r6, r0
 80018d0:	b950      	cbnz	r0, 80018e8 <__ssputs_r+0x5c>
 80018d2:	230c      	movs	r3, #12
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018d8:	f8ca 3000 	str.w	r3, [sl]
 80018dc:	89a3      	ldrh	r3, [r4, #12]
 80018de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e2:	81a3      	strh	r3, [r4, #12]
 80018e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018e8:	464a      	mov	r2, r9
 80018ea:	6921      	ldr	r1, [r4, #16]
 80018ec:	f000 face 	bl	8001e8c <memcpy>
 80018f0:	89a3      	ldrh	r3, [r4, #12]
 80018f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80018f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fa:	81a3      	strh	r3, [r4, #12]
 80018fc:	6126      	str	r6, [r4, #16]
 80018fe:	444e      	add	r6, r9
 8001900:	6026      	str	r6, [r4, #0]
 8001902:	463e      	mov	r6, r7
 8001904:	6165      	str	r5, [r4, #20]
 8001906:	eba5 0509 	sub.w	r5, r5, r9
 800190a:	60a5      	str	r5, [r4, #8]
 800190c:	42be      	cmp	r6, r7
 800190e:	d900      	bls.n	8001912 <__ssputs_r+0x86>
 8001910:	463e      	mov	r6, r7
 8001912:	4632      	mov	r2, r6
 8001914:	4641      	mov	r1, r8
 8001916:	6820      	ldr	r0, [r4, #0]
 8001918:	f000 fac6 	bl	8001ea8 <memmove>
 800191c:	68a3      	ldr	r3, [r4, #8]
 800191e:	2000      	movs	r0, #0
 8001920:	1b9b      	subs	r3, r3, r6
 8001922:	60a3      	str	r3, [r4, #8]
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	4433      	add	r3, r6
 8001928:	6023      	str	r3, [r4, #0]
 800192a:	e7db      	b.n	80018e4 <__ssputs_r+0x58>
 800192c:	462a      	mov	r2, r5
 800192e:	f000 fbb1 	bl	8002094 <_realloc_r>
 8001932:	4606      	mov	r6, r0
 8001934:	2800      	cmp	r0, #0
 8001936:	d1e1      	bne.n	80018fc <__ssputs_r+0x70>
 8001938:	4650      	mov	r0, sl
 800193a:	6921      	ldr	r1, [r4, #16]
 800193c:	f000 face 	bl	8001edc <_free_r>
 8001940:	e7c7      	b.n	80018d2 <__ssputs_r+0x46>
	...

08001944 <_svfiprintf_r>:
 8001944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001948:	4698      	mov	r8, r3
 800194a:	898b      	ldrh	r3, [r1, #12]
 800194c:	4607      	mov	r7, r0
 800194e:	061b      	lsls	r3, r3, #24
 8001950:	460d      	mov	r5, r1
 8001952:	4614      	mov	r4, r2
 8001954:	b09d      	sub	sp, #116	; 0x74
 8001956:	d50e      	bpl.n	8001976 <_svfiprintf_r+0x32>
 8001958:	690b      	ldr	r3, [r1, #16]
 800195a:	b963      	cbnz	r3, 8001976 <_svfiprintf_r+0x32>
 800195c:	2140      	movs	r1, #64	; 0x40
 800195e:	f000 fb25 	bl	8001fac <_malloc_r>
 8001962:	6028      	str	r0, [r5, #0]
 8001964:	6128      	str	r0, [r5, #16]
 8001966:	b920      	cbnz	r0, 8001972 <_svfiprintf_r+0x2e>
 8001968:	230c      	movs	r3, #12
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001970:	e0d1      	b.n	8001b16 <_svfiprintf_r+0x1d2>
 8001972:	2340      	movs	r3, #64	; 0x40
 8001974:	616b      	str	r3, [r5, #20]
 8001976:	2300      	movs	r3, #0
 8001978:	9309      	str	r3, [sp, #36]	; 0x24
 800197a:	2320      	movs	r3, #32
 800197c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001980:	2330      	movs	r3, #48	; 0x30
 8001982:	f04f 0901 	mov.w	r9, #1
 8001986:	f8cd 800c 	str.w	r8, [sp, #12]
 800198a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001b30 <_svfiprintf_r+0x1ec>
 800198e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001992:	4623      	mov	r3, r4
 8001994:	469a      	mov	sl, r3
 8001996:	f813 2b01 	ldrb.w	r2, [r3], #1
 800199a:	b10a      	cbz	r2, 80019a0 <_svfiprintf_r+0x5c>
 800199c:	2a25      	cmp	r2, #37	; 0x25
 800199e:	d1f9      	bne.n	8001994 <_svfiprintf_r+0x50>
 80019a0:	ebba 0b04 	subs.w	fp, sl, r4
 80019a4:	d00b      	beq.n	80019be <_svfiprintf_r+0x7a>
 80019a6:	465b      	mov	r3, fp
 80019a8:	4622      	mov	r2, r4
 80019aa:	4629      	mov	r1, r5
 80019ac:	4638      	mov	r0, r7
 80019ae:	f7ff ff6d 	bl	800188c <__ssputs_r>
 80019b2:	3001      	adds	r0, #1
 80019b4:	f000 80aa 	beq.w	8001b0c <_svfiprintf_r+0x1c8>
 80019b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80019ba:	445a      	add	r2, fp
 80019bc:	9209      	str	r2, [sp, #36]	; 0x24
 80019be:	f89a 3000 	ldrb.w	r3, [sl]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80a2 	beq.w	8001b0c <_svfiprintf_r+0x1c8>
 80019c8:	2300      	movs	r3, #0
 80019ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019d2:	f10a 0a01 	add.w	sl, sl, #1
 80019d6:	9304      	str	r3, [sp, #16]
 80019d8:	9307      	str	r3, [sp, #28]
 80019da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80019de:	931a      	str	r3, [sp, #104]	; 0x68
 80019e0:	4654      	mov	r4, sl
 80019e2:	2205      	movs	r2, #5
 80019e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019e8:	4851      	ldr	r0, [pc, #324]	; (8001b30 <_svfiprintf_r+0x1ec>)
 80019ea:	f000 fa41 	bl	8001e70 <memchr>
 80019ee:	9a04      	ldr	r2, [sp, #16]
 80019f0:	b9d8      	cbnz	r0, 8001a2a <_svfiprintf_r+0xe6>
 80019f2:	06d0      	lsls	r0, r2, #27
 80019f4:	bf44      	itt	mi
 80019f6:	2320      	movmi	r3, #32
 80019f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019fc:	0711      	lsls	r1, r2, #28
 80019fe:	bf44      	itt	mi
 8001a00:	232b      	movmi	r3, #43	; 0x2b
 8001a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a06:	f89a 3000 	ldrb.w	r3, [sl]
 8001a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8001a0c:	d015      	beq.n	8001a3a <_svfiprintf_r+0xf6>
 8001a0e:	4654      	mov	r4, sl
 8001a10:	2000      	movs	r0, #0
 8001a12:	f04f 0c0a 	mov.w	ip, #10
 8001a16:	9a07      	ldr	r2, [sp, #28]
 8001a18:	4621      	mov	r1, r4
 8001a1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a1e:	3b30      	subs	r3, #48	; 0x30
 8001a20:	2b09      	cmp	r3, #9
 8001a22:	d94e      	bls.n	8001ac2 <_svfiprintf_r+0x17e>
 8001a24:	b1b0      	cbz	r0, 8001a54 <_svfiprintf_r+0x110>
 8001a26:	9207      	str	r2, [sp, #28]
 8001a28:	e014      	b.n	8001a54 <_svfiprintf_r+0x110>
 8001a2a:	eba0 0308 	sub.w	r3, r0, r8
 8001a2e:	fa09 f303 	lsl.w	r3, r9, r3
 8001a32:	4313      	orrs	r3, r2
 8001a34:	46a2      	mov	sl, r4
 8001a36:	9304      	str	r3, [sp, #16]
 8001a38:	e7d2      	b.n	80019e0 <_svfiprintf_r+0x9c>
 8001a3a:	9b03      	ldr	r3, [sp, #12]
 8001a3c:	1d19      	adds	r1, r3, #4
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	9103      	str	r1, [sp, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bfbb      	ittet	lt
 8001a46:	425b      	neglt	r3, r3
 8001a48:	f042 0202 	orrlt.w	r2, r2, #2
 8001a4c:	9307      	strge	r3, [sp, #28]
 8001a4e:	9307      	strlt	r3, [sp, #28]
 8001a50:	bfb8      	it	lt
 8001a52:	9204      	strlt	r2, [sp, #16]
 8001a54:	7823      	ldrb	r3, [r4, #0]
 8001a56:	2b2e      	cmp	r3, #46	; 0x2e
 8001a58:	d10c      	bne.n	8001a74 <_svfiprintf_r+0x130>
 8001a5a:	7863      	ldrb	r3, [r4, #1]
 8001a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8001a5e:	d135      	bne.n	8001acc <_svfiprintf_r+0x188>
 8001a60:	9b03      	ldr	r3, [sp, #12]
 8001a62:	3402      	adds	r4, #2
 8001a64:	1d1a      	adds	r2, r3, #4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	9203      	str	r2, [sp, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bfb8      	it	lt
 8001a6e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001a72:	9305      	str	r3, [sp, #20]
 8001a74:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001b34 <_svfiprintf_r+0x1f0>
 8001a78:	2203      	movs	r2, #3
 8001a7a:	4650      	mov	r0, sl
 8001a7c:	7821      	ldrb	r1, [r4, #0]
 8001a7e:	f000 f9f7 	bl	8001e70 <memchr>
 8001a82:	b140      	cbz	r0, 8001a96 <_svfiprintf_r+0x152>
 8001a84:	2340      	movs	r3, #64	; 0x40
 8001a86:	eba0 000a 	sub.w	r0, r0, sl
 8001a8a:	fa03 f000 	lsl.w	r0, r3, r0
 8001a8e:	9b04      	ldr	r3, [sp, #16]
 8001a90:	3401      	adds	r4, #1
 8001a92:	4303      	orrs	r3, r0
 8001a94:	9304      	str	r3, [sp, #16]
 8001a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a9a:	2206      	movs	r2, #6
 8001a9c:	4826      	ldr	r0, [pc, #152]	; (8001b38 <_svfiprintf_r+0x1f4>)
 8001a9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001aa2:	f000 f9e5 	bl	8001e70 <memchr>
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	d038      	beq.n	8001b1c <_svfiprintf_r+0x1d8>
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <_svfiprintf_r+0x1f8>)
 8001aac:	bb1b      	cbnz	r3, 8001af6 <_svfiprintf_r+0x1b2>
 8001aae:	9b03      	ldr	r3, [sp, #12]
 8001ab0:	3307      	adds	r3, #7
 8001ab2:	f023 0307 	bic.w	r3, r3, #7
 8001ab6:	3308      	adds	r3, #8
 8001ab8:	9303      	str	r3, [sp, #12]
 8001aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001abc:	4433      	add	r3, r6
 8001abe:	9309      	str	r3, [sp, #36]	; 0x24
 8001ac0:	e767      	b.n	8001992 <_svfiprintf_r+0x4e>
 8001ac2:	460c      	mov	r4, r1
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	fb0c 3202 	mla	r2, ip, r2, r3
 8001aca:	e7a5      	b.n	8001a18 <_svfiprintf_r+0xd4>
 8001acc:	2300      	movs	r3, #0
 8001ace:	f04f 0c0a 	mov.w	ip, #10
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	3401      	adds	r4, #1
 8001ad6:	9305      	str	r3, [sp, #20]
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ade:	3a30      	subs	r2, #48	; 0x30
 8001ae0:	2a09      	cmp	r2, #9
 8001ae2:	d903      	bls.n	8001aec <_svfiprintf_r+0x1a8>
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0c5      	beq.n	8001a74 <_svfiprintf_r+0x130>
 8001ae8:	9105      	str	r1, [sp, #20]
 8001aea:	e7c3      	b.n	8001a74 <_svfiprintf_r+0x130>
 8001aec:	4604      	mov	r4, r0
 8001aee:	2301      	movs	r3, #1
 8001af0:	fb0c 2101 	mla	r1, ip, r1, r2
 8001af4:	e7f0      	b.n	8001ad8 <_svfiprintf_r+0x194>
 8001af6:	ab03      	add	r3, sp, #12
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	462a      	mov	r2, r5
 8001afc:	4638      	mov	r0, r7
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <_svfiprintf_r+0x1fc>)
 8001b00:	a904      	add	r1, sp, #16
 8001b02:	f3af 8000 	nop.w
 8001b06:	1c42      	adds	r2, r0, #1
 8001b08:	4606      	mov	r6, r0
 8001b0a:	d1d6      	bne.n	8001aba <_svfiprintf_r+0x176>
 8001b0c:	89ab      	ldrh	r3, [r5, #12]
 8001b0e:	065b      	lsls	r3, r3, #25
 8001b10:	f53f af2c 	bmi.w	800196c <_svfiprintf_r+0x28>
 8001b14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b16:	b01d      	add	sp, #116	; 0x74
 8001b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b1c:	ab03      	add	r3, sp, #12
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	462a      	mov	r2, r5
 8001b22:	4638      	mov	r0, r7
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <_svfiprintf_r+0x1fc>)
 8001b26:	a904      	add	r1, sp, #16
 8001b28:	f000 f87c 	bl	8001c24 <_printf_i>
 8001b2c:	e7eb      	b.n	8001b06 <_svfiprintf_r+0x1c2>
 8001b2e:	bf00      	nop
 8001b30:	080021b8 	.word	0x080021b8
 8001b34:	080021be 	.word	0x080021be
 8001b38:	080021c2 	.word	0x080021c2
 8001b3c:	00000000 	.word	0x00000000
 8001b40:	0800188d 	.word	0x0800188d

08001b44 <_printf_common>:
 8001b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b48:	4616      	mov	r6, r2
 8001b4a:	4699      	mov	r9, r3
 8001b4c:	688a      	ldr	r2, [r1, #8]
 8001b4e:	690b      	ldr	r3, [r1, #16]
 8001b50:	4607      	mov	r7, r0
 8001b52:	4293      	cmp	r3, r2
 8001b54:	bfb8      	it	lt
 8001b56:	4613      	movlt	r3, r2
 8001b58:	6033      	str	r3, [r6, #0]
 8001b5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b5e:	460c      	mov	r4, r1
 8001b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b64:	b10a      	cbz	r2, 8001b6a <_printf_common+0x26>
 8001b66:	3301      	adds	r3, #1
 8001b68:	6033      	str	r3, [r6, #0]
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	0699      	lsls	r1, r3, #26
 8001b6e:	bf42      	ittt	mi
 8001b70:	6833      	ldrmi	r3, [r6, #0]
 8001b72:	3302      	addmi	r3, #2
 8001b74:	6033      	strmi	r3, [r6, #0]
 8001b76:	6825      	ldr	r5, [r4, #0]
 8001b78:	f015 0506 	ands.w	r5, r5, #6
 8001b7c:	d106      	bne.n	8001b8c <_printf_common+0x48>
 8001b7e:	f104 0a19 	add.w	sl, r4, #25
 8001b82:	68e3      	ldr	r3, [r4, #12]
 8001b84:	6832      	ldr	r2, [r6, #0]
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	42ab      	cmp	r3, r5
 8001b8a:	dc28      	bgt.n	8001bde <_printf_common+0x9a>
 8001b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001b90:	1e13      	subs	r3, r2, #0
 8001b92:	6822      	ldr	r2, [r4, #0]
 8001b94:	bf18      	it	ne
 8001b96:	2301      	movne	r3, #1
 8001b98:	0692      	lsls	r2, r2, #26
 8001b9a:	d42d      	bmi.n	8001bf8 <_printf_common+0xb4>
 8001b9c:	4649      	mov	r1, r9
 8001b9e:	4638      	mov	r0, r7
 8001ba0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ba4:	47c0      	blx	r8
 8001ba6:	3001      	adds	r0, #1
 8001ba8:	d020      	beq.n	8001bec <_printf_common+0xa8>
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	68e5      	ldr	r5, [r4, #12]
 8001bae:	f003 0306 	and.w	r3, r3, #6
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf18      	it	ne
 8001bb6:	2500      	movne	r5, #0
 8001bb8:	6832      	ldr	r2, [r6, #0]
 8001bba:	f04f 0600 	mov.w	r6, #0
 8001bbe:	68a3      	ldr	r3, [r4, #8]
 8001bc0:	bf08      	it	eq
 8001bc2:	1aad      	subeq	r5, r5, r2
 8001bc4:	6922      	ldr	r2, [r4, #16]
 8001bc6:	bf08      	it	eq
 8001bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	bfc4      	itt	gt
 8001bd0:	1a9b      	subgt	r3, r3, r2
 8001bd2:	18ed      	addgt	r5, r5, r3
 8001bd4:	341a      	adds	r4, #26
 8001bd6:	42b5      	cmp	r5, r6
 8001bd8:	d11a      	bne.n	8001c10 <_printf_common+0xcc>
 8001bda:	2000      	movs	r0, #0
 8001bdc:	e008      	b.n	8001bf0 <_printf_common+0xac>
 8001bde:	2301      	movs	r3, #1
 8001be0:	4652      	mov	r2, sl
 8001be2:	4649      	mov	r1, r9
 8001be4:	4638      	mov	r0, r7
 8001be6:	47c0      	blx	r8
 8001be8:	3001      	adds	r0, #1
 8001bea:	d103      	bne.n	8001bf4 <_printf_common+0xb0>
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bf4:	3501      	adds	r5, #1
 8001bf6:	e7c4      	b.n	8001b82 <_printf_common+0x3e>
 8001bf8:	2030      	movs	r0, #48	; 0x30
 8001bfa:	18e1      	adds	r1, r4, r3
 8001bfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c06:	4422      	add	r2, r4
 8001c08:	3302      	adds	r3, #2
 8001c0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c0e:	e7c5      	b.n	8001b9c <_printf_common+0x58>
 8001c10:	2301      	movs	r3, #1
 8001c12:	4622      	mov	r2, r4
 8001c14:	4649      	mov	r1, r9
 8001c16:	4638      	mov	r0, r7
 8001c18:	47c0      	blx	r8
 8001c1a:	3001      	adds	r0, #1
 8001c1c:	d0e6      	beq.n	8001bec <_printf_common+0xa8>
 8001c1e:	3601      	adds	r6, #1
 8001c20:	e7d9      	b.n	8001bd6 <_printf_common+0x92>
	...

08001c24 <_printf_i>:
 8001c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c28:	7e0f      	ldrb	r7, [r1, #24]
 8001c2a:	4691      	mov	r9, r2
 8001c2c:	2f78      	cmp	r7, #120	; 0x78
 8001c2e:	4680      	mov	r8, r0
 8001c30:	460c      	mov	r4, r1
 8001c32:	469a      	mov	sl, r3
 8001c34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001c3a:	d807      	bhi.n	8001c4c <_printf_i+0x28>
 8001c3c:	2f62      	cmp	r7, #98	; 0x62
 8001c3e:	d80a      	bhi.n	8001c56 <_printf_i+0x32>
 8001c40:	2f00      	cmp	r7, #0
 8001c42:	f000 80d9 	beq.w	8001df8 <_printf_i+0x1d4>
 8001c46:	2f58      	cmp	r7, #88	; 0x58
 8001c48:	f000 80a4 	beq.w	8001d94 <_printf_i+0x170>
 8001c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001c54:	e03a      	b.n	8001ccc <_printf_i+0xa8>
 8001c56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001c5a:	2b15      	cmp	r3, #21
 8001c5c:	d8f6      	bhi.n	8001c4c <_printf_i+0x28>
 8001c5e:	a101      	add	r1, pc, #4	; (adr r1, 8001c64 <_printf_i+0x40>)
 8001c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c64:	08001cbd 	.word	0x08001cbd
 8001c68:	08001cd1 	.word	0x08001cd1
 8001c6c:	08001c4d 	.word	0x08001c4d
 8001c70:	08001c4d 	.word	0x08001c4d
 8001c74:	08001c4d 	.word	0x08001c4d
 8001c78:	08001c4d 	.word	0x08001c4d
 8001c7c:	08001cd1 	.word	0x08001cd1
 8001c80:	08001c4d 	.word	0x08001c4d
 8001c84:	08001c4d 	.word	0x08001c4d
 8001c88:	08001c4d 	.word	0x08001c4d
 8001c8c:	08001c4d 	.word	0x08001c4d
 8001c90:	08001ddf 	.word	0x08001ddf
 8001c94:	08001d01 	.word	0x08001d01
 8001c98:	08001dc1 	.word	0x08001dc1
 8001c9c:	08001c4d 	.word	0x08001c4d
 8001ca0:	08001c4d 	.word	0x08001c4d
 8001ca4:	08001e01 	.word	0x08001e01
 8001ca8:	08001c4d 	.word	0x08001c4d
 8001cac:	08001d01 	.word	0x08001d01
 8001cb0:	08001c4d 	.word	0x08001c4d
 8001cb4:	08001c4d 	.word	0x08001c4d
 8001cb8:	08001dc9 	.word	0x08001dc9
 8001cbc:	682b      	ldr	r3, [r5, #0]
 8001cbe:	1d1a      	adds	r2, r3, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	602a      	str	r2, [r5, #0]
 8001cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0a4      	b.n	8001e1a <_printf_i+0x1f6>
 8001cd0:	6820      	ldr	r0, [r4, #0]
 8001cd2:	6829      	ldr	r1, [r5, #0]
 8001cd4:	0606      	lsls	r6, r0, #24
 8001cd6:	f101 0304 	add.w	r3, r1, #4
 8001cda:	d50a      	bpl.n	8001cf2 <_printf_i+0xce>
 8001cdc:	680e      	ldr	r6, [r1, #0]
 8001cde:	602b      	str	r3, [r5, #0]
 8001ce0:	2e00      	cmp	r6, #0
 8001ce2:	da03      	bge.n	8001cec <_printf_i+0xc8>
 8001ce4:	232d      	movs	r3, #45	; 0x2d
 8001ce6:	4276      	negs	r6, r6
 8001ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cec:	230a      	movs	r3, #10
 8001cee:	485e      	ldr	r0, [pc, #376]	; (8001e68 <_printf_i+0x244>)
 8001cf0:	e019      	b.n	8001d26 <_printf_i+0x102>
 8001cf2:	680e      	ldr	r6, [r1, #0]
 8001cf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001cf8:	602b      	str	r3, [r5, #0]
 8001cfa:	bf18      	it	ne
 8001cfc:	b236      	sxthne	r6, r6
 8001cfe:	e7ef      	b.n	8001ce0 <_printf_i+0xbc>
 8001d00:	682b      	ldr	r3, [r5, #0]
 8001d02:	6820      	ldr	r0, [r4, #0]
 8001d04:	1d19      	adds	r1, r3, #4
 8001d06:	6029      	str	r1, [r5, #0]
 8001d08:	0601      	lsls	r1, r0, #24
 8001d0a:	d501      	bpl.n	8001d10 <_printf_i+0xec>
 8001d0c:	681e      	ldr	r6, [r3, #0]
 8001d0e:	e002      	b.n	8001d16 <_printf_i+0xf2>
 8001d10:	0646      	lsls	r6, r0, #25
 8001d12:	d5fb      	bpl.n	8001d0c <_printf_i+0xe8>
 8001d14:	881e      	ldrh	r6, [r3, #0]
 8001d16:	2f6f      	cmp	r7, #111	; 0x6f
 8001d18:	bf0c      	ite	eq
 8001d1a:	2308      	moveq	r3, #8
 8001d1c:	230a      	movne	r3, #10
 8001d1e:	4852      	ldr	r0, [pc, #328]	; (8001e68 <_printf_i+0x244>)
 8001d20:	2100      	movs	r1, #0
 8001d22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d26:	6865      	ldr	r5, [r4, #4]
 8001d28:	2d00      	cmp	r5, #0
 8001d2a:	bfa8      	it	ge
 8001d2c:	6821      	ldrge	r1, [r4, #0]
 8001d2e:	60a5      	str	r5, [r4, #8]
 8001d30:	bfa4      	itt	ge
 8001d32:	f021 0104 	bicge.w	r1, r1, #4
 8001d36:	6021      	strge	r1, [r4, #0]
 8001d38:	b90e      	cbnz	r6, 8001d3e <_printf_i+0x11a>
 8001d3a:	2d00      	cmp	r5, #0
 8001d3c:	d04d      	beq.n	8001dda <_printf_i+0x1b6>
 8001d3e:	4615      	mov	r5, r2
 8001d40:	fbb6 f1f3 	udiv	r1, r6, r3
 8001d44:	fb03 6711 	mls	r7, r3, r1, r6
 8001d48:	5dc7      	ldrb	r7, [r0, r7]
 8001d4a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001d4e:	4637      	mov	r7, r6
 8001d50:	42bb      	cmp	r3, r7
 8001d52:	460e      	mov	r6, r1
 8001d54:	d9f4      	bls.n	8001d40 <_printf_i+0x11c>
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d10b      	bne.n	8001d72 <_printf_i+0x14e>
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	07de      	lsls	r6, r3, #31
 8001d5e:	d508      	bpl.n	8001d72 <_printf_i+0x14e>
 8001d60:	6923      	ldr	r3, [r4, #16]
 8001d62:	6861      	ldr	r1, [r4, #4]
 8001d64:	4299      	cmp	r1, r3
 8001d66:	bfde      	ittt	le
 8001d68:	2330      	movle	r3, #48	; 0x30
 8001d6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d6e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001d72:	1b52      	subs	r2, r2, r5
 8001d74:	6122      	str	r2, [r4, #16]
 8001d76:	464b      	mov	r3, r9
 8001d78:	4621      	mov	r1, r4
 8001d7a:	4640      	mov	r0, r8
 8001d7c:	f8cd a000 	str.w	sl, [sp]
 8001d80:	aa03      	add	r2, sp, #12
 8001d82:	f7ff fedf 	bl	8001b44 <_printf_common>
 8001d86:	3001      	adds	r0, #1
 8001d88:	d14c      	bne.n	8001e24 <_printf_i+0x200>
 8001d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d8e:	b004      	add	sp, #16
 8001d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d94:	4834      	ldr	r0, [pc, #208]	; (8001e68 <_printf_i+0x244>)
 8001d96:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001d9a:	6829      	ldr	r1, [r5, #0]
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	f851 6b04 	ldr.w	r6, [r1], #4
 8001da2:	6029      	str	r1, [r5, #0]
 8001da4:	061d      	lsls	r5, r3, #24
 8001da6:	d514      	bpl.n	8001dd2 <_printf_i+0x1ae>
 8001da8:	07df      	lsls	r7, r3, #31
 8001daa:	bf44      	itt	mi
 8001dac:	f043 0320 	orrmi.w	r3, r3, #32
 8001db0:	6023      	strmi	r3, [r4, #0]
 8001db2:	b91e      	cbnz	r6, 8001dbc <_printf_i+0x198>
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	f023 0320 	bic.w	r3, r3, #32
 8001dba:	6023      	str	r3, [r4, #0]
 8001dbc:	2310      	movs	r3, #16
 8001dbe:	e7af      	b.n	8001d20 <_printf_i+0xfc>
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	f043 0320 	orr.w	r3, r3, #32
 8001dc6:	6023      	str	r3, [r4, #0]
 8001dc8:	2378      	movs	r3, #120	; 0x78
 8001dca:	4828      	ldr	r0, [pc, #160]	; (8001e6c <_printf_i+0x248>)
 8001dcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001dd0:	e7e3      	b.n	8001d9a <_printf_i+0x176>
 8001dd2:	0659      	lsls	r1, r3, #25
 8001dd4:	bf48      	it	mi
 8001dd6:	b2b6      	uxthmi	r6, r6
 8001dd8:	e7e6      	b.n	8001da8 <_printf_i+0x184>
 8001dda:	4615      	mov	r5, r2
 8001ddc:	e7bb      	b.n	8001d56 <_printf_i+0x132>
 8001dde:	682b      	ldr	r3, [r5, #0]
 8001de0:	6826      	ldr	r6, [r4, #0]
 8001de2:	1d18      	adds	r0, r3, #4
 8001de4:	6961      	ldr	r1, [r4, #20]
 8001de6:	6028      	str	r0, [r5, #0]
 8001de8:	0635      	lsls	r5, r6, #24
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	d501      	bpl.n	8001df2 <_printf_i+0x1ce>
 8001dee:	6019      	str	r1, [r3, #0]
 8001df0:	e002      	b.n	8001df8 <_printf_i+0x1d4>
 8001df2:	0670      	lsls	r0, r6, #25
 8001df4:	d5fb      	bpl.n	8001dee <_printf_i+0x1ca>
 8001df6:	8019      	strh	r1, [r3, #0]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	4615      	mov	r5, r2
 8001dfc:	6123      	str	r3, [r4, #16]
 8001dfe:	e7ba      	b.n	8001d76 <_printf_i+0x152>
 8001e00:	682b      	ldr	r3, [r5, #0]
 8001e02:	2100      	movs	r1, #0
 8001e04:	1d1a      	adds	r2, r3, #4
 8001e06:	602a      	str	r2, [r5, #0]
 8001e08:	681d      	ldr	r5, [r3, #0]
 8001e0a:	6862      	ldr	r2, [r4, #4]
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f000 f82f 	bl	8001e70 <memchr>
 8001e12:	b108      	cbz	r0, 8001e18 <_printf_i+0x1f4>
 8001e14:	1b40      	subs	r0, r0, r5
 8001e16:	6060      	str	r0, [r4, #4]
 8001e18:	6863      	ldr	r3, [r4, #4]
 8001e1a:	6123      	str	r3, [r4, #16]
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e22:	e7a8      	b.n	8001d76 <_printf_i+0x152>
 8001e24:	462a      	mov	r2, r5
 8001e26:	4649      	mov	r1, r9
 8001e28:	4640      	mov	r0, r8
 8001e2a:	6923      	ldr	r3, [r4, #16]
 8001e2c:	47d0      	blx	sl
 8001e2e:	3001      	adds	r0, #1
 8001e30:	d0ab      	beq.n	8001d8a <_printf_i+0x166>
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	079b      	lsls	r3, r3, #30
 8001e36:	d413      	bmi.n	8001e60 <_printf_i+0x23c>
 8001e38:	68e0      	ldr	r0, [r4, #12]
 8001e3a:	9b03      	ldr	r3, [sp, #12]
 8001e3c:	4298      	cmp	r0, r3
 8001e3e:	bfb8      	it	lt
 8001e40:	4618      	movlt	r0, r3
 8001e42:	e7a4      	b.n	8001d8e <_printf_i+0x16a>
 8001e44:	2301      	movs	r3, #1
 8001e46:	4632      	mov	r2, r6
 8001e48:	4649      	mov	r1, r9
 8001e4a:	4640      	mov	r0, r8
 8001e4c:	47d0      	blx	sl
 8001e4e:	3001      	adds	r0, #1
 8001e50:	d09b      	beq.n	8001d8a <_printf_i+0x166>
 8001e52:	3501      	adds	r5, #1
 8001e54:	68e3      	ldr	r3, [r4, #12]
 8001e56:	9903      	ldr	r1, [sp, #12]
 8001e58:	1a5b      	subs	r3, r3, r1
 8001e5a:	42ab      	cmp	r3, r5
 8001e5c:	dcf2      	bgt.n	8001e44 <_printf_i+0x220>
 8001e5e:	e7eb      	b.n	8001e38 <_printf_i+0x214>
 8001e60:	2500      	movs	r5, #0
 8001e62:	f104 0619 	add.w	r6, r4, #25
 8001e66:	e7f5      	b.n	8001e54 <_printf_i+0x230>
 8001e68:	080021c9 	.word	0x080021c9
 8001e6c:	080021da 	.word	0x080021da

08001e70 <memchr>:
 8001e70:	4603      	mov	r3, r0
 8001e72:	b510      	push	{r4, lr}
 8001e74:	b2c9      	uxtb	r1, r1
 8001e76:	4402      	add	r2, r0
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	d101      	bne.n	8001e82 <memchr+0x12>
 8001e7e:	2000      	movs	r0, #0
 8001e80:	e003      	b.n	8001e8a <memchr+0x1a>
 8001e82:	7804      	ldrb	r4, [r0, #0]
 8001e84:	3301      	adds	r3, #1
 8001e86:	428c      	cmp	r4, r1
 8001e88:	d1f6      	bne.n	8001e78 <memchr+0x8>
 8001e8a:	bd10      	pop	{r4, pc}

08001e8c <memcpy>:
 8001e8c:	440a      	add	r2, r1
 8001e8e:	4291      	cmp	r1, r2
 8001e90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001e94:	d100      	bne.n	8001e98 <memcpy+0xc>
 8001e96:	4770      	bx	lr
 8001e98:	b510      	push	{r4, lr}
 8001e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e9e:	4291      	cmp	r1, r2
 8001ea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ea4:	d1f9      	bne.n	8001e9a <memcpy+0xe>
 8001ea6:	bd10      	pop	{r4, pc}

08001ea8 <memmove>:
 8001ea8:	4288      	cmp	r0, r1
 8001eaa:	b510      	push	{r4, lr}
 8001eac:	eb01 0402 	add.w	r4, r1, r2
 8001eb0:	d902      	bls.n	8001eb8 <memmove+0x10>
 8001eb2:	4284      	cmp	r4, r0
 8001eb4:	4623      	mov	r3, r4
 8001eb6:	d807      	bhi.n	8001ec8 <memmove+0x20>
 8001eb8:	1e43      	subs	r3, r0, #1
 8001eba:	42a1      	cmp	r1, r4
 8001ebc:	d008      	beq.n	8001ed0 <memmove+0x28>
 8001ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001ec6:	e7f8      	b.n	8001eba <memmove+0x12>
 8001ec8:	4601      	mov	r1, r0
 8001eca:	4402      	add	r2, r0
 8001ecc:	428a      	cmp	r2, r1
 8001ece:	d100      	bne.n	8001ed2 <memmove+0x2a>
 8001ed0:	bd10      	pop	{r4, pc}
 8001ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001ed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001eda:	e7f7      	b.n	8001ecc <memmove+0x24>

08001edc <_free_r>:
 8001edc:	b538      	push	{r3, r4, r5, lr}
 8001ede:	4605      	mov	r5, r0
 8001ee0:	2900      	cmp	r1, #0
 8001ee2:	d040      	beq.n	8001f66 <_free_r+0x8a>
 8001ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ee8:	1f0c      	subs	r4, r1, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bfb8      	it	lt
 8001eee:	18e4      	addlt	r4, r4, r3
 8001ef0:	f000 f910 	bl	8002114 <__malloc_lock>
 8001ef4:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <_free_r+0x8c>)
 8001ef6:	6813      	ldr	r3, [r2, #0]
 8001ef8:	b933      	cbnz	r3, 8001f08 <_free_r+0x2c>
 8001efa:	6063      	str	r3, [r4, #4]
 8001efc:	6014      	str	r4, [r2, #0]
 8001efe:	4628      	mov	r0, r5
 8001f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f04:	f000 b90c 	b.w	8002120 <__malloc_unlock>
 8001f08:	42a3      	cmp	r3, r4
 8001f0a:	d908      	bls.n	8001f1e <_free_r+0x42>
 8001f0c:	6820      	ldr	r0, [r4, #0]
 8001f0e:	1821      	adds	r1, r4, r0
 8001f10:	428b      	cmp	r3, r1
 8001f12:	bf01      	itttt	eq
 8001f14:	6819      	ldreq	r1, [r3, #0]
 8001f16:	685b      	ldreq	r3, [r3, #4]
 8001f18:	1809      	addeq	r1, r1, r0
 8001f1a:	6021      	streq	r1, [r4, #0]
 8001f1c:	e7ed      	b.n	8001efa <_free_r+0x1e>
 8001f1e:	461a      	mov	r2, r3
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	b10b      	cbz	r3, 8001f28 <_free_r+0x4c>
 8001f24:	42a3      	cmp	r3, r4
 8001f26:	d9fa      	bls.n	8001f1e <_free_r+0x42>
 8001f28:	6811      	ldr	r1, [r2, #0]
 8001f2a:	1850      	adds	r0, r2, r1
 8001f2c:	42a0      	cmp	r0, r4
 8001f2e:	d10b      	bne.n	8001f48 <_free_r+0x6c>
 8001f30:	6820      	ldr	r0, [r4, #0]
 8001f32:	4401      	add	r1, r0
 8001f34:	1850      	adds	r0, r2, r1
 8001f36:	4283      	cmp	r3, r0
 8001f38:	6011      	str	r1, [r2, #0]
 8001f3a:	d1e0      	bne.n	8001efe <_free_r+0x22>
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4401      	add	r1, r0
 8001f42:	6011      	str	r1, [r2, #0]
 8001f44:	6053      	str	r3, [r2, #4]
 8001f46:	e7da      	b.n	8001efe <_free_r+0x22>
 8001f48:	d902      	bls.n	8001f50 <_free_r+0x74>
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	602b      	str	r3, [r5, #0]
 8001f4e:	e7d6      	b.n	8001efe <_free_r+0x22>
 8001f50:	6820      	ldr	r0, [r4, #0]
 8001f52:	1821      	adds	r1, r4, r0
 8001f54:	428b      	cmp	r3, r1
 8001f56:	bf01      	itttt	eq
 8001f58:	6819      	ldreq	r1, [r3, #0]
 8001f5a:	685b      	ldreq	r3, [r3, #4]
 8001f5c:	1809      	addeq	r1, r1, r0
 8001f5e:	6021      	streq	r1, [r4, #0]
 8001f60:	6063      	str	r3, [r4, #4]
 8001f62:	6054      	str	r4, [r2, #4]
 8001f64:	e7cb      	b.n	8001efe <_free_r+0x22>
 8001f66:	bd38      	pop	{r3, r4, r5, pc}
 8001f68:	200000d8 	.word	0x200000d8

08001f6c <sbrk_aligned>:
 8001f6c:	b570      	push	{r4, r5, r6, lr}
 8001f6e:	4e0e      	ldr	r6, [pc, #56]	; (8001fa8 <sbrk_aligned+0x3c>)
 8001f70:	460c      	mov	r4, r1
 8001f72:	6831      	ldr	r1, [r6, #0]
 8001f74:	4605      	mov	r5, r0
 8001f76:	b911      	cbnz	r1, 8001f7e <sbrk_aligned+0x12>
 8001f78:	f000 f8bc 	bl	80020f4 <_sbrk_r>
 8001f7c:	6030      	str	r0, [r6, #0]
 8001f7e:	4621      	mov	r1, r4
 8001f80:	4628      	mov	r0, r5
 8001f82:	f000 f8b7 	bl	80020f4 <_sbrk_r>
 8001f86:	1c43      	adds	r3, r0, #1
 8001f88:	d00a      	beq.n	8001fa0 <sbrk_aligned+0x34>
 8001f8a:	1cc4      	adds	r4, r0, #3
 8001f8c:	f024 0403 	bic.w	r4, r4, #3
 8001f90:	42a0      	cmp	r0, r4
 8001f92:	d007      	beq.n	8001fa4 <sbrk_aligned+0x38>
 8001f94:	1a21      	subs	r1, r4, r0
 8001f96:	4628      	mov	r0, r5
 8001f98:	f000 f8ac 	bl	80020f4 <_sbrk_r>
 8001f9c:	3001      	adds	r0, #1
 8001f9e:	d101      	bne.n	8001fa4 <sbrk_aligned+0x38>
 8001fa0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
 8001fa8:	200000dc 	.word	0x200000dc

08001fac <_malloc_r>:
 8001fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb0:	1ccd      	adds	r5, r1, #3
 8001fb2:	f025 0503 	bic.w	r5, r5, #3
 8001fb6:	3508      	adds	r5, #8
 8001fb8:	2d0c      	cmp	r5, #12
 8001fba:	bf38      	it	cc
 8001fbc:	250c      	movcc	r5, #12
 8001fbe:	2d00      	cmp	r5, #0
 8001fc0:	4607      	mov	r7, r0
 8001fc2:	db01      	blt.n	8001fc8 <_malloc_r+0x1c>
 8001fc4:	42a9      	cmp	r1, r5
 8001fc6:	d905      	bls.n	8001fd4 <_malloc_r+0x28>
 8001fc8:	230c      	movs	r3, #12
 8001fca:	2600      	movs	r6, #0
 8001fcc:	603b      	str	r3, [r7, #0]
 8001fce:	4630      	mov	r0, r6
 8001fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fd4:	4e2e      	ldr	r6, [pc, #184]	; (8002090 <_malloc_r+0xe4>)
 8001fd6:	f000 f89d 	bl	8002114 <__malloc_lock>
 8001fda:	6833      	ldr	r3, [r6, #0]
 8001fdc:	461c      	mov	r4, r3
 8001fde:	bb34      	cbnz	r4, 800202e <_malloc_r+0x82>
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	4638      	mov	r0, r7
 8001fe4:	f7ff ffc2 	bl	8001f6c <sbrk_aligned>
 8001fe8:	1c43      	adds	r3, r0, #1
 8001fea:	4604      	mov	r4, r0
 8001fec:	d14d      	bne.n	800208a <_malloc_r+0xde>
 8001fee:	6834      	ldr	r4, [r6, #0]
 8001ff0:	4626      	mov	r6, r4
 8001ff2:	2e00      	cmp	r6, #0
 8001ff4:	d140      	bne.n	8002078 <_malloc_r+0xcc>
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	4631      	mov	r1, r6
 8001ffa:	4638      	mov	r0, r7
 8001ffc:	eb04 0803 	add.w	r8, r4, r3
 8002000:	f000 f878 	bl	80020f4 <_sbrk_r>
 8002004:	4580      	cmp	r8, r0
 8002006:	d13a      	bne.n	800207e <_malloc_r+0xd2>
 8002008:	6821      	ldr	r1, [r4, #0]
 800200a:	3503      	adds	r5, #3
 800200c:	1a6d      	subs	r5, r5, r1
 800200e:	f025 0503 	bic.w	r5, r5, #3
 8002012:	3508      	adds	r5, #8
 8002014:	2d0c      	cmp	r5, #12
 8002016:	bf38      	it	cc
 8002018:	250c      	movcc	r5, #12
 800201a:	4638      	mov	r0, r7
 800201c:	4629      	mov	r1, r5
 800201e:	f7ff ffa5 	bl	8001f6c <sbrk_aligned>
 8002022:	3001      	adds	r0, #1
 8002024:	d02b      	beq.n	800207e <_malloc_r+0xd2>
 8002026:	6823      	ldr	r3, [r4, #0]
 8002028:	442b      	add	r3, r5
 800202a:	6023      	str	r3, [r4, #0]
 800202c:	e00e      	b.n	800204c <_malloc_r+0xa0>
 800202e:	6822      	ldr	r2, [r4, #0]
 8002030:	1b52      	subs	r2, r2, r5
 8002032:	d41e      	bmi.n	8002072 <_malloc_r+0xc6>
 8002034:	2a0b      	cmp	r2, #11
 8002036:	d916      	bls.n	8002066 <_malloc_r+0xba>
 8002038:	1961      	adds	r1, r4, r5
 800203a:	42a3      	cmp	r3, r4
 800203c:	6025      	str	r5, [r4, #0]
 800203e:	bf18      	it	ne
 8002040:	6059      	strne	r1, [r3, #4]
 8002042:	6863      	ldr	r3, [r4, #4]
 8002044:	bf08      	it	eq
 8002046:	6031      	streq	r1, [r6, #0]
 8002048:	5162      	str	r2, [r4, r5]
 800204a:	604b      	str	r3, [r1, #4]
 800204c:	4638      	mov	r0, r7
 800204e:	f104 060b 	add.w	r6, r4, #11
 8002052:	f000 f865 	bl	8002120 <__malloc_unlock>
 8002056:	f026 0607 	bic.w	r6, r6, #7
 800205a:	1d23      	adds	r3, r4, #4
 800205c:	1af2      	subs	r2, r6, r3
 800205e:	d0b6      	beq.n	8001fce <_malloc_r+0x22>
 8002060:	1b9b      	subs	r3, r3, r6
 8002062:	50a3      	str	r3, [r4, r2]
 8002064:	e7b3      	b.n	8001fce <_malloc_r+0x22>
 8002066:	6862      	ldr	r2, [r4, #4]
 8002068:	42a3      	cmp	r3, r4
 800206a:	bf0c      	ite	eq
 800206c:	6032      	streq	r2, [r6, #0]
 800206e:	605a      	strne	r2, [r3, #4]
 8002070:	e7ec      	b.n	800204c <_malloc_r+0xa0>
 8002072:	4623      	mov	r3, r4
 8002074:	6864      	ldr	r4, [r4, #4]
 8002076:	e7b2      	b.n	8001fde <_malloc_r+0x32>
 8002078:	4634      	mov	r4, r6
 800207a:	6876      	ldr	r6, [r6, #4]
 800207c:	e7b9      	b.n	8001ff2 <_malloc_r+0x46>
 800207e:	230c      	movs	r3, #12
 8002080:	4638      	mov	r0, r7
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	f000 f84c 	bl	8002120 <__malloc_unlock>
 8002088:	e7a1      	b.n	8001fce <_malloc_r+0x22>
 800208a:	6025      	str	r5, [r4, #0]
 800208c:	e7de      	b.n	800204c <_malloc_r+0xa0>
 800208e:	bf00      	nop
 8002090:	200000d8 	.word	0x200000d8

08002094 <_realloc_r>:
 8002094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002098:	4680      	mov	r8, r0
 800209a:	4614      	mov	r4, r2
 800209c:	460e      	mov	r6, r1
 800209e:	b921      	cbnz	r1, 80020aa <_realloc_r+0x16>
 80020a0:	4611      	mov	r1, r2
 80020a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020a6:	f7ff bf81 	b.w	8001fac <_malloc_r>
 80020aa:	b92a      	cbnz	r2, 80020b8 <_realloc_r+0x24>
 80020ac:	f7ff ff16 	bl	8001edc <_free_r>
 80020b0:	4625      	mov	r5, r4
 80020b2:	4628      	mov	r0, r5
 80020b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020b8:	f000 f838 	bl	800212c <_malloc_usable_size_r>
 80020bc:	4284      	cmp	r4, r0
 80020be:	4607      	mov	r7, r0
 80020c0:	d802      	bhi.n	80020c8 <_realloc_r+0x34>
 80020c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80020c6:	d812      	bhi.n	80020ee <_realloc_r+0x5a>
 80020c8:	4621      	mov	r1, r4
 80020ca:	4640      	mov	r0, r8
 80020cc:	f7ff ff6e 	bl	8001fac <_malloc_r>
 80020d0:	4605      	mov	r5, r0
 80020d2:	2800      	cmp	r0, #0
 80020d4:	d0ed      	beq.n	80020b2 <_realloc_r+0x1e>
 80020d6:	42bc      	cmp	r4, r7
 80020d8:	4622      	mov	r2, r4
 80020da:	4631      	mov	r1, r6
 80020dc:	bf28      	it	cs
 80020de:	463a      	movcs	r2, r7
 80020e0:	f7ff fed4 	bl	8001e8c <memcpy>
 80020e4:	4631      	mov	r1, r6
 80020e6:	4640      	mov	r0, r8
 80020e8:	f7ff fef8 	bl	8001edc <_free_r>
 80020ec:	e7e1      	b.n	80020b2 <_realloc_r+0x1e>
 80020ee:	4635      	mov	r5, r6
 80020f0:	e7df      	b.n	80020b2 <_realloc_r+0x1e>
	...

080020f4 <_sbrk_r>:
 80020f4:	b538      	push	{r3, r4, r5, lr}
 80020f6:	2300      	movs	r3, #0
 80020f8:	4d05      	ldr	r5, [pc, #20]	; (8002110 <_sbrk_r+0x1c>)
 80020fa:	4604      	mov	r4, r0
 80020fc:	4608      	mov	r0, r1
 80020fe:	602b      	str	r3, [r5, #0]
 8002100:	f7fe f9d2 	bl	80004a8 <_sbrk>
 8002104:	1c43      	adds	r3, r0, #1
 8002106:	d102      	bne.n	800210e <_sbrk_r+0x1a>
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	b103      	cbz	r3, 800210e <_sbrk_r+0x1a>
 800210c:	6023      	str	r3, [r4, #0]
 800210e:	bd38      	pop	{r3, r4, r5, pc}
 8002110:	200000e0 	.word	0x200000e0

08002114 <__malloc_lock>:
 8002114:	4801      	ldr	r0, [pc, #4]	; (800211c <__malloc_lock+0x8>)
 8002116:	f000 b811 	b.w	800213c <__retarget_lock_acquire_recursive>
 800211a:	bf00      	nop
 800211c:	200000e4 	.word	0x200000e4

08002120 <__malloc_unlock>:
 8002120:	4801      	ldr	r0, [pc, #4]	; (8002128 <__malloc_unlock+0x8>)
 8002122:	f000 b80c 	b.w	800213e <__retarget_lock_release_recursive>
 8002126:	bf00      	nop
 8002128:	200000e4 	.word	0x200000e4

0800212c <_malloc_usable_size_r>:
 800212c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002130:	1f18      	subs	r0, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	bfbc      	itt	lt
 8002136:	580b      	ldrlt	r3, [r1, r0]
 8002138:	18c0      	addlt	r0, r0, r3
 800213a:	4770      	bx	lr

0800213c <__retarget_lock_acquire_recursive>:
 800213c:	4770      	bx	lr

0800213e <__retarget_lock_release_recursive>:
 800213e:	4770      	bx	lr

08002140 <_init>:
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	bf00      	nop
 8002144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002146:	bc08      	pop	{r3}
 8002148:	469e      	mov	lr, r3
 800214a:	4770      	bx	lr

0800214c <_fini>:
 800214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214e:	bf00      	nop
 8002150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002152:	bc08      	pop	{r3}
 8002154:	469e      	mov	lr, r3
 8002156:	4770      	bx	lr
