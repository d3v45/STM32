
flag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001944  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08001a50  08001a50  00011a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b84  08001b84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b84  08001b84  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b84  08001b84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b84  08001b84  00011b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b88  08001b88  00011b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08001b98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001b98  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c1e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001195  00000000  00000000  00024c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  00025de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000588  00000000  00000000  000263d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a00  00000000  00000000  00026960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000061e6  00000000  00000000  0003d360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d9f  00000000  00000000  00043546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c52e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016ec  00000000  00000000  000c5338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a38 	.word	0x08001a38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001a38 	.word	0x08001a38

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <lab3_uart>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lab3_uart(){
 8000160:	b580      	push	{r7, lr}
 8000162:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000166:	af00      	add	r7, sp, #0
	uint8_t flag[100] = "bi0s";
 8000168:	4ab2      	ldr	r2, [pc, #712]	; (8000434 <lab3_uart+0x2d4>)
 800016a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800016e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000172:	6018      	str	r0, [r3, #0]
 8000174:	3304      	adds	r3, #4
 8000176:	7019      	strb	r1, [r3, #0]
 8000178:	f207 139d 	addw	r3, r7, #413	; 0x19d
 800017c:	225f      	movs	r2, #95	; 0x5f
 800017e:	2100      	movs	r1, #0
 8000180:	4618      	mov	r0, r3
 8000182:	f001 fc51 	bl	8001a28 <memset>
	  uint8_t ans[100]= "";
 8000186:	2300      	movs	r3, #0
 8000188:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800018c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000190:	2260      	movs	r2, #96	; 0x60
 8000192:	2100      	movs	r1, #0
 8000194:	4618      	mov	r0, r3
 8000196:	f001 fc47 	bl	8001a28 <memset>
	  uint8_t received_char;
    uint8_t exit[100]="x";
 800019a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800019e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80001a2:	2278      	movs	r2, #120	; 0x78
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	3304      	adds	r3, #4
 80001a8:	2260      	movs	r2, #96	; 0x60
 80001aa:	2100      	movs	r1, #0
 80001ac:	4618      	mov	r0, r3
 80001ae:	f001 fc3b 	bl	8001a28 <memset>
    uint8_t restart[100]="r";
 80001b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80001b6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80001ba:	2272      	movs	r2, #114	; 0x72
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	3304      	adds	r3, #4
 80001c0:	2260      	movs	r2, #96	; 0x60
 80001c2:	2100      	movs	r1, #0
 80001c4:	4618      	mov	r0, r3
 80001c6:	f001 fc2f 	bl	8001a28 <memset>
    uint8_t input[100]="";
 80001ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80001ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	3304      	adds	r3, #4
 80001d8:	2260      	movs	r2, #96	; 0x60
 80001da:	2100      	movs	r1, #0
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fc23 	bl	8001a28 <memset>
    uint8_t input2;

    while (1) {
    		HAL_UART_Transmit(&huart1, (char *)"Enter the flag: ", strlen("Enter the flag: "), HAL_MAX_DELAY);
 80001e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001e6:	2210      	movs	r2, #16
 80001e8:	4993      	ldr	r1, [pc, #588]	; (8000438 <lab3_uart+0x2d8>)
 80001ea:	4894      	ldr	r0, [pc, #592]	; (800043c <lab3_uart+0x2dc>)
 80001ec:	f001 f9eb 	bl	80015c6 <HAL_UART_Transmit>

    		int i = 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    		do {
    			HAL_UART_Receive(&huart1, (uint8_t *) &received_char, 1, HAL_MAX_DELAY);
 80001f6:	f207 1133 	addw	r1, r7, #307	; 0x133
 80001fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001fe:	2201      	movs	r2, #1
 8000200:	488e      	ldr	r0, [pc, #568]	; (800043c <lab3_uart+0x2dc>)
 8000202:	f001 fa72 	bl	80016ea <HAL_UART_Receive>
    			if (received_char != '\n') {
 8000206:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800020a:	2b0a      	cmp	r3, #10
 800020c:	d00d      	beq.n	800022a <lab3_uart+0xca>
    				ans[i] = received_char;
 800020e:	f897 1133 	ldrb.w	r1, [r7, #307]	; 0x133
 8000212:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8000216:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800021a:	4413      	add	r3, r2
 800021c:	460a      	mov	r2, r1
 800021e:	701a      	strb	r2, [r3, #0]
    				i++;
 8000220:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000224:	3301      	adds	r3, #1
 8000226:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    			}
    		} while (received_char != '\n' && i < 100	);
 800022a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800022e:	2b0a      	cmp	r3, #10
 8000230:	d003      	beq.n	800023a <lab3_uart+0xda>
 8000232:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000236:	2b63      	cmp	r3, #99	; 0x63
 8000238:	dddd      	ble.n	80001f6 <lab3_uart+0x96>
    		ans[i] = '\0';
 800023a:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800023e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000242:	4413      	add	r3, r2
 8000244:	2200      	movs	r2, #0
 8000246:	701a      	strb	r2, [r3, #0]

    		if (strcmp(flag,ans) == 0) {
 8000248:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800024c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000250:	4611      	mov	r1, r2
 8000252:	4618      	mov	r0, r3
 8000254:	f7ff ff7a 	bl	800014c <strcmp>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d176      	bne.n	800034c <lab3_uart+0x1ec>
    			HAL_UART_Transmit(&huart1, (uint8_t *)"Yes, you found the flag\n", 25, HAL_MAX_DELAY);
 800025e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000262:	2219      	movs	r2, #25
 8000264:	4976      	ldr	r1, [pc, #472]	; (8000440 <lab3_uart+0x2e0>)
 8000266:	4875      	ldr	r0, [pc, #468]	; (800043c <lab3_uart+0x2dc>)
 8000268:	f001 f9ad 	bl	80015c6 <HAL_UART_Transmit>
    			HAL_Delay(2000);
 800026c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000270:	f000 fab6 	bl	80007e0 <HAL_Delay>

    			while (1) {
    				HAL_UART_Transmit(&huart1, (char *)"Enter 'x' to quit or 'r' to restart\n",38 , HAL_MAX_DELAY);
 8000274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000278:	2226      	movs	r2, #38	; 0x26
 800027a:	4972      	ldr	r1, [pc, #456]	; (8000444 <lab3_uart+0x2e4>)
 800027c:	486f      	ldr	r0, [pc, #444]	; (800043c <lab3_uart+0x2dc>)
 800027e:	f001 f9a2 	bl	80015c6 <HAL_UART_Transmit>
    				int i = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    				do {
    					HAL_UART_Receive(&huart1, (uint8_t *) &input2, 1, HAL_MAX_DELAY);
 8000288:	1cf9      	adds	r1, r7, #3
 800028a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800028e:	2201      	movs	r2, #1
 8000290:	486a      	ldr	r0, [pc, #424]	; (800043c <lab3_uart+0x2dc>)
 8000292:	f001 fa2a 	bl	80016ea <HAL_UART_Receive>
    					if (input2 != '\n') {
 8000296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800029a:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b0a      	cmp	r3, #10
 80002a2:	d012      	beq.n	80002ca <lab3_uart+0x16a>
    						input[i] = input2;
 80002a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80002a8:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 80002ac:	7819      	ldrb	r1, [r3, #0]
 80002ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80002b2:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80002b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80002ba:	4413      	add	r3, r2
 80002bc:	460a      	mov	r2, r1
 80002be:	701a      	strb	r2, [r3, #0]
    						i++;
 80002c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80002c4:	3301      	adds	r3, #1
 80002c6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    					}
    				} while (input2 != '\n' && i < 100	);
 80002ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80002ce:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b0a      	cmp	r3, #10
 80002d6:	d003      	beq.n	80002e0 <lab3_uart+0x180>
 80002d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80002dc:	2b63      	cmp	r3, #99	; 0x63
 80002de:	ddd3      	ble.n	8000288 <lab3_uart+0x128>
    				input[i] = '\0';
 80002e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80002e4:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80002e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80002ec:	4413      	add	r3, r2
 80002ee:	2200      	movs	r2, #0
 80002f0:	701a      	strb	r2, [r3, #0]

    				if (strcmp(input,exit)==0) {
 80002f2:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4611      	mov	r1, r2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f7ff ff26 	bl	800014c <strcmp>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d108      	bne.n	8000318 <lab3_uart+0x1b8>
    					HAL_UART_Transmit(&huart1, "Exiting...\n", 12, 1000);
 8000306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030a:	220c      	movs	r2, #12
 800030c:	494e      	ldr	r1, [pc, #312]	; (8000448 <lab3_uart+0x2e8>)
 800030e:	484b      	ldr	r0, [pc, #300]	; (800043c <lab3_uart+0x2dc>)
 8000310:	f001 f959 	bl	80015c6 <HAL_UART_Transmit>
    					__BKPT(0);
 8000314:	be00      	bkpt	0x0000
 8000316:	e7ad      	b.n	8000274 <lab3_uart+0x114>
    				}
    				else if (strcmp(input,restart)==0) {
 8000318:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	4611      	mov	r1, r2
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff13 	bl	800014c <strcmp>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d107      	bne.n	800033c <lab3_uart+0x1dc>
    					HAL_UART_Transmit(&huart1,"Restarting...\n", 15, 1000);
 800032c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000330:	220f      	movs	r2, #15
 8000332:	4946      	ldr	r1, [pc, #280]	; (800044c <lab3_uart+0x2ec>)
 8000334:	4841      	ldr	r0, [pc, #260]	; (800043c <lab3_uart+0x2dc>)
 8000336:	f001 f946 	bl	80015c6 <HAL_UART_Transmit>
    					break; // Exit the inner loop to restart
 800033a:	e07a      	b.n	8000432 <lab3_uart+0x2d2>
    				}
    				else {
    					HAL_UART_Transmit(&huart1, "Invalid input, please try again.\n", 34, 1000);
 800033c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000340:	2222      	movs	r2, #34	; 0x22
 8000342:	4943      	ldr	r1, [pc, #268]	; (8000450 <lab3_uart+0x2f0>)
 8000344:	483d      	ldr	r0, [pc, #244]	; (800043c <lab3_uart+0x2dc>)
 8000346:	f001 f93e 	bl	80015c6 <HAL_UART_Transmit>
    			while (1) {
 800034a:	e793      	b.n	8000274 <lab3_uart+0x114>
    				}
    			}
    		} else {
    			HAL_UART_Transmit(&huart1, (uint8_t *)"Incorrect flag\n", 15, HAL_MAX_DELAY);
 800034c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000350:	220f      	movs	r2, #15
 8000352:	4940      	ldr	r1, [pc, #256]	; (8000454 <lab3_uart+0x2f4>)
 8000354:	4839      	ldr	r0, [pc, #228]	; (800043c <lab3_uart+0x2dc>)
 8000356:	f001 f936 	bl	80015c6 <HAL_UART_Transmit>

    			while (1) {
    				HAL_UART_Transmit(&huart1, (char *)"Enter 'x' to quit or 'r' to restart\n",38 , HAL_MAX_DELAY);
 800035a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800035e:	2226      	movs	r2, #38	; 0x26
 8000360:	4938      	ldr	r1, [pc, #224]	; (8000444 <lab3_uart+0x2e4>)
 8000362:	4836      	ldr	r0, [pc, #216]	; (800043c <lab3_uart+0x2dc>)
 8000364:	f001 f92f 	bl	80015c6 <HAL_UART_Transmit>
    				int i = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    				do {
    					HAL_UART_Receive(&huart1, (uint8_t *) &input2, 1, HAL_MAX_DELAY);
 800036e:	1cf9      	adds	r1, r7, #3
 8000370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000374:	2201      	movs	r2, #1
 8000376:	4831      	ldr	r0, [pc, #196]	; (800043c <lab3_uart+0x2dc>)
 8000378:	f001 f9b7 	bl	80016ea <HAL_UART_Receive>
    					if (input2 != '\n') {
 800037c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000380:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b0a      	cmp	r3, #10
 8000388:	d012      	beq.n	80003b0 <lab3_uart+0x250>
    						input[i] = input2;
 800038a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800038e:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8000392:	7819      	ldrb	r1, [r3, #0]
 8000394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000398:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 800039c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80003a0:	4413      	add	r3, r2
 80003a2:	460a      	mov	r2, r1
 80003a4:	701a      	strb	r2, [r3, #0]
    						i++;
 80003a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80003aa:	3301      	adds	r3, #1
 80003ac:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    					}
    				} while (input2 != '\n' && i < 100	);
 80003b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80003b4:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b0a      	cmp	r3, #10
 80003bc:	d003      	beq.n	80003c6 <lab3_uart+0x266>
 80003be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80003c2:	2b63      	cmp	r3, #99	; 0x63
 80003c4:	ddd3      	ble.n	800036e <lab3_uart+0x20e>
    				input[i] = '\0';
 80003c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80003ca:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80003ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80003d2:	4413      	add	r3, r2
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]

    				if (strcmp(input,exit)==0) {
 80003d8:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	4611      	mov	r1, r2
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff feb3 	bl	800014c <strcmp>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d108      	bne.n	80003fe <lab3_uart+0x29e>
    					HAL_UART_Transmit(&huart1, "Exiting...\n", 12, 2000);
 80003ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003f0:	220c      	movs	r2, #12
 80003f2:	4915      	ldr	r1, [pc, #84]	; (8000448 <lab3_uart+0x2e8>)
 80003f4:	4811      	ldr	r0, [pc, #68]	; (800043c <lab3_uart+0x2dc>)
 80003f6:	f001 f8e6 	bl	80015c6 <HAL_UART_Transmit>
    					__BKPT(0);
 80003fa:	be00      	bkpt	0x0000
 80003fc:	e7ad      	b.n	800035a <lab3_uart+0x1fa>
    				}
    				else if (strcmp(input,restart)==0) {
 80003fe:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4611      	mov	r1, r2
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff fea0 	bl	800014c <strcmp>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d107      	bne.n	8000422 <lab3_uart+0x2c2>
    					HAL_UART_Transmit(&huart1,"Restarting...\n", 15, 1000);
 8000412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000416:	220f      	movs	r2, #15
 8000418:	490c      	ldr	r1, [pc, #48]	; (800044c <lab3_uart+0x2ec>)
 800041a:	4808      	ldr	r0, [pc, #32]	; (800043c <lab3_uart+0x2dc>)
 800041c:	f001 f8d3 	bl	80015c6 <HAL_UART_Transmit>
    					break; // Exit the inner loop to
 8000420:	e007      	b.n	8000432 <lab3_uart+0x2d2>

	      	     }else{
	      	    	 HAL_UART_Transmit(&huart1, "Invalid input, please try again.\n", 34, 1000);
 8000422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000426:	2222      	movs	r2, #34	; 0x22
 8000428:	4909      	ldr	r1, [pc, #36]	; (8000450 <lab3_uart+0x2f0>)
 800042a:	4804      	ldr	r0, [pc, #16]	; (800043c <lab3_uart+0x2dc>)
 800042c:	f001 f8cb 	bl	80015c6 <HAL_UART_Transmit>
    			while (1) {
 8000430:	e793      	b.n	800035a <lab3_uart+0x1fa>
    while (1) {
 8000432:	e6d6      	b.n	80001e2 <lab3_uart+0x82>
 8000434:	08001af8 	.word	0x08001af8
 8000438:	08001a50 	.word	0x08001a50
 800043c:	20000028 	.word	0x20000028
 8000440:	08001a64 	.word	0x08001a64
 8000444:	08001a80 	.word	0x08001a80
 8000448:	08001aa8 	.word	0x08001aa8
 800044c:	08001ab4 	.word	0x08001ab4
 8000450:	08001ac4 	.word	0x08001ac4
 8000454:	08001ae8 	.word	0x08001ae8

08000458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045c:	f000 f95e 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000460:	f000 f807 	bl	8000472 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000464:	f000 f86c 	bl	8000540 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000468:	f000 f83e 	bl	80004e8 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lab3_uart();
 800046c:	f7ff fe78 	bl	8000160 <lab3_uart>
 8000470:	e7fc      	b.n	800046c <main+0x14>

08000472 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b090      	sub	sp, #64	; 0x40
 8000476:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000478:	f107 0318 	add.w	r3, r7, #24
 800047c:	2228      	movs	r2, #40	; 0x28
 800047e:	2100      	movs	r1, #0
 8000480:	4618      	mov	r0, r3
 8000482:	f001 fad1 	bl	8001a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
 8000492:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000494:	2302      	movs	r3, #2
 8000496:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000498:	2301      	movs	r3, #1
 800049a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049c:	2310      	movs	r3, #16
 800049e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a4:	f107 0318 	add.w	r3, r7, #24
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 fc25 	bl	8000cf8 <HAL_RCC_OscConfig>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004b4:	f000 f85a 	bl	800056c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b8:	230f      	movs	r3, #15
 80004ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004bc:	2300      	movs	r3, #0
 80004be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2100      	movs	r1, #0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 fe93 	bl	80011fc <HAL_RCC_ClockConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004dc:	f000 f846 	bl	800056c <Error_Handler>
  }
}
 80004e0:	bf00      	nop
 80004e2:	3740      	adds	r7, #64	; 0x40
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <MX_USART1_UART_Init+0x50>)
 80004ee:	4a13      	ldr	r2, [pc, #76]	; (800053c <MX_USART1_UART_Init+0x54>)
 80004f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_USART1_UART_Init+0x50>)
 80004f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_USART1_UART_Init+0x50>)
 80004fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000500:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000502:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <MX_USART1_UART_Init+0x50>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <MX_USART1_UART_Init+0x50>)
 800050a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800050e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_USART1_UART_Init+0x50>)
 8000512:	220c      	movs	r2, #12
 8000514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <MX_USART1_UART_Init+0x50>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_USART1_UART_Init+0x50>)
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_USART1_UART_Init+0x50>)
 8000524:	f001 f802 	bl	800152c <HAL_UART_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800052e:	f000 f81d 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028
 800053c:	40013800 	.word	0x40013800

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_GPIO_Init+0x28>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a07      	ldr	r2, [pc, #28]	; (8000568 <MX_GPIO_Init+0x28>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <MX_GPIO_Init+0x28>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	40021000 	.word	0x40021000

0800056c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000574:	e7fe      	b.n	8000574 <Error_Handler+0x8>
	...

08000578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <HAL_MspInit+0x5c>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <HAL_MspInit+0x5c>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6193      	str	r3, [r2, #24]
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <HAL_MspInit+0x5c>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <HAL_MspInit+0x5c>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <HAL_MspInit+0x5c>)
 800059c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_MspInit+0x5c>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <HAL_MspInit+0x60>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_MspInit+0x60>)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010000 	.word	0x40010000

080005dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <HAL_UART_MspInit+0x8c>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d131      	bne.n	8000660 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <HAL_UART_MspInit+0x90>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a1a      	ldr	r2, [pc, #104]	; (800066c <HAL_UART_MspInit+0x90>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <HAL_UART_MspInit+0x90>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_UART_MspInit+0x90>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a14      	ldr	r2, [pc, #80]	; (800066c <HAL_UART_MspInit+0x90>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_UART_MspInit+0x90>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800062c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	2302      	movs	r3, #2
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000636:	2303      	movs	r3, #3
 8000638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	4619      	mov	r1, r3
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <HAL_UART_MspInit+0x94>)
 8000642:	f000 f9d5 	bl	80009f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	4619      	mov	r1, r3
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <HAL_UART_MspInit+0x94>)
 800065c:	f000 f9c8 	bl	80009f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000660:	bf00      	nop
 8000662:	3720      	adds	r7, #32
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40013800 	.word	0x40013800
 800066c:	40021000 	.word	0x40021000
 8000670:	40010800 	.word	0x40010800

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <NMI_Handler+0x4>

0800067a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <MemManage_Handler+0x4>

08000686 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <BusFault_Handler+0x4>

0800068c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <UsageFault_Handler+0x4>

08000692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr

080006aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ba:	f000 f875 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
	...

080006d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006d2:	490d      	ldr	r1, [pc, #52]	; (8000708 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006e8:	4c0a      	ldr	r4, [pc, #40]	; (8000714 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f6:	f7ff ffe4 	bl	80006c2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006fa:	f001 f971 	bl	80019e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff feab 	bl	8000458 <main>
  bx lr
 8000702:	4770      	bx	lr
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800070c:	08001b8c 	.word	0x08001b8c
  ldr r2, =_sbss
 8000710:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000714:	20000070 	.word	0x20000070

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_Init+0x28>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f92b 	bl	8000988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	200f      	movs	r0, #15
 8000734:	f000 f808 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff ff1e 	bl	8000578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x54>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f935 	bl	80009d6 <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d80a      	bhi.n	8000792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000784:	f000 f90b 	bl	800099e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <HAL_InitTick+0x5c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_IncTick+0x20>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a03      	ldr	r2, [pc, #12]	; (80007c8 <HAL_IncTick+0x20>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	20000008 	.word	0x20000008
 80007c8:	2000006c 	.word	0x2000006c

080007cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b02      	ldr	r3, [pc, #8]	; (80007dc <HAL_GetTick+0x10>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	2000006c 	.word	0x2000006c

080007e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e8:	f7ff fff0 	bl	80007cc <HAL_GetTick>
 80007ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007f8:	d005      	beq.n	8000806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <HAL_Delay+0x44>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000806:	bf00      	nop
 8000808:	f7ff ffe0 	bl	80007cc <HAL_GetTick>
 800080c:	4602      	mov	r2, r0
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	429a      	cmp	r2, r3
 8000816:	d8f7      	bhi.n	8000808 <HAL_Delay+0x28>
  {
  }
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000008 	.word	0x20000008

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db0a      	blt.n	80008b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	490c      	ldr	r1, [pc, #48]	; (80008d8 <__NVIC_SetPriority+0x4c>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b4:	e00a      	b.n	80008cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4908      	ldr	r1, [pc, #32]	; (80008dc <__NVIC_SetPriority+0x50>)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	3b04      	subs	r3, #4
 80008c4:	0112      	lsls	r2, r2, #4
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	440b      	add	r3, r1
 80008ca:	761a      	strb	r2, [r3, #24]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000e100 	.word	0xe000e100
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b089      	sub	sp, #36	; 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f1c3 0307 	rsb	r3, r3, #7
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	bf28      	it	cs
 80008fe:	2304      	movcs	r3, #4
 8000900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3304      	adds	r3, #4
 8000906:	2b06      	cmp	r3, #6
 8000908:	d902      	bls.n	8000910 <NVIC_EncodePriority+0x30>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3b03      	subs	r3, #3
 800090e:	e000      	b.n	8000912 <NVIC_EncodePriority+0x32>
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43da      	mvns	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43d9      	mvns	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	4313      	orrs	r3, r2
         );
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000954:	d301      	bcc.n	800095a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000956:	2301      	movs	r3, #1
 8000958:	e00f      	b.n	800097a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <SysTick_Config+0x40>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000962:	210f      	movs	r1, #15
 8000964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000968:	f7ff ff90 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <SysTick_Config+0x40>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <SysTick_Config+0x40>)
 8000974:	2207      	movs	r2, #7
 8000976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	e000e010 	.word	0xe000e010

08000988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff49 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b0:	f7ff ff5e 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	6978      	ldr	r0, [r7, #20]
 80009bc:	f7ff ff90 	bl	80008e0 <NVIC_EncodePriority>
 80009c0:	4602      	mov	r2, r0
 80009c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff5f 	bl	800088c <__NVIC_SetPriority>
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ffb0 	bl	8000944 <SysTick_Config>
 80009e4:	4603      	mov	r3, r0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b08b      	sub	sp, #44	; 0x2c
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a02:	e169      	b.n	8000cd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a04:	2201      	movs	r2, #1
 8000a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	4013      	ands	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	f040 8158 	bne.w	8000cd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	4a9a      	ldr	r2, [pc, #616]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d05e      	beq.n	8000aea <HAL_GPIO_Init+0xfa>
 8000a2c:	4a98      	ldr	r2, [pc, #608]	; (8000c90 <HAL_GPIO_Init+0x2a0>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d875      	bhi.n	8000b1e <HAL_GPIO_Init+0x12e>
 8000a32:	4a98      	ldr	r2, [pc, #608]	; (8000c94 <HAL_GPIO_Init+0x2a4>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d058      	beq.n	8000aea <HAL_GPIO_Init+0xfa>
 8000a38:	4a96      	ldr	r2, [pc, #600]	; (8000c94 <HAL_GPIO_Init+0x2a4>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d86f      	bhi.n	8000b1e <HAL_GPIO_Init+0x12e>
 8000a3e:	4a96      	ldr	r2, [pc, #600]	; (8000c98 <HAL_GPIO_Init+0x2a8>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d052      	beq.n	8000aea <HAL_GPIO_Init+0xfa>
 8000a44:	4a94      	ldr	r2, [pc, #592]	; (8000c98 <HAL_GPIO_Init+0x2a8>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d869      	bhi.n	8000b1e <HAL_GPIO_Init+0x12e>
 8000a4a:	4a94      	ldr	r2, [pc, #592]	; (8000c9c <HAL_GPIO_Init+0x2ac>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d04c      	beq.n	8000aea <HAL_GPIO_Init+0xfa>
 8000a50:	4a92      	ldr	r2, [pc, #584]	; (8000c9c <HAL_GPIO_Init+0x2ac>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d863      	bhi.n	8000b1e <HAL_GPIO_Init+0x12e>
 8000a56:	4a92      	ldr	r2, [pc, #584]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d046      	beq.n	8000aea <HAL_GPIO_Init+0xfa>
 8000a5c:	4a90      	ldr	r2, [pc, #576]	; (8000ca0 <HAL_GPIO_Init+0x2b0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d85d      	bhi.n	8000b1e <HAL_GPIO_Init+0x12e>
 8000a62:	2b12      	cmp	r3, #18
 8000a64:	d82a      	bhi.n	8000abc <HAL_GPIO_Init+0xcc>
 8000a66:	2b12      	cmp	r3, #18
 8000a68:	d859      	bhi.n	8000b1e <HAL_GPIO_Init+0x12e>
 8000a6a:	a201      	add	r2, pc, #4	; (adr r2, 8000a70 <HAL_GPIO_Init+0x80>)
 8000a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a70:	08000aeb 	.word	0x08000aeb
 8000a74:	08000ac5 	.word	0x08000ac5
 8000a78:	08000ad7 	.word	0x08000ad7
 8000a7c:	08000b19 	.word	0x08000b19
 8000a80:	08000b1f 	.word	0x08000b1f
 8000a84:	08000b1f 	.word	0x08000b1f
 8000a88:	08000b1f 	.word	0x08000b1f
 8000a8c:	08000b1f 	.word	0x08000b1f
 8000a90:	08000b1f 	.word	0x08000b1f
 8000a94:	08000b1f 	.word	0x08000b1f
 8000a98:	08000b1f 	.word	0x08000b1f
 8000a9c:	08000b1f 	.word	0x08000b1f
 8000aa0:	08000b1f 	.word	0x08000b1f
 8000aa4:	08000b1f 	.word	0x08000b1f
 8000aa8:	08000b1f 	.word	0x08000b1f
 8000aac:	08000b1f 	.word	0x08000b1f
 8000ab0:	08000b1f 	.word	0x08000b1f
 8000ab4:	08000acd 	.word	0x08000acd
 8000ab8:	08000ae1 	.word	0x08000ae1
 8000abc:	4a79      	ldr	r2, [pc, #484]	; (8000ca4 <HAL_GPIO_Init+0x2b4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d013      	beq.n	8000aea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ac2:	e02c      	b.n	8000b1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	623b      	str	r3, [r7, #32]
          break;
 8000aca:	e029      	b.n	8000b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	623b      	str	r3, [r7, #32]
          break;
 8000ad4:	e024      	b.n	8000b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	3308      	adds	r3, #8
 8000adc:	623b      	str	r3, [r7, #32]
          break;
 8000ade:	e01f      	b.n	8000b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	330c      	adds	r3, #12
 8000ae6:	623b      	str	r3, [r7, #32]
          break;
 8000ae8:	e01a      	b.n	8000b20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d102      	bne.n	8000af8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000af2:	2304      	movs	r3, #4
 8000af4:	623b      	str	r3, [r7, #32]
          break;
 8000af6:	e013      	b.n	8000b20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d105      	bne.n	8000b0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b00:	2308      	movs	r3, #8
 8000b02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	69fa      	ldr	r2, [r7, #28]
 8000b08:	611a      	str	r2, [r3, #16]
          break;
 8000b0a:	e009      	b.n	8000b20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	69fa      	ldr	r2, [r7, #28]
 8000b14:	615a      	str	r2, [r3, #20]
          break;
 8000b16:	e003      	b.n	8000b20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
          break;
 8000b1c:	e000      	b.n	8000b20 <HAL_GPIO_Init+0x130>
          break;
 8000b1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	2bff      	cmp	r3, #255	; 0xff
 8000b24:	d801      	bhi.n	8000b2a <HAL_GPIO_Init+0x13a>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	e001      	b.n	8000b2e <HAL_GPIO_Init+0x13e>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	2bff      	cmp	r3, #255	; 0xff
 8000b34:	d802      	bhi.n	8000b3c <HAL_GPIO_Init+0x14c>
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	e002      	b.n	8000b42 <HAL_GPIO_Init+0x152>
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3e:	3b08      	subs	r3, #8
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	210f      	movs	r1, #15
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	401a      	ands	r2, r3
 8000b54:	6a39      	ldr	r1, [r7, #32]
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 80b1 	beq.w	8000cd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b70:	4b4d      	ldr	r3, [pc, #308]	; (8000ca8 <HAL_GPIO_Init+0x2b8>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a4c      	ldr	r2, [pc, #304]	; (8000ca8 <HAL_GPIO_Init+0x2b8>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ca8 <HAL_GPIO_Init+0x2b8>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b88:	4a48      	ldr	r2, [pc, #288]	; (8000cac <HAL_GPIO_Init+0x2bc>)
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	089b      	lsrs	r3, r3, #2
 8000b8e:	3302      	adds	r3, #2
 8000b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a40      	ldr	r2, [pc, #256]	; (8000cb0 <HAL_GPIO_Init+0x2c0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d013      	beq.n	8000bdc <HAL_GPIO_Init+0x1ec>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a3f      	ldr	r2, [pc, #252]	; (8000cb4 <HAL_GPIO_Init+0x2c4>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d00d      	beq.n	8000bd8 <HAL_GPIO_Init+0x1e8>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a3e      	ldr	r2, [pc, #248]	; (8000cb8 <HAL_GPIO_Init+0x2c8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d007      	beq.n	8000bd4 <HAL_GPIO_Init+0x1e4>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a3d      	ldr	r2, [pc, #244]	; (8000cbc <HAL_GPIO_Init+0x2cc>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d101      	bne.n	8000bd0 <HAL_GPIO_Init+0x1e0>
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e006      	b.n	8000bde <HAL_GPIO_Init+0x1ee>
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	e004      	b.n	8000bde <HAL_GPIO_Init+0x1ee>
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	e002      	b.n	8000bde <HAL_GPIO_Init+0x1ee>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e000      	b.n	8000bde <HAL_GPIO_Init+0x1ee>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be0:	f002 0203 	and.w	r2, r2, #3
 8000be4:	0092      	lsls	r2, r2, #2
 8000be6:	4093      	lsls	r3, r2
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bee:	492f      	ldr	r1, [pc, #188]	; (8000cac <HAL_GPIO_Init+0x2bc>)
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d006      	beq.n	8000c16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c08:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	492c      	ldr	r1, [pc, #176]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	600b      	str	r3, [r1, #0]
 8000c14:	e006      	b.n	8000c24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c16:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	4928      	ldr	r1, [pc, #160]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000c20:	4013      	ands	r3, r2
 8000c22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d006      	beq.n	8000c3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	4922      	ldr	r1, [pc, #136]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	604b      	str	r3, [r1, #4]
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	491e      	ldr	r1, [pc, #120]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000c48:	4013      	ands	r3, r2
 8000c4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d006      	beq.n	8000c66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	4918      	ldr	r1, [pc, #96]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	608b      	str	r3, [r1, #8]
 8000c64:	e006      	b.n	8000c74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	4914      	ldr	r1, [pc, #80]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d021      	beq.n	8000cc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	60cb      	str	r3, [r1, #12]
 8000c8c:	e021      	b.n	8000cd2 <HAL_GPIO_Init+0x2e2>
 8000c8e:	bf00      	nop
 8000c90:	10320000 	.word	0x10320000
 8000c94:	10310000 	.word	0x10310000
 8000c98:	10220000 	.word	0x10220000
 8000c9c:	10210000 	.word	0x10210000
 8000ca0:	10120000 	.word	0x10120000
 8000ca4:	10110000 	.word	0x10110000
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010000 	.word	0x40010000
 8000cb0:	40010800 	.word	0x40010800
 8000cb4:	40010c00 	.word	0x40010c00
 8000cb8:	40011000 	.word	0x40011000
 8000cbc:	40011400 	.word	0x40011400
 8000cc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_GPIO_Init+0x304>)
 8000cc6:	68da      	ldr	r2, [r3, #12]
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	4909      	ldr	r1, [pc, #36]	; (8000cf4 <HAL_GPIO_Init+0x304>)
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f47f ae8e 	bne.w	8000a04 <HAL_GPIO_Init+0x14>
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	372c      	adds	r7, #44	; 0x2c
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	40010400 	.word	0x40010400

08000cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e272      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 8087 	beq.w	8000e26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d18:	4b92      	ldr	r3, [pc, #584]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 030c 	and.w	r3, r3, #12
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	d00c      	beq.n	8000d3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d24:	4b8f      	ldr	r3, [pc, #572]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 030c 	and.w	r3, r3, #12
 8000d2c:	2b08      	cmp	r3, #8
 8000d2e:	d112      	bne.n	8000d56 <HAL_RCC_OscConfig+0x5e>
 8000d30:	4b8c      	ldr	r3, [pc, #560]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d3c:	d10b      	bne.n	8000d56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d3e:	4b89      	ldr	r3, [pc, #548]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d06c      	beq.n	8000e24 <HAL_RCC_OscConfig+0x12c>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d168      	bne.n	8000e24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e24c      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d5e:	d106      	bne.n	8000d6e <HAL_RCC_OscConfig+0x76>
 8000d60:	4b80      	ldr	r3, [pc, #512]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a7f      	ldr	r2, [pc, #508]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	e02e      	b.n	8000dcc <HAL_RCC_OscConfig+0xd4>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d10c      	bne.n	8000d90 <HAL_RCC_OscConfig+0x98>
 8000d76:	4b7b      	ldr	r3, [pc, #492]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a7a      	ldr	r2, [pc, #488]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	4b78      	ldr	r3, [pc, #480]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a77      	ldr	r2, [pc, #476]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e01d      	b.n	8000dcc <HAL_RCC_OscConfig+0xd4>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d98:	d10c      	bne.n	8000db4 <HAL_RCC_OscConfig+0xbc>
 8000d9a:	4b72      	ldr	r3, [pc, #456]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a71      	ldr	r2, [pc, #452]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	4b6f      	ldr	r3, [pc, #444]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a6e      	ldr	r2, [pc, #440]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e00b      	b.n	8000dcc <HAL_RCC_OscConfig+0xd4>
 8000db4:	4b6b      	ldr	r3, [pc, #428]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a6a      	ldr	r2, [pc, #424]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b68      	ldr	r3, [pc, #416]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a67      	ldr	r2, [pc, #412]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d013      	beq.n	8000dfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fcfa 	bl	80007cc <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fcf6 	bl	80007cc <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b64      	cmp	r3, #100	; 0x64
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e200      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dee:	4b5d      	ldr	r3, [pc, #372]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f0      	beq.n	8000ddc <HAL_RCC_OscConfig+0xe4>
 8000dfa:	e014      	b.n	8000e26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fce6 	bl	80007cc <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e04:	f7ff fce2 	bl	80007cc <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b64      	cmp	r3, #100	; 0x64
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e1ec      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e16:	4b53      	ldr	r3, [pc, #332]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f0      	bne.n	8000e04 <HAL_RCC_OscConfig+0x10c>
 8000e22:	e000      	b.n	8000e26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d063      	beq.n	8000efa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e32:	4b4c      	ldr	r3, [pc, #304]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 030c 	and.w	r3, r3, #12
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00b      	beq.n	8000e56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e3e:	4b49      	ldr	r3, [pc, #292]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 030c 	and.w	r3, r3, #12
 8000e46:	2b08      	cmp	r3, #8
 8000e48:	d11c      	bne.n	8000e84 <HAL_RCC_OscConfig+0x18c>
 8000e4a:	4b46      	ldr	r3, [pc, #280]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d116      	bne.n	8000e84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e56:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d005      	beq.n	8000e6e <HAL_RCC_OscConfig+0x176>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d001      	beq.n	8000e6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e1c0      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6e:	4b3d      	ldr	r3, [pc, #244]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	4939      	ldr	r1, [pc, #228]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e82:	e03a      	b.n	8000efa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d020      	beq.n	8000ece <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e8c:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <HAL_RCC_OscConfig+0x270>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e92:	f7ff fc9b 	bl	80007cc <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fc97 	bl	80007cc <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e1a1      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eac:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f0      	beq.n	8000e9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	4927      	ldr	r1, [pc, #156]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	600b      	str	r3, [r1, #0]
 8000ecc:	e015      	b.n	8000efa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ece:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fc7a 	bl	80007cc <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000edc:	f7ff fc76 	bl	80007cc <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e180      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f0      	bne.n	8000edc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d03a      	beq.n	8000f7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d019      	beq.n	8000f42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_RCC_OscConfig+0x274>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f14:	f7ff fc5a 	bl	80007cc <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fc56 	bl	80007cc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e160      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0f0      	beq.n	8000f1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f000 fad8 	bl	80014f0 <RCC_Delay>
 8000f40:	e01c      	b.n	8000f7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_RCC_OscConfig+0x274>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f48:	f7ff fc40 	bl	80007cc <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4e:	e00f      	b.n	8000f70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f50:	f7ff fc3c 	bl	80007cc <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d908      	bls.n	8000f70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e146      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	42420000 	.word	0x42420000
 8000f6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f70:	4b92      	ldr	r3, [pc, #584]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1e9      	bne.n	8000f50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80a6 	beq.w	80010d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f8e:	4b8b      	ldr	r3, [pc, #556]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10d      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	4b88      	ldr	r3, [pc, #544]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4a87      	ldr	r2, [pc, #540]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	61d3      	str	r3, [r2, #28]
 8000fa6:	4b85      	ldr	r3, [pc, #532]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb6:	4b82      	ldr	r3, [pc, #520]	; (80011c0 <HAL_RCC_OscConfig+0x4c8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d118      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fc2:	4b7f      	ldr	r3, [pc, #508]	; (80011c0 <HAL_RCC_OscConfig+0x4c8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a7e      	ldr	r2, [pc, #504]	; (80011c0 <HAL_RCC_OscConfig+0x4c8>)
 8000fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fce:	f7ff fbfd 	bl	80007cc <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fd6:	f7ff fbf9 	bl	80007cc <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b64      	cmp	r3, #100	; 0x64
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e103      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe8:	4b75      	ldr	r3, [pc, #468]	; (80011c0 <HAL_RCC_OscConfig+0x4c8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d106      	bne.n	800100a <HAL_RCC_OscConfig+0x312>
 8000ffc:	4b6f      	ldr	r3, [pc, #444]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4a6e      	ldr	r2, [pc, #440]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6213      	str	r3, [r2, #32]
 8001008:	e02d      	b.n	8001066 <HAL_RCC_OscConfig+0x36e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x334>
 8001012:	4b6a      	ldr	r3, [pc, #424]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	4a69      	ldr	r2, [pc, #420]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001018:	f023 0301 	bic.w	r3, r3, #1
 800101c:	6213      	str	r3, [r2, #32]
 800101e:	4b67      	ldr	r3, [pc, #412]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	4a66      	ldr	r2, [pc, #408]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001024:	f023 0304 	bic.w	r3, r3, #4
 8001028:	6213      	str	r3, [r2, #32]
 800102a:	e01c      	b.n	8001066 <HAL_RCC_OscConfig+0x36e>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b05      	cmp	r3, #5
 8001032:	d10c      	bne.n	800104e <HAL_RCC_OscConfig+0x356>
 8001034:	4b61      	ldr	r3, [pc, #388]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	4a60      	ldr	r2, [pc, #384]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6213      	str	r3, [r2, #32]
 8001040:	4b5e      	ldr	r3, [pc, #376]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	4a5d      	ldr	r2, [pc, #372]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6213      	str	r3, [r2, #32]
 800104c:	e00b      	b.n	8001066 <HAL_RCC_OscConfig+0x36e>
 800104e:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	4a5a      	ldr	r2, [pc, #360]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	6213      	str	r3, [r2, #32]
 800105a:	4b58      	ldr	r3, [pc, #352]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	4a57      	ldr	r2, [pc, #348]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001060:	f023 0304 	bic.w	r3, r3, #4
 8001064:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d015      	beq.n	800109a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106e:	f7ff fbad 	bl	80007cc <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001074:	e00a      	b.n	800108c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001076:	f7ff fba9 	bl	80007cc <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	f241 3288 	movw	r2, #5000	; 0x1388
 8001084:	4293      	cmp	r3, r2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e0b1      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108c:	4b4b      	ldr	r3, [pc, #300]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0ee      	beq.n	8001076 <HAL_RCC_OscConfig+0x37e>
 8001098:	e014      	b.n	80010c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109a:	f7ff fb97 	bl	80007cc <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a0:	e00a      	b.n	80010b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f7ff fb93 	bl	80007cc <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e09b      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b8:	4b40      	ldr	r3, [pc, #256]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1ee      	bne.n	80010a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d105      	bne.n	80010d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ca:	4b3c      	ldr	r3, [pc, #240]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	4a3b      	ldr	r2, [pc, #236]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 80010d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 8087 	beq.w	80011ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010e0:	4b36      	ldr	r3, [pc, #216]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 030c 	and.w	r3, r3, #12
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d061      	beq.n	80011b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d146      	bne.n	8001182 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f4:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <HAL_RCC_OscConfig+0x4cc>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fa:	f7ff fb67 	bl	80007cc <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001102:	f7ff fb63 	bl	80007cc <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e06d      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f0      	bne.n	8001102 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001128:	d108      	bne.n	800113c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	4921      	ldr	r1, [pc, #132]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a19      	ldr	r1, [r3, #32]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	430b      	orrs	r3, r1
 800114e:	491b      	ldr	r1, [pc, #108]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_RCC_OscConfig+0x4cc>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115a:	f7ff fb37 	bl	80007cc <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001162:	f7ff fb33 	bl	80007cc <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e03d      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x46a>
 8001180:	e035      	b.n	80011ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_RCC_OscConfig+0x4cc>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fb20 	bl	80007cc <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001190:	f7ff fb1c 	bl	80007cc <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e026      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x498>
 80011ae:	e01e      	b.n	80011ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d107      	bne.n	80011c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e019      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40007000 	.word	0x40007000
 80011c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_RCC_OscConfig+0x500>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d001      	beq.n	80011ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000

080011fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0d0      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d910      	bls.n	8001240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121e:	4b67      	ldr	r3, [pc, #412]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 0207 	bic.w	r2, r3, #7
 8001226:	4965      	ldr	r1, [pc, #404]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800122e:	4b63      	ldr	r3, [pc, #396]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e0b8      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d020      	beq.n	800128e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001258:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	4a58      	ldr	r2, [pc, #352]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001262:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001270:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4a52      	ldr	r2, [pc, #328]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800127a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800127c:	4b50      	ldr	r3, [pc, #320]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	494d      	ldr	r1, [pc, #308]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d040      	beq.n	800131c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d107      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d115      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e07f      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d107      	bne.n	80012ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ba:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e073      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ca:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e06b      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f023 0203 	bic.w	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4936      	ldr	r1, [pc, #216]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012ec:	f7ff fa6e 	bl	80007cc <HAL_GetTick>
 80012f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f2:	e00a      	b.n	800130a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f4:	f7ff fa6a 	bl	80007cc <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001302:	4293      	cmp	r3, r2
 8001304:	d901      	bls.n	800130a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e053      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130a:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 020c 	and.w	r2, r3, #12
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	429a      	cmp	r2, r3
 800131a:	d1eb      	bne.n	80012f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d210      	bcs.n	800134c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132a:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 0207 	bic.w	r2, r3, #7
 8001332:	4922      	ldr	r1, [pc, #136]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d001      	beq.n	800134c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e032      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4916      	ldr	r1, [pc, #88]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d009      	beq.n	800138a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	490e      	ldr	r1, [pc, #56]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800138a:	f000 f821 	bl	80013d0 <HAL_RCC_GetSysClockFreq>
 800138e:	4602      	mov	r2, r0
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	490a      	ldr	r1, [pc, #40]	; (80013c4 <HAL_RCC_ClockConfig+0x1c8>)
 800139c:	5ccb      	ldrb	r3, [r1, r3]
 800139e:	fa22 f303 	lsr.w	r3, r2, r3
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <HAL_RCC_ClockConfig+0x1cc>)
 80013a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_RCC_ClockConfig+0x1d0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f9cc 	bl	8000748 <HAL_InitTick>

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000
 80013c0:	40021000 	.word	0x40021000
 80013c4:	08001b6c 	.word	0x08001b6c
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d0:	b490      	push	{r4, r7}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013d6:	4b29      	ldr	r3, [pc, #164]	; (800147c <HAL_RCC_GetSysClockFreq+0xac>)
 80013d8:	1d3c      	adds	r4, r7, #4
 80013da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013e0:	f240 2301 	movw	r3, #513	; 0x201
 80013e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b04      	cmp	r3, #4
 8001408:	d002      	beq.n	8001410 <HAL_RCC_GetSysClockFreq+0x40>
 800140a:	2b08      	cmp	r3, #8
 800140c:	d003      	beq.n	8001416 <HAL_RCC_GetSysClockFreq+0x46>
 800140e:	e02b      	b.n	8001468 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001412:	623b      	str	r3, [r7, #32]
      break;
 8001414:	e02b      	b.n	800146e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	0c9b      	lsrs	r3, r3, #18
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3328      	adds	r3, #40	; 0x28
 8001420:	443b      	add	r3, r7
 8001422:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001426:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d012      	beq.n	8001458 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	0c5b      	lsrs	r3, r3, #17
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	3328      	adds	r3, #40	; 0x28
 800143e:	443b      	add	r3, r7
 8001440:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001444:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <HAL_RCC_GetSysClockFreq+0xb4>)
 800144a:	fb03 f202 	mul.w	r2, r3, r2
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	fbb2 f3f3 	udiv	r3, r2, r3
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
 8001456:	e004      	b.n	8001462 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <HAL_RCC_GetSysClockFreq+0xb8>)
 800145c:	fb02 f303 	mul.w	r3, r2, r3
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	623b      	str	r3, [r7, #32]
      break;
 8001466:	e002      	b.n	800146e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_RCC_GetSysClockFreq+0xb4>)
 800146a:	623b      	str	r3, [r7, #32]
      break;
 800146c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800146e:	6a3b      	ldr	r3, [r7, #32]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bc90      	pop	{r4, r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	08001b5c 	.word	0x08001b5c
 8001480:	40021000 	.word	0x40021000
 8001484:	007a1200 	.word	0x007a1200
 8001488:	003d0900 	.word	0x003d0900

0800148c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001490:	4b02      	ldr	r3, [pc, #8]	; (800149c <HAL_RCC_GetHCLKFreq+0x10>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	20000000 	.word	0x20000000

080014a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014a4:	f7ff fff2 	bl	800148c <HAL_RCC_GetHCLKFreq>
 80014a8:	4602      	mov	r2, r0
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	0a1b      	lsrs	r3, r3, #8
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	4903      	ldr	r1, [pc, #12]	; (80014c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014b6:	5ccb      	ldrb	r3, [r1, r3]
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014bc:	4618      	mov	r0, r3
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40021000 	.word	0x40021000
 80014c4:	08001b7c 	.word	0x08001b7c

080014c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014cc:	f7ff ffde 	bl	800148c <HAL_RCC_GetHCLKFreq>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	0adb      	lsrs	r3, r3, #11
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	4903      	ldr	r1, [pc, #12]	; (80014ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80014de:	5ccb      	ldrb	r3, [r1, r3]
 80014e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000
 80014ec:	08001b7c 	.word	0x08001b7c

080014f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <RCC_Delay+0x34>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <RCC_Delay+0x38>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0a5b      	lsrs	r3, r3, #9
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800150c:	bf00      	nop
  }
  while (Delay --);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1e5a      	subs	r2, r3, #1
 8001512:	60fa      	str	r2, [r7, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f9      	bne.n	800150c <RCC_Delay+0x1c>
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	20000000 	.word	0x20000000
 8001528:	10624dd3 	.word	0x10624dd3

0800152c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e03f      	b.n	80015be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d106      	bne.n	8001558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff f842 	bl	80005dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2224      	movs	r2, #36	; 0x24
 800155c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800156e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f9a7 	bl	80018c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2220      	movs	r2, #32
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2220      	movs	r2, #32
 80015b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b08a      	sub	sp, #40	; 0x28
 80015ca:	af02      	add	r7, sp, #8
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4613      	mov	r3, r2
 80015d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b20      	cmp	r3, #32
 80015e4:	d17c      	bne.n	80016e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <HAL_UART_Transmit+0x2c>
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e075      	b.n	80016e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_UART_Transmit+0x3e>
 8001600:	2302      	movs	r3, #2
 8001602:	e06e      	b.n	80016e2 <HAL_UART_Transmit+0x11c>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2221      	movs	r2, #33	; 0x21
 8001616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800161a:	f7ff f8d7 	bl	80007cc <HAL_GetTick>
 800161e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	88fa      	ldrh	r2, [r7, #6]
 8001624:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	88fa      	ldrh	r2, [r7, #6]
 800162a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001634:	d108      	bne.n	8001648 <HAL_UART_Transmit+0x82>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d104      	bne.n	8001648 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e003      	b.n	8001650 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001658:	e02a      	b.n	80016b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2200      	movs	r2, #0
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 f8e2 	bl	800182e <UART_WaitOnFlagUntilTimeout>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e036      	b.n	80016e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10b      	bne.n	8001692 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001688:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	3302      	adds	r3, #2
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	e007      	b.n	80016a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	3301      	adds	r3, #1
 80016a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1cf      	bne.n	800165a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2200      	movs	r2, #0
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 f8b2 	bl	800182e <UART_WaitOnFlagUntilTimeout>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e006      	b.n	80016e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2220      	movs	r2, #32
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	e000      	b.n	80016e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80016e0:	2302      	movs	r3, #2
  }
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3720      	adds	r7, #32
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b08a      	sub	sp, #40	; 0x28
 80016ee:	af02      	add	r7, sp, #8
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	4613      	mov	r3, r2
 80016f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b20      	cmp	r3, #32
 8001708:	f040 808c 	bne.w	8001824 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <HAL_UART_Receive+0x2e>
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e084      	b.n	8001826 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_UART_Receive+0x40>
 8001726:	2302      	movs	r3, #2
 8001728:	e07d      	b.n	8001826 <HAL_UART_Receive+0x13c>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2222      	movs	r2, #34	; 0x22
 800173c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001746:	f7ff f841 	bl	80007cc <HAL_GetTick>
 800174a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	88fa      	ldrh	r2, [r7, #6]
 8001750:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	88fa      	ldrh	r2, [r7, #6]
 8001756:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001760:	d108      	bne.n	8001774 <HAL_UART_Receive+0x8a>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d104      	bne.n	8001774 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	e003      	b.n	800177c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001784:	e043      	b.n	800180e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2200      	movs	r2, #0
 800178e:	2120      	movs	r1, #32
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f000 f84c 	bl	800182e <UART_WaitOnFlagUntilTimeout>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e042      	b.n	8001826 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10c      	bne.n	80017c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	3302      	adds	r3, #2
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	e01f      	b.n	8001800 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c8:	d007      	beq.n	80017da <HAL_UART_Receive+0xf0>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10a      	bne.n	80017e8 <HAL_UART_Receive+0xfe>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d106      	bne.n	80017e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	e008      	b.n	80017fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3301      	adds	r3, #1
 80017fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001804:	b29b      	uxth	r3, r3
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001812:	b29b      	uxth	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1b6      	bne.n	8001786 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2220      	movs	r2, #32
 800181c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	e000      	b.n	8001826 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001824:	2302      	movs	r3, #2
  }
}
 8001826:	4618      	mov	r0, r3
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	4613      	mov	r3, r2
 800183c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800183e:	e02c      	b.n	800189a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001846:	d028      	beq.n	800189a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <UART_WaitOnFlagUntilTimeout+0x30>
 800184e:	f7fe ffbd 	bl	80007cc <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	429a      	cmp	r2, r3
 800185c:	d21d      	bcs.n	800189a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800186c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2220      	movs	r2, #32
 8001882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2220      	movs	r2, #32
 800188a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e00f      	b.n	80018ba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4013      	ands	r3, r2
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	bf0c      	ite	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	2300      	movne	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d0c3      	beq.n	8001840 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80018fe:	f023 030c 	bic.w	r3, r3, #12
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	68b9      	ldr	r1, [r7, #8]
 8001908:	430b      	orrs	r3, r1
 800190a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a2c      	ldr	r2, [pc, #176]	; (80019d8 <UART_SetConfig+0x114>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d103      	bne.n	8001934 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800192c:	f7ff fdcc 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	e002      	b.n	800193a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001934:	f7ff fdb4 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 8001938:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	009a      	lsls	r2, r3, #2
 8001944:	441a      	add	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001950:	4a22      	ldr	r2, [pc, #136]	; (80019dc <UART_SetConfig+0x118>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	0119      	lsls	r1, r3, #4
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	009a      	lsls	r2, r3, #2
 8001964:	441a      	add	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <UART_SetConfig+0x118>)
 8001972:	fba3 0302 	umull	r0, r3, r3, r2
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2064      	movs	r0, #100	; 0x64
 800197a:	fb00 f303 	mul.w	r3, r0, r3
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	3332      	adds	r3, #50	; 0x32
 8001984:	4a15      	ldr	r2, [pc, #84]	; (80019dc <UART_SetConfig+0x118>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001990:	4419      	add	r1, r3
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	009a      	lsls	r2, r3, #2
 800199c:	441a      	add	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <UART_SetConfig+0x118>)
 80019aa:	fba3 0302 	umull	r0, r3, r3, r2
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	2064      	movs	r0, #100	; 0x64
 80019b2:	fb00 f303 	mul.w	r3, r0, r3
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	3332      	adds	r3, #50	; 0x32
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <UART_SetConfig+0x118>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	f003 020f 	and.w	r2, r3, #15
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	440a      	add	r2, r1
 80019ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40013800 	.word	0x40013800
 80019dc:	51eb851f 	.word	0x51eb851f

080019e0 <__libc_init_array>:
 80019e0:	b570      	push	{r4, r5, r6, lr}
 80019e2:	2600      	movs	r6, #0
 80019e4:	4d0c      	ldr	r5, [pc, #48]	; (8001a18 <__libc_init_array+0x38>)
 80019e6:	4c0d      	ldr	r4, [pc, #52]	; (8001a1c <__libc_init_array+0x3c>)
 80019e8:	1b64      	subs	r4, r4, r5
 80019ea:	10a4      	asrs	r4, r4, #2
 80019ec:	42a6      	cmp	r6, r4
 80019ee:	d109      	bne.n	8001a04 <__libc_init_array+0x24>
 80019f0:	f000 f822 	bl	8001a38 <_init>
 80019f4:	2600      	movs	r6, #0
 80019f6:	4d0a      	ldr	r5, [pc, #40]	; (8001a20 <__libc_init_array+0x40>)
 80019f8:	4c0a      	ldr	r4, [pc, #40]	; (8001a24 <__libc_init_array+0x44>)
 80019fa:	1b64      	subs	r4, r4, r5
 80019fc:	10a4      	asrs	r4, r4, #2
 80019fe:	42a6      	cmp	r6, r4
 8001a00:	d105      	bne.n	8001a0e <__libc_init_array+0x2e>
 8001a02:	bd70      	pop	{r4, r5, r6, pc}
 8001a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a08:	4798      	blx	r3
 8001a0a:	3601      	adds	r6, #1
 8001a0c:	e7ee      	b.n	80019ec <__libc_init_array+0xc>
 8001a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a12:	4798      	blx	r3
 8001a14:	3601      	adds	r6, #1
 8001a16:	e7f2      	b.n	80019fe <__libc_init_array+0x1e>
 8001a18:	08001b84 	.word	0x08001b84
 8001a1c:	08001b84 	.word	0x08001b84
 8001a20:	08001b84 	.word	0x08001b84
 8001a24:	08001b88 	.word	0x08001b88

08001a28 <memset>:
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4402      	add	r2, r0
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d100      	bne.n	8001a32 <memset+0xa>
 8001a30:	4770      	bx	lr
 8001a32:	f803 1b01 	strb.w	r1, [r3], #1
 8001a36:	e7f9      	b.n	8001a2c <memset+0x4>

08001a38 <_init>:
 8001a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3a:	bf00      	nop
 8001a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a3e:	bc08      	pop	{r3}
 8001a40:	469e      	mov	lr, r3
 8001a42:	4770      	bx	lr

08001a44 <_fini>:
 8001a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a46:	bf00      	nop
 8001a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a4a:	bc08      	pop	{r3}
 8001a4c:	469e      	mov	lr, r3
 8001a4e:	4770      	bx	lr
