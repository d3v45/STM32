
compatriot_flag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af4  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b74  08003b74  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b74  08003b74  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b74  08003b74  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  08003bec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003bec  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007909  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014cc  00000000  00000000  000279a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  00028e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  00029528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001776d  00000000  00000000  00029b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000805c  00000000  00000000  000412c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008394a  00000000  00000000  00049321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccc6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002364  00000000  00000000  000cccbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003068 	.word	0x08003068

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003068 	.word	0x08003068

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b5b0      	push	{r4, r5, r7, lr}
 8000172:	f5ad 4d9e 	sub.w	sp, sp, #20224	; 0x4f00
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	    char name[50];
	    char message0[]="wh47 sh0u1d I call y0u h4ck3r?";
 800017a:	4b9f      	ldr	r3, [pc, #636]	; (80003f8 <main+0x288>)
 800017c:	f507 449d 	add.w	r4, r7, #20096	; 0x4e80
 8000180:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8000184:	461d      	mov	r5, r3
 8000186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800018a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800018e:	c407      	stmia	r4!, {r0, r1, r2}
 8000190:	8023      	strh	r3, [r4, #0]
 8000192:	3402      	adds	r4, #2
 8000194:	0c1b      	lsrs	r3, r3, #16
 8000196:	7023      	strb	r3, [r4, #0]
	    char message2[10000];
	    char answer[10];
	    char message[] = "s0 d0 y0u 4c7u4lly want t0 be a h4rdw4re h4ck3r?";
 8000198:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 800019c:	f103 0308 	add.w	r3, r3, #8
 80001a0:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 80001a4:	4a95      	ldr	r2, [pc, #596]	; (80003fc <main+0x28c>)
 80001a6:	461c      	mov	r4, r3
 80001a8:	4615      	mov	r5, r2
 80001aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b6:	682b      	ldr	r3, [r5, #0]
 80001b8:	7023      	strb	r3, [r4, #0]
	    char yes_message[] = "g00d luck 0n y0ur j0urn3y :";
 80001ba:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80001be:	f103 0308 	add.w	r3, r3, #8
 80001c2:	f2a3 73c4 	subw	r3, r3, #1988	; 0x7c4
 80001c6:	4a8e      	ldr	r2, [pc, #568]	; (8000400 <main+0x290>)
 80001c8:	461c      	mov	r4, r3
 80001ca:	4615      	mov	r5, r2
 80001cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    char no_message[] = " ¯\\_(ツ)_/¯ no flag then ¯\\_(ツ)_/¯";
 80001d8:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80001dc:	f103 0308 	add.w	r3, r3, #8
 80001e0:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 80001e4:	4a87      	ldr	r2, [pc, #540]	; (8000404 <main+0x294>)
 80001e6:	461c      	mov	r4, r3
 80001e8:	4615      	mov	r5, r2
 80001ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f6:	c403      	stmia	r4!, {r0, r1}
 80001f8:	8022      	strh	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fa:	f000 fd0f 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fe:	f000 fb1d 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000202:	f000 fb81 	bl	8000908 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000206:	f000 fb55 	bl	80008b4 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for (i=0; message0[i]!='\0';i++) {
 800020a:	2300      	movs	r3, #0
 800020c:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 8000210:	f102 0204 	add.w	r2, r2, #4
 8000214:	6013      	str	r3, [r2, #0]
 8000216:	e026      	b.n	8000266 <main+0xf6>
	  		HAL_UART_Transmit(&huart2, (char*)message0[i], 30, HAL_MAX_DELAY);
 8000218:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 800021c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000220:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 8000224:	f103 0304 	add.w	r3, r3, #4
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4413      	add	r3, r2
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4619      	mov	r1, r3
 8000230:	f04f 33ff 	mov.w	r3, #4294967295
 8000234:	221e      	movs	r2, #30
 8000236:	4874      	ldr	r0, [pc, #464]	; (8000408 <main+0x298>)
 8000238:	f001 fc3e 	bl	8001ab8 <HAL_UART_Transmit>
	  		fflush(stdout);
 800023c:	4b73      	ldr	r3, [pc, #460]	; (800040c <main+0x29c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	4618      	mov	r0, r3
 8000244:	f001 ff0e 	bl	8002064 <fflush>
	  		HAL_Delay(50000); //delay
 8000248:	f24c 3050 	movw	r0, #50000	; 0xc350
 800024c:	f000 fd48 	bl	8000ce0 <HAL_Delay>
	  for (i=0; message0[i]!='\0';i++) {
 8000250:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 8000254:	f103 0304 	add.w	r3, r3, #4
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	3301      	adds	r3, #1
 800025c:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 8000260:	f102 0204 	add.w	r2, r2, #4
 8000264:	6013      	str	r3, [r2, #0]
 8000266:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 800026a:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800026e:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 8000272:	f103 0304 	add.w	r3, r3, #4
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4413      	add	r3, r2
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d1cb      	bne.n	8000218 <main+0xa8>
	  	}
	  // Wait until a character is received
	    while (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) == RESET) {}
 8000280:	bf00      	nop
 8000282:	4b61      	ldr	r3, [pc, #388]	; (8000408 <main+0x298>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f003 0320 	and.w	r3, r3, #32
 800028c:	2b20      	cmp	r3, #32
 800028e:	d1f8      	bne.n	8000282 <main+0x112>

	    // Read the received character
	    char ch;
	    HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000290:	f107 0108 	add.w	r1, r7, #8
 8000294:	3901      	subs	r1, #1
 8000296:	f04f 33ff 	mov.w	r3, #4294967295
 800029a:	2201      	movs	r2, #1
 800029c:	485a      	ldr	r0, [pc, #360]	; (8000408 <main+0x298>)
 800029e:	f001 fc8e 	bl	8001bbe <HAL_UART_Receive>

	    // Check if it's a newline character
	    if (ch == '\n' || ch == '\r') {
 80002a2:	f607 7308 	addw	r3, r7, #3848	; 0xf08
 80002a6:	f6a3 7301 	subw	r3, r3, #3841	; 0xf01
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b0a      	cmp	r3, #10
 80002ae:	d006      	beq.n	80002be <main+0x14e>
 80002b0:	f607 7308 	addw	r3, r7, #3848	; 0xf08
 80002b4:	f6a3 7301 	subw	r3, r3, #3841	; 0xf01
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b0d      	cmp	r3, #13
 80002bc:	d10c      	bne.n	80002d8 <main+0x168>
	      name[i] = '\0';  // Add null termination character
 80002be:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80002c2:	f102 0250 	add.w	r2, r2, #80	; 0x50
 80002c6:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 80002ca:	f103 0304 	add.w	r3, r3, #4
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4413      	add	r3, r2
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
	      break;  // Exit the loop
 80002d6:	e2a6      	b.n	8000826 <main+0x6b6>
	    }

	    // Store the character in the name buffer
	    name[i] = ch;
 80002d8:	f607 7308 	addw	r3, r7, #3848	; 0xf08
 80002dc:	f6a3 7301 	subw	r3, r3, #3841	; 0xf01
 80002e0:	7819      	ldrb	r1, [r3, #0]
 80002e2:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80002e6:	f102 0250 	add.w	r2, r2, #80	; 0x50
 80002ea:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 80002ee:	f103 0304 	add.w	r3, r3, #4
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4413      	add	r3, r2
 80002f6:	460a      	mov	r2, r1
 80002f8:	701a      	strb	r2, [r3, #0]
	    i++;
 80002fa:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 80002fe:	f103 0304 	add.w	r3, r3, #4
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	3301      	adds	r3, #1
 8000306:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 800030a:	f102 0204 	add.w	r2, r2, #4
 800030e:	6013      	str	r3, [r2, #0]
	    if (i >= 50) {
 8000310:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 8000314:	f103 0304 	add.w	r3, r3, #4
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b31      	cmp	r3, #49	; 0x31
 800031c:	dd0c      	ble.n	8000338 <main+0x1c8>
	      name[i] = '\0';  // Add null termination character
 800031e:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 8000322:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8000326:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 800032a:	f103 0304 	add.w	r3, r3, #4
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4413      	add	r3, r2
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
	      break;  // Exit the loop
 8000336:	e276      	b.n	8000826 <main+0x6b6>
	    }
	  	name[strcspn(name, "\n")] = 0; // remove newline character from the end of the name
 8000338:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 800033c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000340:	4933      	ldr	r1, [pc, #204]	; (8000410 <main+0x2a0>)
 8000342:	4618      	mov	r0, r3
 8000344:	f002 f929 	bl	800259a <strcspn>
 8000348:	4603      	mov	r3, r0
 800034a:	f503 439e 	add.w	r3, r3, #20224	; 0x4f00
 800034e:	f103 0308 	add.w	r3, r3, #8
 8000352:	443b      	add	r3, r7
 8000354:	2200      	movs	r2, #0
 8000356:	f803 2c38 	strb.w	r2, [r3, #-56]
	  	sprintf(message2, "Here are some wise words by two famous people, %s:\n \n          In the world of electronics, the Joker would say that we're all just a bunch of criminals. We use UART communication protocols to take advantage of a service that's already available without paying for something that should be free. But is it really that simple? \n \n UART, like the exquisite baud of the electronic world, is a tool that we can use to communicate without bias or prejudice. It's a protocol that exists without skin color, country or religious affiliation. We use it to seek knowledge and to connect with one another in new and exciting ways.\n \n But just like the Joker, we're often accused of being criminals simply for exploring the limits of this protocol. We're called hackers, or worse, simply because we want to know what's possible. \n \n The truth is, UART communication protocols are a powerful tool that can be used for both good and bad. Just like any technology, it's up to us to decide how we use it. Will we use it to develop life-saving medical devices or to create new opportunities for education and communication? Or will we use it to perpetrate crimes and cause chaos?\n \n As the Joker said, 'It's not about money. It's about sending a message.' In the world of UART, the message we send is up to us. We can choose to use this protocol to bring people together or to tear them apart. We can use it to share knowledge and to build a better future, or we can use it to spread hate and destruction.\n \n So let's take a cue from the Joker and embrace the madness of UART communication protocols. Let's use them to push the limits of what's possible and to create a world that's more connected and more inclusive. And let's do it all with a smile on our faces, just like the Joker would have wanted.\n \n ",name);
 800035a:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 800035e:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8000362:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8000366:	f103 0308 	add.w	r3, r3, #8
 800036a:	3b28      	subs	r3, #40	; 0x28
 800036c:	4929      	ldr	r1, [pc, #164]	; (8000414 <main+0x2a4>)
 800036e:	4618      	mov	r0, r3
 8000370:	f002 f8b0 	bl	80024d4 <siprintf>
	  	for (i=0; message2[i]!='\0';i++) {
 8000374:	2300      	movs	r3, #0
 8000376:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 800037a:	f102 0204 	add.w	r2, r2, #4
 800037e:	6013      	str	r3, [r2, #0]
 8000380:	e024      	b.n	80003cc <main+0x25c>
	  		putchar(message2[i]);
 8000382:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8000386:	f103 0308 	add.w	r3, r3, #8
 800038a:	f5a3 62ed 	sub.w	r2, r3, #1896	; 0x768
 800038e:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 8000392:	f103 0304 	add.w	r3, r3, #4
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4413      	add	r3, r2
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	f002 f875 	bl	800248c <putchar>
	  		fflush(stdout);
 80003a2:	4b1a      	ldr	r3, [pc, #104]	; (800040c <main+0x29c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f001 fe5b 	bl	8002064 <fflush>
	  		HAL_Delay(10000); //delay
 80003ae:	f242 7010 	movw	r0, #10000	; 0x2710
 80003b2:	f000 fc95 	bl	8000ce0 <HAL_Delay>
	  	for (i=0; message2[i]!='\0';i++) {
 80003b6:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 80003ba:	f103 0304 	add.w	r3, r3, #4
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 80003c6:	f102 0204 	add.w	r2, r2, #4
 80003ca:	6013      	str	r3, [r2, #0]
 80003cc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80003d0:	f103 0308 	add.w	r3, r3, #8
 80003d4:	f5a3 62ed 	sub.w	r2, r3, #1896	; 0x768
 80003d8:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 80003dc:	f103 0304 	add.w	r3, r3, #4
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4413      	add	r3, r2
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1cb      	bne.n	8000382 <main+0x212>



	      while (1) {
	          // Print message
	          for (i = 0; message[i] != '\0'; i++) {
 80003ea:	2300      	movs	r3, #0
 80003ec:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 80003f0:	f102 0204 	add.w	r2, r2, #4
 80003f4:	6013      	str	r3, [r2, #0]
 80003f6:	e034      	b.n	8000462 <main+0x2f2>
 80003f8:	08003a14 	.word	0x08003a14
 80003fc:	08003a34 	.word	0x08003a34
 8000400:	08003a68 	.word	0x08003a68
 8000404:	08003a84 	.word	0x08003a84
 8000408:	2000008c 	.word	0x2000008c
 800040c:	2000000c 	.word	0x2000000c
 8000410:	08003080 	.word	0x08003080
 8000414:	08003084 	.word	0x08003084
	              putchar(message[i]);
 8000418:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 800041c:	f103 0308 	add.w	r3, r3, #8
 8000420:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 8000424:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 8000428:	f103 0304 	add.w	r3, r3, #4
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4413      	add	r3, r2
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	4618      	mov	r0, r3
 8000434:	f002 f82a 	bl	800248c <putchar>
	              fflush(stdout);
 8000438:	4bcf      	ldr	r3, [pc, #828]	; (8000778 <main+0x608>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	4618      	mov	r0, r3
 8000440:	f001 fe10 	bl	8002064 <fflush>
	              HAL_Delay(50000); //delay
 8000444:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000448:	f000 fc4a 	bl	8000ce0 <HAL_Delay>
	          for (i = 0; message[i] != '\0'; i++) {
 800044c:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 8000450:	f103 0304 	add.w	r3, r3, #4
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 800045c:	f102 0204 	add.w	r2, r2, #4
 8000460:	6013      	str	r3, [r2, #0]
 8000462:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8000466:	f103 0308 	add.w	r3, r3, #8
 800046a:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 800046e:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 8000472:	f103 0304 	add.w	r3, r3, #4
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4413      	add	r3, r2
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d1cb      	bne.n	8000418 <main+0x2a8>
	          }

	          // Get answer from user
	          // Wait until a character is received
	           while (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) == RESET) {}
 8000480:	bf00      	nop
 8000482:	4bbe      	ldr	r3, [pc, #760]	; (800077c <main+0x60c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f003 0320 	and.w	r3, r3, #32
 800048c:	2b20      	cmp	r3, #32
 800048e:	d1f8      	bne.n	8000482 <main+0x312>

	           // Read the received character
	           char ch;
	           HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000490:	f107 0108 	add.w	r1, r7, #8
 8000494:	3902      	subs	r1, #2
 8000496:	f04f 33ff 	mov.w	r3, #4294967295
 800049a:	2201      	movs	r2, #1
 800049c:	48b7      	ldr	r0, [pc, #732]	; (800077c <main+0x60c>)
 800049e:	f001 fb8e 	bl	8001bbe <HAL_UART_Receive>

	           // Check if it's a newline character or the buffer is full
	           if (ch == '\n' || ch == '\r' || strlen(answer) >= 10) {
 80004a2:	f607 7308 	addw	r3, r7, #3848	; 0xf08
 80004a6:	f6a3 7302 	subw	r3, r3, #3842	; 0xf02
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b0a      	cmp	r3, #10
 80004ae:	d011      	beq.n	80004d4 <main+0x364>
 80004b0:	f607 7308 	addw	r3, r7, #3848	; 0xf08
 80004b4:	f6a3 7302 	subw	r3, r3, #3842	; 0xf02
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b0d      	cmp	r3, #13
 80004bc:	d00a      	beq.n	80004d4 <main+0x364>
 80004be:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80004c2:	f103 0308 	add.w	r3, r3, #8
 80004c6:	3b34      	subs	r3, #52	; 0x34
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fe49 	bl	8000160 <strlen>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b09      	cmp	r3, #9
 80004d2:	d911      	bls.n	80004f8 <main+0x388>
	             answer[strlen(answer)] = '\0';  // Add null termination character
 80004d4:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80004d8:	f103 0308 	add.w	r3, r3, #8
 80004dc:	3b34      	subs	r3, #52	; 0x34
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff fe3e 	bl	8000160 <strlen>
 80004e4:	4602      	mov	r2, r0
 80004e6:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80004ea:	f103 0308 	add.w	r3, r3, #8
 80004ee:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 80004f2:	2100      	movs	r1, #0
 80004f4:	5499      	strb	r1, [r3, r2]
	             break;  // Exit the loop
 80004f6:	e195      	b.n	8000824 <main+0x6b4>
	           }

	           // Store the character in the answer buffer
	           strncat(answer, &ch, 1);
 80004f8:	f107 0108 	add.w	r1, r7, #8
 80004fc:	3902      	subs	r1, #2
 80004fe:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8000502:	f103 0308 	add.w	r3, r3, #8
 8000506:	3b34      	subs	r3, #52	; 0x34
 8000508:	2201      	movs	r2, #1
 800050a:	4618      	mov	r0, r3
 800050c:	f002 f856 	bl	80025bc <strncat>

	          // Check if answer is yes or ya
	          if (strcmp(answer, "yes\n") == 0 || strcmp(answer, "ya\n") == 0) {
 8000510:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8000514:	f103 0308 	add.w	r3, r3, #8
 8000518:	3b34      	subs	r3, #52	; 0x34
 800051a:	4999      	ldr	r1, [pc, #612]	; (8000780 <main+0x610>)
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff fe15 	bl	800014c <strcmp>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d00c      	beq.n	8000542 <main+0x3d2>
 8000528:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 800052c:	f103 0308 	add.w	r3, r3, #8
 8000530:	3b34      	subs	r3, #52	; 0x34
 8000532:	4994      	ldr	r1, [pc, #592]	; (8000784 <main+0x614>)
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fe09 	bl	800014c <strcmp>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	f040 8129 	bne.w	8000794 <main+0x624>
	              // Print yes message
	              for (i = 0; yes_message[i] != '\0'; i++) {
 8000542:	2300      	movs	r3, #0
 8000544:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 8000548:	f102 0204 	add.w	r2, r2, #4
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	e024      	b.n	800059a <main+0x42a>
	                  putchar(yes_message[i]);
 8000550:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8000554:	f103 0308 	add.w	r3, r3, #8
 8000558:	f2a3 72c4 	subw	r2, r3, #1988	; 0x7c4
 800055c:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 8000560:	f103 0304 	add.w	r3, r3, #4
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4413      	add	r3, r2
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f001 ff8e 	bl	800248c <putchar>
	                  fflush(stdout);
 8000570:	4b81      	ldr	r3, [pc, #516]	; (8000778 <main+0x608>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fd74 	bl	8002064 <fflush>
	                  HAL_Delay(50000); //delay
 800057c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000580:	f000 fbae 	bl	8000ce0 <HAL_Delay>
	              for (i = 0; yes_message[i] != '\0'; i++) {
 8000584:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 8000588:	f103 0304 	add.w	r3, r3, #4
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 8000594:	f102 0204 	add.w	r2, r2, #4
 8000598:	6013      	str	r3, [r2, #0]
 800059a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 800059e:	f103 0308 	add.w	r3, r3, #8
 80005a2:	f2a3 72c4 	subw	r2, r3, #1988	; 0x7c4
 80005a6:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 80005aa:	f103 0304 	add.w	r3, r3, #4
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4413      	add	r3, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1cb      	bne.n	8000550 <main+0x3e0>
	              }

	              // Loop until the user types "thanks" or "thankyou"
	              while (1) {
	            	  // Wait until a character is received
	            	   while (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) == RESET) {}
 80005b8:	bf00      	nop
 80005ba:	4b70      	ldr	r3, [pc, #448]	; (800077c <main+0x60c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f003 0320 	and.w	r3, r3, #32
 80005c4:	2b20      	cmp	r3, #32
 80005c6:	d1f8      	bne.n	80005ba <main+0x44a>

	            	   // Read the received character
	            	   char ch;
	            	   HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005c8:	f107 0108 	add.w	r1, r7, #8
 80005cc:	3903      	subs	r1, #3
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	2201      	movs	r2, #1
 80005d4:	4869      	ldr	r0, [pc, #420]	; (800077c <main+0x60c>)
 80005d6:	f001 faf2 	bl	8001bbe <HAL_UART_Receive>

	            	   // Check if it's a newline character or the buffer is full
	            	   if (ch == '\n' || ch == '\r' || strlen(answer) >= 10) {
 80005da:	f607 7308 	addw	r3, r7, #3848	; 0xf08
 80005de:	f6a3 7303 	subw	r3, r3, #3843	; 0xf03
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b0a      	cmp	r3, #10
 80005e6:	d011      	beq.n	800060c <main+0x49c>
 80005e8:	f607 7308 	addw	r3, r7, #3848	; 0xf08
 80005ec:	f6a3 7303 	subw	r3, r3, #3843	; 0xf03
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b0d      	cmp	r3, #13
 80005f4:	d00a      	beq.n	800060c <main+0x49c>
 80005f6:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80005fa:	f103 0308 	add.w	r3, r3, #8
 80005fe:	3b34      	subs	r3, #52	; 0x34
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fdad 	bl	8000160 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	2b09      	cmp	r3, #9
 800060a:	d911      	bls.n	8000630 <main+0x4c0>
	            	     answer[strlen(answer)] = '\0';  // Add null termination character
 800060c:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8000610:	f103 0308 	add.w	r3, r3, #8
 8000614:	3b34      	subs	r3, #52	; 0x34
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fda2 	bl	8000160 <strlen>
 800061c:	4602      	mov	r2, r0
 800061e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8000622:	f103 0308 	add.w	r3, r3, #8
 8000626:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 800062a:	2100      	movs	r1, #0
 800062c:	5499      	strb	r1, [r3, r2]
	            	     break;  // Exit the loop
 800062e:	e0a1      	b.n	8000774 <main+0x604>
	            	   }

	            	   // Store the character in the answer buffer
	            	   strncat(answer, &ch, 1);
 8000630:	f107 0108 	add.w	r1, r7, #8
 8000634:	3903      	subs	r1, #3
 8000636:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 800063a:	f103 0308 	add.w	r3, r3, #8
 800063e:	3b34      	subs	r3, #52	; 0x34
 8000640:	2201      	movs	r2, #1
 8000642:	4618      	mov	r0, r3
 8000644:	f001 ffba 	bl	80025bc <strncat>

	                  if (strcmp(answer, "thankyou\n") == 0 || strcmp(answer, "thanks\n") == 0) {
 8000648:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 800064c:	f103 0308 	add.w	r3, r3, #8
 8000650:	3b34      	subs	r3, #52	; 0x34
 8000652:	494d      	ldr	r1, [pc, #308]	; (8000788 <main+0x618>)
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fd79 	bl	800014c <strcmp>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d00b      	beq.n	8000678 <main+0x508>
 8000660:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8000664:	f103 0308 	add.w	r3, r3, #8
 8000668:	3b34      	subs	r3, #52	; 0x34
 800066a:	4948      	ldr	r1, [pc, #288]	; (800078c <main+0x61c>)
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fd6d 	bl	800014c <strcmp>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d141      	bne.n	80006fc <main+0x58c>
	                      // Print thanku_msg
	                      sprintf(thanku_msg,"\n %s, y0u w1ll n33d 7h15 t0 c0nt1nu3 y0ur j0urn3y\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  _____                             _      _____    _____\n /  __ \\                           | |    |_   _|  |_   _|\n | /  \\/ ___  _ __ ___  _ __   __ _| |_ _ __| |  ___ | |\n | |    / _ \\| '_ ` _ \\| '_ \\ / _` | __| '__| | / _ \\| |\n | \\__/\\ (_) | | | | | | |_) | (_| | |_| | _| || (_) | |\n  \\____/\\___/|_| |_| |_| .__/ \\__,_|\\__|_| \\___/\\___/\\_/\n                       | |\n                       |_|\n \n compatrIoT{w3lc0m3_70_7h3_w0rld_0f_h4rdw4r3_h4ck1ng}\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",name);
 8000678:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 800067c:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	4942      	ldr	r1, [pc, #264]	; (8000790 <main+0x620>)
 8000686:	4618      	mov	r0, r3
 8000688:	f001 ff24 	bl	80024d4 <siprintf>
	                      for (i = 0; thanku_msg[i] != '\0'; i++) {
 800068c:	2300      	movs	r3, #0
 800068e:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 8000692:	f102 0204 	add.w	r2, r2, #4
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	e022      	b.n	80006e0 <main+0x570>
	                          putchar(thanku_msg[i]);
 800069a:	f607 7308 	addw	r3, r7, #3848	; 0xf08
 800069e:	f5a3 6270 	sub.w	r2, r3, #3840	; 0xf00
 80006a2:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 80006a6:	f103 0304 	add.w	r3, r3, #4
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 feeb 	bl	800248c <putchar>
	                          fflush(stdout);
 80006b6:	4b30      	ldr	r3, [pc, #192]	; (8000778 <main+0x608>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fcd1 	bl	8002064 <fflush>
	                          HAL_Delay(10000); //delay
 80006c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80006c6:	f000 fb0b 	bl	8000ce0 <HAL_Delay>
	                      for (i = 0; thanku_msg[i] != '\0'; i++) {
 80006ca:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 80006ce:	f103 0304 	add.w	r3, r3, #4
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 80006da:	f102 0204 	add.w	r2, r2, #4
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	f607 7308 	addw	r3, r7, #3848	; 0xf08
 80006e4:	f5a3 6270 	sub.w	r2, r3, #3840	; 0xf00
 80006e8:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 80006ec:	f103 0304 	add.w	r3, r3, #4
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1cf      	bne.n	800069a <main+0x52a>
	                      }
	                      break;
 80006fa:	e03b      	b.n	8000774 <main+0x604>
	                  } else {
	                      // Repeat the question
	                      for (i = 0; yes_message[i] != '\0'; i++) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 8000702:	f102 0204 	add.w	r2, r2, #4
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	e024      	b.n	8000754 <main+0x5e4>
	                          putchar(yes_message[i]);
 800070a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 800070e:	f103 0308 	add.w	r3, r3, #8
 8000712:	f2a3 72c4 	subw	r2, r3, #1988	; 0x7c4
 8000716:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 800071a:	f103 0304 	add.w	r3, r3, #4
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f001 feb1 	bl	800248c <putchar>
	                          fflush(stdout);
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <main+0x608>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fc97 	bl	8002064 <fflush>
	                          HAL_Delay(50000); //delay
 8000736:	f24c 3050 	movw	r0, #50000	; 0xc350
 800073a:	f000 fad1 	bl	8000ce0 <HAL_Delay>
	                      for (i = 0; yes_message[i] != '\0'; i++) {
 800073e:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 8000742:	f103 0304 	add.w	r3, r3, #4
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 800074e:	f102 0204 	add.w	r2, r2, #4
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8000758:	f103 0308 	add.w	r3, r3, #8
 800075c:	f2a3 72c4 	subw	r2, r3, #1988	; 0x7c4
 8000760:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 8000764:	f103 0304 	add.w	r3, r3, #4
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1cb      	bne.n	800070a <main+0x59a>
	              while (1) {
 8000772:	e721      	b.n	80005b8 <main+0x448>
	                      }
	                  }
	              }

	              break;
 8000774:	e056      	b.n	8000824 <main+0x6b4>
 8000776:	bf00      	nop
 8000778:	2000000c 	.word	0x2000000c
 800077c:	2000008c 	.word	0x2000008c
 8000780:	08003784 	.word	0x08003784
 8000784:	0800378c 	.word	0x0800378c
 8000788:	08003790 	.word	0x08003790
 800078c:	0800379c 	.word	0x0800379c
 8000790:	080037a4 	.word	0x080037a4

	          } else if (strcmp(answer, "no\n") == 0) {
 8000794:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8000798:	f103 0308 	add.w	r3, r3, #8
 800079c:	3b34      	subs	r3, #52	; 0x34
 800079e:	4925      	ldr	r1, [pc, #148]	; (8000834 <main+0x6c4>)
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fcd3 	bl	800014c <strcmp>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	f47f ae1e 	bne.w	80003ea <main+0x27a>
	              // Print no message
	              for (i = 0; no_message[i] != '\0'; i++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 80007b4:	f102 0204 	add.w	r2, r2, #4
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	e024      	b.n	8000806 <main+0x696>
	                  putchar(no_message[i]);
 80007bc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80007c0:	f103 0308 	add.w	r3, r3, #8
 80007c4:	f5a3 62fe 	sub.w	r2, r3, #2032	; 0x7f0
 80007c8:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 80007cc:	f103 0304 	add.w	r3, r3, #4
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fe58 	bl	800248c <putchar>
	                  fflush(stdout);
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <main+0x6c8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fc3e 	bl	8002064 <fflush>
	                  HAL_Delay(50000); //delay
 80007e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007ec:	f000 fa78 	bl	8000ce0 <HAL_Delay>
	              for (i = 0; no_message[i] != '\0'; i++) {
 80007f0:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 80007f4:	f103 0304 	add.w	r3, r3, #4
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	3301      	adds	r3, #1
 80007fc:	f507 429e 	add.w	r2, r7, #20224	; 0x4f00
 8000800:	f102 0204 	add.w	r2, r2, #4
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 800080a:	f103 0308 	add.w	r3, r3, #8
 800080e:	f5a3 62fe 	sub.w	r2, r3, #2032	; 0x7f0
 8000812:	f507 439e 	add.w	r3, r7, #20224	; 0x4f00
 8000816:	f103 0304 	add.w	r3, r3, #4
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1cb      	bne.n	80007bc <main+0x64c>
  {
 8000824:	e4f1      	b.n	800020a <main+0x9a>
 8000826:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000828:	4618      	mov	r0, r3
 800082a:	f507 479e 	add.w	r7, r7, #20224	; 0x4f00
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bdb0      	pop	{r4, r5, r7, pc}
 8000834:	08003a10 	.word	0x08003a10
 8000838:	2000000c 	.word	0x2000000c

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b090      	sub	sp, #64	; 0x40
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	2228      	movs	r2, #40	; 0x28
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f001 fd39 	bl	80022c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085e:	2302      	movs	r3, #2
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000862:	2301      	movs	r3, #1
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000866:	2310      	movs	r3, #16
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800086a:	2300      	movs	r3, #0
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fcc0 	bl	80011f8 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800087e:	f000 f859 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	230f      	movs	r3, #15
 8000884:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f000 ff2e 	bl	80016fc <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008a6:	f000 f845 	bl	8000934 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3740      	adds	r7, #64	; 0x40
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_USART2_UART_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ec:	f001 f894 	bl	8001a18 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f6:	f000 f81d 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000008c 	.word	0x2000008c
 8000904:	40004400 	.word	0x40004400

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_GPIO_Init+0x28>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a07      	ldr	r2, [pc, #28]	; (8000930 <MX_GPIO_Init+0x28>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <MX_GPIO_Init+0x28>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	40021000 	.word	0x40021000

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_MspInit+0x5c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a14      	ldr	r2, [pc, #80]	; (800099c <HAL_MspInit+0x5c>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6193      	str	r3, [r2, #24]
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_MspInit+0x5c>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <HAL_MspInit+0x5c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a0e      	ldr	r2, [pc, #56]	; (800099c <HAL_MspInit+0x5c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	61d3      	str	r3, [r2, #28]
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_MspInit+0x5c>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_MspInit+0x60>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <HAL_MspInit+0x60>)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010000 	.word	0x40010000

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d12f      	bne.n	8000a24 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <HAL_UART_MspInit+0x8c>)
 80009c6:	69db      	ldr	r3, [r3, #28]
 80009c8:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <HAL_UART_MspInit+0x8c>)
 80009ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ce:	61d3      	str	r3, [r2, #28]
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_UART_MspInit+0x8c>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_UART_MspInit+0x8c>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <HAL_UART_MspInit+0x8c>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_UART_MspInit+0x8c>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009f4:	2304      	movs	r3, #4
 80009f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <HAL_UART_MspInit+0x90>)
 8000a08:	f000 fa72 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <HAL_UART_MspInit+0x90>)
 8000a20:	f000 fa66 	bl	8000ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a24:	bf00      	nop
 8000a26:	3720      	adds	r7, #32
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010800 	.word	0x40010800

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <NMI_Handler+0x4>

08000a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7e:	f000 f913 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	e00a      	b.n	8000aae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a98:	f3af 8000 	nop.w
 8000a9c:	4601      	mov	r1, r0
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	60ba      	str	r2, [r7, #8]
 8000aa4:	b2ca      	uxtb	r2, r1
 8000aa6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	dbf0      	blt.n	8000a98 <_read+0x12>
  }

  return len;
 8000ab6:	687b      	ldr	r3, [r7, #4]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	e009      	b.n	8000ae6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	60ba      	str	r2, [r7, #8]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	dbf1      	blt.n	8000ad2 <_write+0x12>
  }
  return len;
 8000aee:	687b      	ldr	r3, [r7, #4]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_close>:

int _close(int file)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <_isatty>:

int _isatty(int file)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b34:	2301      	movs	r3, #1
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b60:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <_sbrk+0x5c>)
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <_sbrk+0x60>)
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d102      	bne.n	8000b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <_sbrk+0x64>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <_sbrk+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d207      	bcs.n	8000b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b88:	f001 f9a8 	bl	8001edc <__errno>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	e009      	b.n	8000bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <_sbrk+0x64>)
 8000ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20005000 	.word	0x20005000
 8000bb8:	00000400 	.word	0x00000400
 8000bbc:	200000d4 	.word	0x200000d4
 8000bc0:	200000f0 	.word	0x200000f0

08000bc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd0:	f7ff fff8 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480b      	ldr	r0, [pc, #44]	; (8000c04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bd6:	490c      	ldr	r1, [pc, #48]	; (8000c08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bd8:	4a0c      	ldr	r2, [pc, #48]	; (8000c0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bec:	4c09      	ldr	r4, [pc, #36]	; (8000c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f001 fb3b 	bl	8002274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bfe:	f7ff fab7 	bl	8000170 <main>
  bx lr
 8000c02:	4770      	bx	lr
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c0c:	08003b7c 	.word	0x08003b7c
  ldr r2, =_sbss
 8000c10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c14:	200000ec 	.word	0x200000ec

08000c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x28>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x28>)
 8000c26:	f043 0310 	orr.w	r3, r3, #16
 8000c2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f92b 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	200f      	movs	r0, #15
 8000c34:	f000 f808 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff fe82 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40022000 	.word	0x40022000

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f935 	bl	8000ed6 <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f000 f90b 	bl	8000e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_InitTick+0x5c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_IncTick+0x1c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a03      	ldr	r2, [pc, #12]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	200000d8 	.word	0x200000d8

08000ccc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <HAL_GetTick+0x10>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	200000d8 	.word	0x200000d8

08000ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff fff0 	bl	8000ccc <HAL_GetTick>
 8000cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf8:	d005      	beq.n	8000d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_Delay+0x44>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d06:	bf00      	nop
 8000d08:	f7ff ffe0 	bl	8000ccc <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d8f7      	bhi.n	8000d08 <HAL_Delay+0x28>
  {
  }
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff90 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff49 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb0:	f7ff ff5e 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	6978      	ldr	r0, [r7, #20]
 8000ebc:	f7ff ff90 	bl	8000de0 <NVIC_EncodePriority>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5f 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ffb0 	bl	8000e44 <SysTick_Config>
 8000ee4:	4603      	mov	r3, r0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b08b      	sub	sp, #44	; 0x2c
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	e169      	b.n	80011d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f04:	2201      	movs	r2, #1
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 8158 	bne.w	80011d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	4a9a      	ldr	r2, [pc, #616]	; (8001190 <HAL_GPIO_Init+0x2a0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d05e      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f2c:	4a98      	ldr	r2, [pc, #608]	; (8001190 <HAL_GPIO_Init+0x2a0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d875      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f32:	4a98      	ldr	r2, [pc, #608]	; (8001194 <HAL_GPIO_Init+0x2a4>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d058      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f38:	4a96      	ldr	r2, [pc, #600]	; (8001194 <HAL_GPIO_Init+0x2a4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d86f      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f3e:	4a96      	ldr	r2, [pc, #600]	; (8001198 <HAL_GPIO_Init+0x2a8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d052      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f44:	4a94      	ldr	r2, [pc, #592]	; (8001198 <HAL_GPIO_Init+0x2a8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d869      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f4a:	4a94      	ldr	r2, [pc, #592]	; (800119c <HAL_GPIO_Init+0x2ac>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d04c      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f50:	4a92      	ldr	r2, [pc, #584]	; (800119c <HAL_GPIO_Init+0x2ac>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d863      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f56:	4a92      	ldr	r2, [pc, #584]	; (80011a0 <HAL_GPIO_Init+0x2b0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d046      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f5c:	4a90      	ldr	r2, [pc, #576]	; (80011a0 <HAL_GPIO_Init+0x2b0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d85d      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f62:	2b12      	cmp	r3, #18
 8000f64:	d82a      	bhi.n	8000fbc <HAL_GPIO_Init+0xcc>
 8000f66:	2b12      	cmp	r3, #18
 8000f68:	d859      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f6a:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <HAL_GPIO_Init+0x80>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000feb 	.word	0x08000feb
 8000f74:	08000fc5 	.word	0x08000fc5
 8000f78:	08000fd7 	.word	0x08000fd7
 8000f7c:	08001019 	.word	0x08001019
 8000f80:	0800101f 	.word	0x0800101f
 8000f84:	0800101f 	.word	0x0800101f
 8000f88:	0800101f 	.word	0x0800101f
 8000f8c:	0800101f 	.word	0x0800101f
 8000f90:	0800101f 	.word	0x0800101f
 8000f94:	0800101f 	.word	0x0800101f
 8000f98:	0800101f 	.word	0x0800101f
 8000f9c:	0800101f 	.word	0x0800101f
 8000fa0:	0800101f 	.word	0x0800101f
 8000fa4:	0800101f 	.word	0x0800101f
 8000fa8:	0800101f 	.word	0x0800101f
 8000fac:	0800101f 	.word	0x0800101f
 8000fb0:	0800101f 	.word	0x0800101f
 8000fb4:	08000fcd 	.word	0x08000fcd
 8000fb8:	08000fe1 	.word	0x08000fe1
 8000fbc:	4a79      	ldr	r2, [pc, #484]	; (80011a4 <HAL_GPIO_Init+0x2b4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fc2:	e02c      	b.n	800101e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	623b      	str	r3, [r7, #32]
          break;
 8000fca:	e029      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	623b      	str	r3, [r7, #32]
          break;
 8000fd4:	e024      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	3308      	adds	r3, #8
 8000fdc:	623b      	str	r3, [r7, #32]
          break;
 8000fde:	e01f      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	330c      	adds	r3, #12
 8000fe6:	623b      	str	r3, [r7, #32]
          break;
 8000fe8:	e01a      	b.n	8001020 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	623b      	str	r3, [r7, #32]
          break;
 8000ff6:	e013      	b.n	8001020 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d105      	bne.n	800100c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001000:	2308      	movs	r3, #8
 8001002:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	611a      	str	r2, [r3, #16]
          break;
 800100a:	e009      	b.n	8001020 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800100c:	2308      	movs	r3, #8
 800100e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	615a      	str	r2, [r3, #20]
          break;
 8001016:	e003      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
          break;
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x130>
          break;
 800101e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2bff      	cmp	r3, #255	; 0xff
 8001024:	d801      	bhi.n	800102a <HAL_GPIO_Init+0x13a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	e001      	b.n	800102e <HAL_GPIO_Init+0x13e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3304      	adds	r3, #4
 800102e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2bff      	cmp	r3, #255	; 0xff
 8001034:	d802      	bhi.n	800103c <HAL_GPIO_Init+0x14c>
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	e002      	b.n	8001042 <HAL_GPIO_Init+0x152>
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	3b08      	subs	r3, #8
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	210f      	movs	r1, #15
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	401a      	ands	r2, r3
 8001054:	6a39      	ldr	r1, [r7, #32]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	431a      	orrs	r2, r3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 80b1 	beq.w	80011d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001070:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <HAL_GPIO_Init+0x2b8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <HAL_GPIO_Init+0x2b8>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <HAL_GPIO_Init+0x2b8>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001088:	4a48      	ldr	r2, [pc, #288]	; (80011ac <HAL_GPIO_Init+0x2bc>)
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a40      	ldr	r2, [pc, #256]	; (80011b0 <HAL_GPIO_Init+0x2c0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_GPIO_Init+0x1ec>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3f      	ldr	r2, [pc, #252]	; (80011b4 <HAL_GPIO_Init+0x2c4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1e8>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a3e      	ldr	r2, [pc, #248]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1e4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a3d      	ldr	r2, [pc, #244]	; (80011bc <HAL_GPIO_Init+0x2cc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1e0>
 80010cc:	2303      	movs	r3, #3
 80010ce:	e006      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d0:	2304      	movs	r3, #4
 80010d2:	e004      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010dc:	2300      	movs	r3, #0
 80010de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e0:	f002 0203 	and.w	r2, r2, #3
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	4093      	lsls	r3, r2
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ee:	492f      	ldr	r1, [pc, #188]	; (80011ac <HAL_GPIO_Init+0x2bc>)
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d006      	beq.n	8001116 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	492c      	ldr	r1, [pc, #176]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	608b      	str	r3, [r1, #8]
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	43db      	mvns	r3, r3
 800111e:	4928      	ldr	r1, [pc, #160]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001120:	4013      	ands	r3, r2
 8001122:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	4922      	ldr	r1, [pc, #136]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	60cb      	str	r3, [r1, #12]
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	43db      	mvns	r3, r3
 8001146:	491e      	ldr	r1, [pc, #120]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001148:	4013      	ands	r3, r2
 800114a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	4918      	ldr	r1, [pc, #96]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	43db      	mvns	r3, r3
 800116e:	4914      	ldr	r1, [pc, #80]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001170:	4013      	ands	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d021      	beq.n	80011c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	490e      	ldr	r1, [pc, #56]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
 800118c:	e021      	b.n	80011d2 <HAL_GPIO_Init+0x2e2>
 800118e:	bf00      	nop
 8001190:	10320000 	.word	0x10320000
 8001194:	10310000 	.word	0x10310000
 8001198:	10220000 	.word	0x10220000
 800119c:	10210000 	.word	0x10210000
 80011a0:	10120000 	.word	0x10120000
 80011a4:	10110000 	.word	0x10110000
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000
 80011b0:	40010800 	.word	0x40010800
 80011b4:	40010c00 	.word	0x40010c00
 80011b8:	40011000 	.word	0x40011000
 80011bc:	40011400 	.word	0x40011400
 80011c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_GPIO_Init+0x304>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	4909      	ldr	r1, [pc, #36]	; (80011f4 <HAL_GPIO_Init+0x304>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	3301      	adds	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	fa22 f303 	lsr.w	r3, r2, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f47f ae8e 	bne.w	8000f04 <HAL_GPIO_Init+0x14>
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	372c      	adds	r7, #44	; 0x2c
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	40010400 	.word	0x40010400

080011f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e272      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8087 	beq.w	8001326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001218:	4b92      	ldr	r3, [pc, #584]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b04      	cmp	r3, #4
 8001222:	d00c      	beq.n	800123e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001224:	4b8f      	ldr	r3, [pc, #572]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b08      	cmp	r3, #8
 800122e:	d112      	bne.n	8001256 <HAL_RCC_OscConfig+0x5e>
 8001230:	4b8c      	ldr	r3, [pc, #560]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d10b      	bne.n	8001256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123e:	4b89      	ldr	r3, [pc, #548]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d06c      	beq.n	8001324 <HAL_RCC_OscConfig+0x12c>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d168      	bne.n	8001324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e24c      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x76>
 8001260:	4b80      	ldr	r3, [pc, #512]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a7f      	ldr	r2, [pc, #508]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	e02e      	b.n	80012cc <HAL_RCC_OscConfig+0xd4>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0x98>
 8001276:	4b7b      	ldr	r3, [pc, #492]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a7a      	ldr	r2, [pc, #488]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800127c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b78      	ldr	r3, [pc, #480]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a77      	ldr	r2, [pc, #476]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e01d      	b.n	80012cc <HAL_RCC_OscConfig+0xd4>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0xbc>
 800129a:	4b72      	ldr	r3, [pc, #456]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a71      	ldr	r2, [pc, #452]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b6f      	ldr	r3, [pc, #444]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a6e      	ldr	r2, [pc, #440]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e00b      	b.n	80012cc <HAL_RCC_OscConfig+0xd4>
 80012b4:	4b6b      	ldr	r3, [pc, #428]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a6a      	ldr	r2, [pc, #424]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b68      	ldr	r3, [pc, #416]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a67      	ldr	r2, [pc, #412]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d013      	beq.n	80012fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fcfa 	bl	8000ccc <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fcf6 	bl	8000ccc <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e200      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b5d      	ldr	r3, [pc, #372]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0xe4>
 80012fa:	e014      	b.n	8001326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fce6 	bl	8000ccc <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fce2 	bl	8000ccc <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e1ec      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	4b53      	ldr	r3, [pc, #332]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x10c>
 8001322:	e000      	b.n	8001326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d063      	beq.n	80013fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001332:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800133e:	4b49      	ldr	r3, [pc, #292]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b08      	cmp	r3, #8
 8001348:	d11c      	bne.n	8001384 <HAL_RCC_OscConfig+0x18c>
 800134a:	4b46      	ldr	r3, [pc, #280]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d116      	bne.n	8001384 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	4b43      	ldr	r3, [pc, #268]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_RCC_OscConfig+0x176>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d001      	beq.n	800136e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e1c0      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136e:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	4939      	ldr	r1, [pc, #228]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	e03a      	b.n	80013fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d020      	beq.n	80013ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138c:	4b36      	ldr	r3, [pc, #216]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fc9b 	bl	8000ccc <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff fc97 	bl	8000ccc <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e1a1      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b8:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4927      	ldr	r1, [pc, #156]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
 80013cc:	e015      	b.n	80013fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ce:	4b26      	ldr	r3, [pc, #152]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc7a 	bl	8000ccc <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013dc:	f7ff fc76 	bl	8000ccc <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e180      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d03a      	beq.n	800147c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d019      	beq.n	8001442 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <HAL_RCC_OscConfig+0x274>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001414:	f7ff fc5a 	bl	8000ccc <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141c:	f7ff fc56 	bl	8000ccc <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e160      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800143a:	2001      	movs	r0, #1
 800143c:	f000 face 	bl	80019dc <RCC_Delay>
 8001440:	e01c      	b.n	800147c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_RCC_OscConfig+0x274>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001448:	f7ff fc40 	bl	8000ccc <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144e:	e00f      	b.n	8001470 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff fc3c 	bl	8000ccc <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d908      	bls.n	8001470 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e146      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	42420000 	.word	0x42420000
 800146c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	4b92      	ldr	r3, [pc, #584]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e9      	bne.n	8001450 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80a6 	beq.w	80015d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148e:	4b8b      	ldr	r3, [pc, #556]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10d      	bne.n	80014b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b88      	ldr	r3, [pc, #544]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a87      	ldr	r2, [pc, #540]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b85      	ldr	r3, [pc, #532]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b2:	2301      	movs	r3, #1
 80014b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b6:	4b82      	ldr	r3, [pc, #520]	; (80016c0 <HAL_RCC_OscConfig+0x4c8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d118      	bne.n	80014f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c2:	4b7f      	ldr	r3, [pc, #508]	; (80016c0 <HAL_RCC_OscConfig+0x4c8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a7e      	ldr	r2, [pc, #504]	; (80016c0 <HAL_RCC_OscConfig+0x4c8>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fbfd 	bl	8000ccc <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d6:	f7ff fbf9 	bl	8000ccc <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b64      	cmp	r3, #100	; 0x64
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e103      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	4b75      	ldr	r3, [pc, #468]	; (80016c0 <HAL_RCC_OscConfig+0x4c8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d106      	bne.n	800150a <HAL_RCC_OscConfig+0x312>
 80014fc:	4b6f      	ldr	r3, [pc, #444]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	4a6e      	ldr	r2, [pc, #440]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6213      	str	r3, [r2, #32]
 8001508:	e02d      	b.n	8001566 <HAL_RCC_OscConfig+0x36e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0x334>
 8001512:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4a69      	ldr	r2, [pc, #420]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	6213      	str	r3, [r2, #32]
 800151e:	4b67      	ldr	r3, [pc, #412]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4a66      	ldr	r2, [pc, #408]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001524:	f023 0304 	bic.w	r3, r3, #4
 8001528:	6213      	str	r3, [r2, #32]
 800152a:	e01c      	b.n	8001566 <HAL_RCC_OscConfig+0x36e>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b05      	cmp	r3, #5
 8001532:	d10c      	bne.n	800154e <HAL_RCC_OscConfig+0x356>
 8001534:	4b61      	ldr	r3, [pc, #388]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4a60      	ldr	r2, [pc, #384]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6213      	str	r3, [r2, #32]
 8001540:	4b5e      	ldr	r3, [pc, #376]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4a5d      	ldr	r2, [pc, #372]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6213      	str	r3, [r2, #32]
 800154c:	e00b      	b.n	8001566 <HAL_RCC_OscConfig+0x36e>
 800154e:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a5a      	ldr	r2, [pc, #360]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	4b58      	ldr	r3, [pc, #352]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4a57      	ldr	r2, [pc, #348]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001560:	f023 0304 	bic.w	r3, r3, #4
 8001564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d015      	beq.n	800159a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fbad 	bl	8000ccc <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff fba9 	bl	8000ccc <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e0b1      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158c:	4b4b      	ldr	r3, [pc, #300]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0ee      	beq.n	8001576 <HAL_RCC_OscConfig+0x37e>
 8001598:	e014      	b.n	80015c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff fb97 	bl	8000ccc <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a0:	e00a      	b.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7ff fb93 	bl	8000ccc <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e09b      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b8:	4b40      	ldr	r3, [pc, #256]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1ee      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d105      	bne.n	80015d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ca:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a3b      	ldr	r2, [pc, #236]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8087 	beq.w	80016ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e0:	4b36      	ldr	r3, [pc, #216]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d061      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d146      	bne.n	8001682 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <HAL_RCC_OscConfig+0x4cc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fb67 	bl	8000ccc <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001602:	f7ff fb63 	bl	8000ccc <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e06d      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001614:	4b29      	ldr	r3, [pc, #164]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d108      	bne.n	800163c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800162a:	4b24      	ldr	r3, [pc, #144]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	4921      	ldr	r1, [pc, #132]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a19      	ldr	r1, [r3, #32]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	430b      	orrs	r3, r1
 800164e:	491b      	ldr	r1, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x4cc>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fb37 	bl	8000ccc <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff fb33 	bl	8000ccc <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e03d      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x46a>
 8001680:	e035      	b.n	80016ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_RCC_OscConfig+0x4cc>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb20 	bl	8000ccc <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb1c 	bl	8000ccc <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e026      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x498>
 80016ae:	e01e      	b.n	80016ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d107      	bne.n	80016c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e019      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40007000 	.word	0x40007000
 80016c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_RCC_OscConfig+0x500>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d001      	beq.n	80016ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40021000 	.word	0x40021000

080016fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0d0      	b.n	80018b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001710:	4b6a      	ldr	r3, [pc, #424]	; (80018bc <HAL_RCC_ClockConfig+0x1c0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d910      	bls.n	8001740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b67      	ldr	r3, [pc, #412]	; (80018bc <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 0207 	bic.w	r2, r3, #7
 8001726:	4965      	ldr	r1, [pc, #404]	; (80018bc <HAL_RCC_ClockConfig+0x1c0>)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	4313      	orrs	r3, r2
 800172c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800172e:	4b63      	ldr	r3, [pc, #396]	; (80018bc <HAL_RCC_ClockConfig+0x1c0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d001      	beq.n	8001740 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0b8      	b.n	80018b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d020      	beq.n	800178e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001758:	4b59      	ldr	r3, [pc, #356]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4a58      	ldr	r2, [pc, #352]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001762:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001770:	4b53      	ldr	r3, [pc, #332]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a52      	ldr	r2, [pc, #328]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800177a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800177c:	4b50      	ldr	r3, [pc, #320]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	494d      	ldr	r1, [pc, #308]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d040      	beq.n	800181c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d107      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a2:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d115      	bne.n	80017da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e07f      	b.n	80018b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ba:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d109      	bne.n	80017da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e073      	b.n	80018b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	4b3d      	ldr	r3, [pc, #244]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e06b      	b.n	80018b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017da:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f023 0203 	bic.w	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4936      	ldr	r1, [pc, #216]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ec:	f7ff fa6e 	bl	8000ccc <HAL_GetTick>
 80017f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f2:	e00a      	b.n	800180a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f4:	f7ff fa6a 	bl	8000ccc <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e053      	b.n	80018b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 020c 	and.w	r2, r3, #12
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	429a      	cmp	r2, r3
 800181a:	d1eb      	bne.n	80017f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <HAL_RCC_ClockConfig+0x1c0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d210      	bcs.n	800184c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b24      	ldr	r3, [pc, #144]	; (80018bc <HAL_RCC_ClockConfig+0x1c0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 0207 	bic.w	r2, r3, #7
 8001832:	4922      	ldr	r1, [pc, #136]	; (80018bc <HAL_RCC_ClockConfig+0x1c0>)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HAL_RCC_ClockConfig+0x1c0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d001      	beq.n	800184c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e032      	b.n	80018b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d008      	beq.n	800186a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4916      	ldr	r1, [pc, #88]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d009      	beq.n	800188a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	490e      	ldr	r1, [pc, #56]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800188a:	f000 f821 	bl	80018d0 <HAL_RCC_GetSysClockFreq>
 800188e:	4602      	mov	r2, r0
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	490a      	ldr	r1, [pc, #40]	; (80018c4 <HAL_RCC_ClockConfig+0x1c8>)
 800189c:	5ccb      	ldrb	r3, [r1, r3]
 800189e:	fa22 f303 	lsr.w	r3, r2, r3
 80018a2:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <HAL_RCC_ClockConfig+0x1cc>)
 80018a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_RCC_ClockConfig+0x1d0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f9cc 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40022000 	.word	0x40022000
 80018c0:	40021000 	.word	0x40021000
 80018c4:	08003ab0 	.word	0x08003ab0
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000004 	.word	0x20000004

080018d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <HAL_RCC_GetSysClockFreq+0x94>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d002      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x30>
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_GetSysClockFreq+0x36>
 80018fe:	e027      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_RCC_GetSysClockFreq+0x98>)
 8001902:	613b      	str	r3, [r7, #16]
      break;
 8001904:	e027      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	0c9b      	lsrs	r3, r3, #18
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	4a17      	ldr	r2, [pc, #92]	; (800196c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d010      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_RCC_GetSysClockFreq+0x94>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	0c5b      	lsrs	r3, r3, #17
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	4a11      	ldr	r2, [pc, #68]	; (8001970 <HAL_RCC_GetSysClockFreq+0xa0>)
 800192a:	5cd3      	ldrb	r3, [r2, r3]
 800192c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <HAL_RCC_GetSysClockFreq+0x98>)
 8001932:	fb03 f202 	mul.w	r2, r3, r2
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e004      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001944:	fb02 f303 	mul.w	r3, r2, r3
 8001948:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	613b      	str	r3, [r7, #16]
      break;
 800194e:	e002      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_RCC_GetSysClockFreq+0x98>)
 8001952:	613b      	str	r3, [r7, #16]
      break;
 8001954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001956:	693b      	ldr	r3, [r7, #16]
}
 8001958:	4618      	mov	r0, r3
 800195a:	371c      	adds	r7, #28
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	007a1200 	.word	0x007a1200
 800196c:	08003ac8 	.word	0x08003ac8
 8001970:	08003ad8 	.word	0x08003ad8
 8001974:	003d0900 	.word	0x003d0900

08001978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800197c:	4b02      	ldr	r3, [pc, #8]	; (8001988 <HAL_RCC_GetHCLKFreq+0x10>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	20000000 	.word	0x20000000

0800198c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001990:	f7ff fff2 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	4903      	ldr	r1, [pc, #12]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a2:	5ccb      	ldrb	r3, [r1, r3]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000
 80019b0:	08003ac0 	.word	0x08003ac0

080019b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019b8:	f7ff ffde 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 80019bc:	4602      	mov	r2, r0
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0adb      	lsrs	r3, r3, #11
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	4903      	ldr	r1, [pc, #12]	; (80019d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ca:	5ccb      	ldrb	r3, [r1, r3]
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	08003ac0 	.word	0x08003ac0

080019dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <RCC_Delay+0x34>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <RCC_Delay+0x38>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	0a5b      	lsrs	r3, r3, #9
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019f8:	bf00      	nop
  }
  while (Delay --);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	60fa      	str	r2, [r7, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f9      	bne.n	80019f8 <RCC_Delay+0x1c>
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000000 	.word	0x20000000
 8001a14:	10624dd3 	.word	0x10624dd3

08001a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e042      	b.n	8001ab0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7fe ffb0 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2224      	movs	r2, #36	; 0x24
 8001a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f9af 	bl	8001dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	d16d      	bne.n	8001bb4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <HAL_UART_Transmit+0x2c>
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e066      	b.n	8001bb6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2221      	movs	r2, #33	; 0x21
 8001af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001af6:	f7ff f8e9 	bl	8000ccc <HAL_GetTick>
 8001afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	88fa      	ldrh	r2, [r7, #6]
 8001b00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	88fa      	ldrh	r2, [r7, #6]
 8001b06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b10:	d108      	bne.n	8001b24 <HAL_UART_Transmit+0x6c>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d104      	bne.n	8001b24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	e003      	b.n	8001b2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b2c:	e02a      	b.n	8001b84 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2200      	movs	r2, #0
 8001b36:	2180      	movs	r1, #128	; 0x80
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 f8d2 	bl	8001ce2 <UART_WaitOnFlagUntilTimeout>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e036      	b.n	8001bb6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10b      	bne.n	8001b66 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	3302      	adds	r3, #2
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	e007      	b.n	8001b76 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	3301      	adds	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1cf      	bne.n	8001b2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2200      	movs	r2, #0
 8001b96:	2140      	movs	r1, #64	; 0x40
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f8a2 	bl	8001ce2 <UART_WaitOnFlagUntilTimeout>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e006      	b.n	8001bb6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e000      	b.n	8001bb6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001bb4:	2302      	movs	r3, #2
  }
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b08a      	sub	sp, #40	; 0x28
 8001bc2:	af02      	add	r7, sp, #8
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	d17c      	bne.n	8001cd8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <HAL_UART_Receive+0x2c>
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e075      	b.n	8001cda <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2222      	movs	r2, #34	; 0x22
 8001bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c02:	f7ff f863 	bl	8000ccc <HAL_GetTick>
 8001c06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	88fa      	ldrh	r2, [r7, #6]
 8001c0c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	88fa      	ldrh	r2, [r7, #6]
 8001c12:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c1c:	d108      	bne.n	8001c30 <HAL_UART_Receive+0x72>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d104      	bne.n	8001c30 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	e003      	b.n	8001c38 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001c38:	e043      	b.n	8001cc2 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2200      	movs	r2, #0
 8001c42:	2120      	movs	r1, #32
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 f84c 	bl	8001ce2 <UART_WaitOnFlagUntilTimeout>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e042      	b.n	8001cda <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10c      	bne.n	8001c74 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	3302      	adds	r3, #2
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	e01f      	b.n	8001cb4 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7c:	d007      	beq.n	8001c8e <HAL_UART_Receive+0xd0>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10a      	bne.n	8001c9c <HAL_UART_Receive+0xde>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	e008      	b.n	8001cae <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1b6      	bne.n	8001c3a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e000      	b.n	8001cda <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cd8:	2302      	movs	r3, #2
  }
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b090      	sub	sp, #64	; 0x40
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cf2:	e050      	b.n	8001d96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfa:	d04c      	beq.n	8001d96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d02:	f7fe ffe3 	bl	8000ccc <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d241      	bcs.n	8001d96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	330c      	adds	r3, #12
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	e853 3f00 	ldrex	r3, [r3]
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	330c      	adds	r3, #12
 8001d30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d32:	637a      	str	r2, [r7, #52]	; 0x34
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d3a:	e841 2300 	strex	r3, r2, [r1]
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1e5      	bne.n	8001d12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3314      	adds	r3, #20
 8001d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	e853 3f00 	ldrex	r3, [r3]
 8001d54:	613b      	str	r3, [r7, #16]
   return(result);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3314      	adds	r3, #20
 8001d64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d66:	623a      	str	r2, [r7, #32]
 8001d68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d6a:	69f9      	ldr	r1, [r7, #28]
 8001d6c:	6a3a      	ldr	r2, [r7, #32]
 8001d6e:	e841 2300 	strex	r3, r2, [r1]
 8001d72:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1e5      	bne.n	8001d46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e00f      	b.n	8001db6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	bf0c      	ite	eq
 8001da6:	2301      	moveq	r3, #1
 8001da8:	2300      	movne	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d09f      	beq.n	8001cf4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3740      	adds	r7, #64	; 0x40
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001dfa:	f023 030c 	bic.w	r3, r3, #12
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a2c      	ldr	r2, [pc, #176]	; (8001ed4 <UART_SetConfig+0x114>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d103      	bne.n	8001e30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e28:	f7ff fdc4 	bl	80019b4 <HAL_RCC_GetPCLK2Freq>
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	e002      	b.n	8001e36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e30:	f7ff fdac 	bl	800198c <HAL_RCC_GetPCLK1Freq>
 8001e34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009a      	lsls	r2, r3, #2
 8001e40:	441a      	add	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <UART_SetConfig+0x118>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	0119      	lsls	r1, r3, #4
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009a      	lsls	r2, r3, #2
 8001e60:	441a      	add	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <UART_SetConfig+0x118>)
 8001e6e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	2064      	movs	r0, #100	; 0x64
 8001e76:	fb00 f303 	mul.w	r3, r0, r3
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	3332      	adds	r3, #50	; 0x32
 8001e80:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <UART_SetConfig+0x118>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e8c:	4419      	add	r1, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	009a      	lsls	r2, r3, #2
 8001e98:	441a      	add	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <UART_SetConfig+0x118>)
 8001ea6:	fba3 0302 	umull	r0, r3, r3, r2
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2064      	movs	r0, #100	; 0x64
 8001eae:	fb00 f303 	mul.w	r3, r0, r3
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	3332      	adds	r3, #50	; 0x32
 8001eb8:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <UART_SetConfig+0x118>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	f003 020f 	and.w	r2, r3, #15
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	440a      	add	r2, r1
 8001eca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40013800 	.word	0x40013800
 8001ed8:	51eb851f 	.word	0x51eb851f

08001edc <__errno>:
 8001edc:	4b01      	ldr	r3, [pc, #4]	; (8001ee4 <__errno+0x8>)
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	2000000c 	.word	0x2000000c

08001ee8 <__sflush_r>:
 8001ee8:	898a      	ldrh	r2, [r1, #12]
 8001eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eec:	4605      	mov	r5, r0
 8001eee:	0710      	lsls	r0, r2, #28
 8001ef0:	460c      	mov	r4, r1
 8001ef2:	d457      	bmi.n	8001fa4 <__sflush_r+0xbc>
 8001ef4:	684b      	ldr	r3, [r1, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	dc04      	bgt.n	8001f04 <__sflush_r+0x1c>
 8001efa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	dc01      	bgt.n	8001f04 <__sflush_r+0x1c>
 8001f00:	2000      	movs	r0, #0
 8001f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f06:	2e00      	cmp	r6, #0
 8001f08:	d0fa      	beq.n	8001f00 <__sflush_r+0x18>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f10:	682f      	ldr	r7, [r5, #0]
 8001f12:	602b      	str	r3, [r5, #0]
 8001f14:	d032      	beq.n	8001f7c <__sflush_r+0x94>
 8001f16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f18:	89a3      	ldrh	r3, [r4, #12]
 8001f1a:	075a      	lsls	r2, r3, #29
 8001f1c:	d505      	bpl.n	8001f2a <__sflush_r+0x42>
 8001f1e:	6863      	ldr	r3, [r4, #4]
 8001f20:	1ac0      	subs	r0, r0, r3
 8001f22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f24:	b10b      	cbz	r3, 8001f2a <__sflush_r+0x42>
 8001f26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f28:	1ac0      	subs	r0, r0, r3
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f30:	4628      	mov	r0, r5
 8001f32:	6a21      	ldr	r1, [r4, #32]
 8001f34:	47b0      	blx	r6
 8001f36:	1c43      	adds	r3, r0, #1
 8001f38:	89a3      	ldrh	r3, [r4, #12]
 8001f3a:	d106      	bne.n	8001f4a <__sflush_r+0x62>
 8001f3c:	6829      	ldr	r1, [r5, #0]
 8001f3e:	291d      	cmp	r1, #29
 8001f40:	d82c      	bhi.n	8001f9c <__sflush_r+0xb4>
 8001f42:	4a29      	ldr	r2, [pc, #164]	; (8001fe8 <__sflush_r+0x100>)
 8001f44:	40ca      	lsrs	r2, r1
 8001f46:	07d6      	lsls	r6, r2, #31
 8001f48:	d528      	bpl.n	8001f9c <__sflush_r+0xb4>
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	6062      	str	r2, [r4, #4]
 8001f4e:	6922      	ldr	r2, [r4, #16]
 8001f50:	04d9      	lsls	r1, r3, #19
 8001f52:	6022      	str	r2, [r4, #0]
 8001f54:	d504      	bpl.n	8001f60 <__sflush_r+0x78>
 8001f56:	1c42      	adds	r2, r0, #1
 8001f58:	d101      	bne.n	8001f5e <__sflush_r+0x76>
 8001f5a:	682b      	ldr	r3, [r5, #0]
 8001f5c:	b903      	cbnz	r3, 8001f60 <__sflush_r+0x78>
 8001f5e:	6560      	str	r0, [r4, #84]	; 0x54
 8001f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f62:	602f      	str	r7, [r5, #0]
 8001f64:	2900      	cmp	r1, #0
 8001f66:	d0cb      	beq.n	8001f00 <__sflush_r+0x18>
 8001f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f6c:	4299      	cmp	r1, r3
 8001f6e:	d002      	beq.n	8001f76 <__sflush_r+0x8e>
 8001f70:	4628      	mov	r0, r5
 8001f72:	f000 f9af 	bl	80022d4 <_free_r>
 8001f76:	2000      	movs	r0, #0
 8001f78:	6360      	str	r0, [r4, #52]	; 0x34
 8001f7a:	e7c2      	b.n	8001f02 <__sflush_r+0x1a>
 8001f7c:	6a21      	ldr	r1, [r4, #32]
 8001f7e:	2301      	movs	r3, #1
 8001f80:	4628      	mov	r0, r5
 8001f82:	47b0      	blx	r6
 8001f84:	1c41      	adds	r1, r0, #1
 8001f86:	d1c7      	bne.n	8001f18 <__sflush_r+0x30>
 8001f88:	682b      	ldr	r3, [r5, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0c4      	beq.n	8001f18 <__sflush_r+0x30>
 8001f8e:	2b1d      	cmp	r3, #29
 8001f90:	d001      	beq.n	8001f96 <__sflush_r+0xae>
 8001f92:	2b16      	cmp	r3, #22
 8001f94:	d101      	bne.n	8001f9a <__sflush_r+0xb2>
 8001f96:	602f      	str	r7, [r5, #0]
 8001f98:	e7b2      	b.n	8001f00 <__sflush_r+0x18>
 8001f9a:	89a3      	ldrh	r3, [r4, #12]
 8001f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fa0:	81a3      	strh	r3, [r4, #12]
 8001fa2:	e7ae      	b.n	8001f02 <__sflush_r+0x1a>
 8001fa4:	690f      	ldr	r7, [r1, #16]
 8001fa6:	2f00      	cmp	r7, #0
 8001fa8:	d0aa      	beq.n	8001f00 <__sflush_r+0x18>
 8001faa:	0793      	lsls	r3, r2, #30
 8001fac:	bf18      	it	ne
 8001fae:	2300      	movne	r3, #0
 8001fb0:	680e      	ldr	r6, [r1, #0]
 8001fb2:	bf08      	it	eq
 8001fb4:	694b      	ldreq	r3, [r1, #20]
 8001fb6:	1bf6      	subs	r6, r6, r7
 8001fb8:	600f      	str	r7, [r1, #0]
 8001fba:	608b      	str	r3, [r1, #8]
 8001fbc:	2e00      	cmp	r6, #0
 8001fbe:	dd9f      	ble.n	8001f00 <__sflush_r+0x18>
 8001fc0:	4633      	mov	r3, r6
 8001fc2:	463a      	mov	r2, r7
 8001fc4:	4628      	mov	r0, r5
 8001fc6:	6a21      	ldr	r1, [r4, #32]
 8001fc8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001fcc:	47e0      	blx	ip
 8001fce:	2800      	cmp	r0, #0
 8001fd0:	dc06      	bgt.n	8001fe0 <__sflush_r+0xf8>
 8001fd2:	89a3      	ldrh	r3, [r4, #12]
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fdc:	81a3      	strh	r3, [r4, #12]
 8001fde:	e790      	b.n	8001f02 <__sflush_r+0x1a>
 8001fe0:	4407      	add	r7, r0
 8001fe2:	1a36      	subs	r6, r6, r0
 8001fe4:	e7ea      	b.n	8001fbc <__sflush_r+0xd4>
 8001fe6:	bf00      	nop
 8001fe8:	20400001 	.word	0x20400001

08001fec <_fflush_r>:
 8001fec:	b538      	push	{r3, r4, r5, lr}
 8001fee:	690b      	ldr	r3, [r1, #16]
 8001ff0:	4605      	mov	r5, r0
 8001ff2:	460c      	mov	r4, r1
 8001ff4:	b913      	cbnz	r3, 8001ffc <_fflush_r+0x10>
 8001ff6:	2500      	movs	r5, #0
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	bd38      	pop	{r3, r4, r5, pc}
 8001ffc:	b118      	cbz	r0, 8002006 <_fflush_r+0x1a>
 8001ffe:	6983      	ldr	r3, [r0, #24]
 8002000:	b90b      	cbnz	r3, 8002006 <_fflush_r+0x1a>
 8002002:	f000 f899 	bl	8002138 <__sinit>
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <_fflush_r+0x6c>)
 8002008:	429c      	cmp	r4, r3
 800200a:	d11b      	bne.n	8002044 <_fflush_r+0x58>
 800200c:	686c      	ldr	r4, [r5, #4]
 800200e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0ef      	beq.n	8001ff6 <_fflush_r+0xa>
 8002016:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002018:	07d0      	lsls	r0, r2, #31
 800201a:	d404      	bmi.n	8002026 <_fflush_r+0x3a>
 800201c:	0599      	lsls	r1, r3, #22
 800201e:	d402      	bmi.n	8002026 <_fflush_r+0x3a>
 8002020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002022:	f000 f94c 	bl	80022be <__retarget_lock_acquire_recursive>
 8002026:	4628      	mov	r0, r5
 8002028:	4621      	mov	r1, r4
 800202a:	f7ff ff5d 	bl	8001ee8 <__sflush_r>
 800202e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002030:	4605      	mov	r5, r0
 8002032:	07da      	lsls	r2, r3, #31
 8002034:	d4e0      	bmi.n	8001ff8 <_fflush_r+0xc>
 8002036:	89a3      	ldrh	r3, [r4, #12]
 8002038:	059b      	lsls	r3, r3, #22
 800203a:	d4dd      	bmi.n	8001ff8 <_fflush_r+0xc>
 800203c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800203e:	f000 f93f 	bl	80022c0 <__retarget_lock_release_recursive>
 8002042:	e7d9      	b.n	8001ff8 <_fflush_r+0xc>
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <_fflush_r+0x70>)
 8002046:	429c      	cmp	r4, r3
 8002048:	d101      	bne.n	800204e <_fflush_r+0x62>
 800204a:	68ac      	ldr	r4, [r5, #8]
 800204c:	e7df      	b.n	800200e <_fflush_r+0x22>
 800204e:	4b04      	ldr	r3, [pc, #16]	; (8002060 <_fflush_r+0x74>)
 8002050:	429c      	cmp	r4, r3
 8002052:	bf08      	it	eq
 8002054:	68ec      	ldreq	r4, [r5, #12]
 8002056:	e7da      	b.n	800200e <_fflush_r+0x22>
 8002058:	08003afc 	.word	0x08003afc
 800205c:	08003b1c 	.word	0x08003b1c
 8002060:	08003adc 	.word	0x08003adc

08002064 <fflush>:
 8002064:	4601      	mov	r1, r0
 8002066:	b920      	cbnz	r0, 8002072 <fflush+0xe>
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <fflush+0x18>)
 800206a:	4905      	ldr	r1, [pc, #20]	; (8002080 <fflush+0x1c>)
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	f000 b8e1 	b.w	8002234 <_fwalk_reent>
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <fflush+0x20>)
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	f7ff bfb9 	b.w	8001fec <_fflush_r>
 800207a:	bf00      	nop
 800207c:	08003b3c 	.word	0x08003b3c
 8002080:	08001fed 	.word	0x08001fed
 8002084:	2000000c 	.word	0x2000000c

08002088 <std>:
 8002088:	2300      	movs	r3, #0
 800208a:	b510      	push	{r4, lr}
 800208c:	4604      	mov	r4, r0
 800208e:	e9c0 3300 	strd	r3, r3, [r0]
 8002092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002096:	6083      	str	r3, [r0, #8]
 8002098:	8181      	strh	r1, [r0, #12]
 800209a:	6643      	str	r3, [r0, #100]	; 0x64
 800209c:	81c2      	strh	r2, [r0, #14]
 800209e:	6183      	str	r3, [r0, #24]
 80020a0:	4619      	mov	r1, r3
 80020a2:	2208      	movs	r2, #8
 80020a4:	305c      	adds	r0, #92	; 0x5c
 80020a6:	f000 f90c 	bl	80022c2 <memset>
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <std+0x38>)
 80020ac:	6224      	str	r4, [r4, #32]
 80020ae:	6263      	str	r3, [r4, #36]	; 0x24
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <std+0x3c>)
 80020b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <std+0x40>)
 80020b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <std+0x44>)
 80020ba:	6323      	str	r3, [r4, #48]	; 0x30
 80020bc:	bd10      	pop	{r4, pc}
 80020be:	bf00      	nop
 80020c0:	08002515 	.word	0x08002515
 80020c4:	08002537 	.word	0x08002537
 80020c8:	0800256f 	.word	0x0800256f
 80020cc:	08002593 	.word	0x08002593

080020d0 <_cleanup_r>:
 80020d0:	4901      	ldr	r1, [pc, #4]	; (80020d8 <_cleanup_r+0x8>)
 80020d2:	f000 b8af 	b.w	8002234 <_fwalk_reent>
 80020d6:	bf00      	nop
 80020d8:	08001fed 	.word	0x08001fed

080020dc <__sfmoreglue>:
 80020dc:	2268      	movs	r2, #104	; 0x68
 80020de:	b570      	push	{r4, r5, r6, lr}
 80020e0:	1e4d      	subs	r5, r1, #1
 80020e2:	4355      	muls	r5, r2
 80020e4:	460e      	mov	r6, r1
 80020e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80020ea:	f000 f95b 	bl	80023a4 <_malloc_r>
 80020ee:	4604      	mov	r4, r0
 80020f0:	b140      	cbz	r0, 8002104 <__sfmoreglue+0x28>
 80020f2:	2100      	movs	r1, #0
 80020f4:	e9c0 1600 	strd	r1, r6, [r0]
 80020f8:	300c      	adds	r0, #12
 80020fa:	60a0      	str	r0, [r4, #8]
 80020fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002100:	f000 f8df 	bl	80022c2 <memset>
 8002104:	4620      	mov	r0, r4
 8002106:	bd70      	pop	{r4, r5, r6, pc}

08002108 <__sfp_lock_acquire>:
 8002108:	4801      	ldr	r0, [pc, #4]	; (8002110 <__sfp_lock_acquire+0x8>)
 800210a:	f000 b8d8 	b.w	80022be <__retarget_lock_acquire_recursive>
 800210e:	bf00      	nop
 8002110:	200000dd 	.word	0x200000dd

08002114 <__sfp_lock_release>:
 8002114:	4801      	ldr	r0, [pc, #4]	; (800211c <__sfp_lock_release+0x8>)
 8002116:	f000 b8d3 	b.w	80022c0 <__retarget_lock_release_recursive>
 800211a:	bf00      	nop
 800211c:	200000dd 	.word	0x200000dd

08002120 <__sinit_lock_acquire>:
 8002120:	4801      	ldr	r0, [pc, #4]	; (8002128 <__sinit_lock_acquire+0x8>)
 8002122:	f000 b8cc 	b.w	80022be <__retarget_lock_acquire_recursive>
 8002126:	bf00      	nop
 8002128:	200000de 	.word	0x200000de

0800212c <__sinit_lock_release>:
 800212c:	4801      	ldr	r0, [pc, #4]	; (8002134 <__sinit_lock_release+0x8>)
 800212e:	f000 b8c7 	b.w	80022c0 <__retarget_lock_release_recursive>
 8002132:	bf00      	nop
 8002134:	200000de 	.word	0x200000de

08002138 <__sinit>:
 8002138:	b510      	push	{r4, lr}
 800213a:	4604      	mov	r4, r0
 800213c:	f7ff fff0 	bl	8002120 <__sinit_lock_acquire>
 8002140:	69a3      	ldr	r3, [r4, #24]
 8002142:	b11b      	cbz	r3, 800214c <__sinit+0x14>
 8002144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002148:	f7ff bff0 	b.w	800212c <__sinit_lock_release>
 800214c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002150:	6523      	str	r3, [r4, #80]	; 0x50
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <__sinit+0x68>)
 8002154:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <__sinit+0x6c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	62a2      	str	r2, [r4, #40]	; 0x28
 800215a:	42a3      	cmp	r3, r4
 800215c:	bf08      	it	eq
 800215e:	2301      	moveq	r3, #1
 8002160:	4620      	mov	r0, r4
 8002162:	bf08      	it	eq
 8002164:	61a3      	streq	r3, [r4, #24]
 8002166:	f000 f81f 	bl	80021a8 <__sfp>
 800216a:	6060      	str	r0, [r4, #4]
 800216c:	4620      	mov	r0, r4
 800216e:	f000 f81b 	bl	80021a8 <__sfp>
 8002172:	60a0      	str	r0, [r4, #8]
 8002174:	4620      	mov	r0, r4
 8002176:	f000 f817 	bl	80021a8 <__sfp>
 800217a:	2200      	movs	r2, #0
 800217c:	2104      	movs	r1, #4
 800217e:	60e0      	str	r0, [r4, #12]
 8002180:	6860      	ldr	r0, [r4, #4]
 8002182:	f7ff ff81 	bl	8002088 <std>
 8002186:	2201      	movs	r2, #1
 8002188:	2109      	movs	r1, #9
 800218a:	68a0      	ldr	r0, [r4, #8]
 800218c:	f7ff ff7c 	bl	8002088 <std>
 8002190:	2202      	movs	r2, #2
 8002192:	2112      	movs	r1, #18
 8002194:	68e0      	ldr	r0, [r4, #12]
 8002196:	f7ff ff77 	bl	8002088 <std>
 800219a:	2301      	movs	r3, #1
 800219c:	61a3      	str	r3, [r4, #24]
 800219e:	e7d1      	b.n	8002144 <__sinit+0xc>
 80021a0:	08003b3c 	.word	0x08003b3c
 80021a4:	080020d1 	.word	0x080020d1

080021a8 <__sfp>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	4607      	mov	r7, r0
 80021ac:	f7ff ffac 	bl	8002108 <__sfp_lock_acquire>
 80021b0:	4b1e      	ldr	r3, [pc, #120]	; (800222c <__sfp+0x84>)
 80021b2:	681e      	ldr	r6, [r3, #0]
 80021b4:	69b3      	ldr	r3, [r6, #24]
 80021b6:	b913      	cbnz	r3, 80021be <__sfp+0x16>
 80021b8:	4630      	mov	r0, r6
 80021ba:	f7ff ffbd 	bl	8002138 <__sinit>
 80021be:	3648      	adds	r6, #72	; 0x48
 80021c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	d503      	bpl.n	80021d0 <__sfp+0x28>
 80021c8:	6833      	ldr	r3, [r6, #0]
 80021ca:	b30b      	cbz	r3, 8002210 <__sfp+0x68>
 80021cc:	6836      	ldr	r6, [r6, #0]
 80021ce:	e7f7      	b.n	80021c0 <__sfp+0x18>
 80021d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80021d4:	b9d5      	cbnz	r5, 800220c <__sfp+0x64>
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <__sfp+0x88>)
 80021d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80021dc:	60e3      	str	r3, [r4, #12]
 80021de:	6665      	str	r5, [r4, #100]	; 0x64
 80021e0:	f000 f86c 	bl	80022bc <__retarget_lock_init_recursive>
 80021e4:	f7ff ff96 	bl	8002114 <__sfp_lock_release>
 80021e8:	2208      	movs	r2, #8
 80021ea:	4629      	mov	r1, r5
 80021ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80021f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80021f4:	6025      	str	r5, [r4, #0]
 80021f6:	61a5      	str	r5, [r4, #24]
 80021f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80021fc:	f000 f861 	bl	80022c2 <memset>
 8002200:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002204:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002208:	4620      	mov	r0, r4
 800220a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800220c:	3468      	adds	r4, #104	; 0x68
 800220e:	e7d9      	b.n	80021c4 <__sfp+0x1c>
 8002210:	2104      	movs	r1, #4
 8002212:	4638      	mov	r0, r7
 8002214:	f7ff ff62 	bl	80020dc <__sfmoreglue>
 8002218:	4604      	mov	r4, r0
 800221a:	6030      	str	r0, [r6, #0]
 800221c:	2800      	cmp	r0, #0
 800221e:	d1d5      	bne.n	80021cc <__sfp+0x24>
 8002220:	f7ff ff78 	bl	8002114 <__sfp_lock_release>
 8002224:	230c      	movs	r3, #12
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	e7ee      	b.n	8002208 <__sfp+0x60>
 800222a:	bf00      	nop
 800222c:	08003b3c 	.word	0x08003b3c
 8002230:	ffff0001 	.word	0xffff0001

08002234 <_fwalk_reent>:
 8002234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002238:	4606      	mov	r6, r0
 800223a:	4688      	mov	r8, r1
 800223c:	2700      	movs	r7, #0
 800223e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002242:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002246:	f1b9 0901 	subs.w	r9, r9, #1
 800224a:	d505      	bpl.n	8002258 <_fwalk_reent+0x24>
 800224c:	6824      	ldr	r4, [r4, #0]
 800224e:	2c00      	cmp	r4, #0
 8002250:	d1f7      	bne.n	8002242 <_fwalk_reent+0xe>
 8002252:	4638      	mov	r0, r7
 8002254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002258:	89ab      	ldrh	r3, [r5, #12]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d907      	bls.n	800226e <_fwalk_reent+0x3a>
 800225e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002262:	3301      	adds	r3, #1
 8002264:	d003      	beq.n	800226e <_fwalk_reent+0x3a>
 8002266:	4629      	mov	r1, r5
 8002268:	4630      	mov	r0, r6
 800226a:	47c0      	blx	r8
 800226c:	4307      	orrs	r7, r0
 800226e:	3568      	adds	r5, #104	; 0x68
 8002270:	e7e9      	b.n	8002246 <_fwalk_reent+0x12>
	...

08002274 <__libc_init_array>:
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	2600      	movs	r6, #0
 8002278:	4d0c      	ldr	r5, [pc, #48]	; (80022ac <__libc_init_array+0x38>)
 800227a:	4c0d      	ldr	r4, [pc, #52]	; (80022b0 <__libc_init_array+0x3c>)
 800227c:	1b64      	subs	r4, r4, r5
 800227e:	10a4      	asrs	r4, r4, #2
 8002280:	42a6      	cmp	r6, r4
 8002282:	d109      	bne.n	8002298 <__libc_init_array+0x24>
 8002284:	f000 fef0 	bl	8003068 <_init>
 8002288:	2600      	movs	r6, #0
 800228a:	4d0a      	ldr	r5, [pc, #40]	; (80022b4 <__libc_init_array+0x40>)
 800228c:	4c0a      	ldr	r4, [pc, #40]	; (80022b8 <__libc_init_array+0x44>)
 800228e:	1b64      	subs	r4, r4, r5
 8002290:	10a4      	asrs	r4, r4, #2
 8002292:	42a6      	cmp	r6, r4
 8002294:	d105      	bne.n	80022a2 <__libc_init_array+0x2e>
 8002296:	bd70      	pop	{r4, r5, r6, pc}
 8002298:	f855 3b04 	ldr.w	r3, [r5], #4
 800229c:	4798      	blx	r3
 800229e:	3601      	adds	r6, #1
 80022a0:	e7ee      	b.n	8002280 <__libc_init_array+0xc>
 80022a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022a6:	4798      	blx	r3
 80022a8:	3601      	adds	r6, #1
 80022aa:	e7f2      	b.n	8002292 <__libc_init_array+0x1e>
 80022ac:	08003b74 	.word	0x08003b74
 80022b0:	08003b74 	.word	0x08003b74
 80022b4:	08003b74 	.word	0x08003b74
 80022b8:	08003b78 	.word	0x08003b78

080022bc <__retarget_lock_init_recursive>:
 80022bc:	4770      	bx	lr

080022be <__retarget_lock_acquire_recursive>:
 80022be:	4770      	bx	lr

080022c0 <__retarget_lock_release_recursive>:
 80022c0:	4770      	bx	lr

080022c2 <memset>:
 80022c2:	4603      	mov	r3, r0
 80022c4:	4402      	add	r2, r0
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d100      	bne.n	80022cc <memset+0xa>
 80022ca:	4770      	bx	lr
 80022cc:	f803 1b01 	strb.w	r1, [r3], #1
 80022d0:	e7f9      	b.n	80022c6 <memset+0x4>
	...

080022d4 <_free_r>:
 80022d4:	b538      	push	{r3, r4, r5, lr}
 80022d6:	4605      	mov	r5, r0
 80022d8:	2900      	cmp	r1, #0
 80022da:	d040      	beq.n	800235e <_free_r+0x8a>
 80022dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022e0:	1f0c      	subs	r4, r1, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bfb8      	it	lt
 80022e6:	18e4      	addlt	r4, r4, r3
 80022e8:	f000 f9b0 	bl	800264c <__malloc_lock>
 80022ec:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <_free_r+0x8c>)
 80022ee:	6813      	ldr	r3, [r2, #0]
 80022f0:	b933      	cbnz	r3, 8002300 <_free_r+0x2c>
 80022f2:	6063      	str	r3, [r4, #4]
 80022f4:	6014      	str	r4, [r2, #0]
 80022f6:	4628      	mov	r0, r5
 80022f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022fc:	f000 b9ac 	b.w	8002658 <__malloc_unlock>
 8002300:	42a3      	cmp	r3, r4
 8002302:	d908      	bls.n	8002316 <_free_r+0x42>
 8002304:	6820      	ldr	r0, [r4, #0]
 8002306:	1821      	adds	r1, r4, r0
 8002308:	428b      	cmp	r3, r1
 800230a:	bf01      	itttt	eq
 800230c:	6819      	ldreq	r1, [r3, #0]
 800230e:	685b      	ldreq	r3, [r3, #4]
 8002310:	1809      	addeq	r1, r1, r0
 8002312:	6021      	streq	r1, [r4, #0]
 8002314:	e7ed      	b.n	80022f2 <_free_r+0x1e>
 8002316:	461a      	mov	r2, r3
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	b10b      	cbz	r3, 8002320 <_free_r+0x4c>
 800231c:	42a3      	cmp	r3, r4
 800231e:	d9fa      	bls.n	8002316 <_free_r+0x42>
 8002320:	6811      	ldr	r1, [r2, #0]
 8002322:	1850      	adds	r0, r2, r1
 8002324:	42a0      	cmp	r0, r4
 8002326:	d10b      	bne.n	8002340 <_free_r+0x6c>
 8002328:	6820      	ldr	r0, [r4, #0]
 800232a:	4401      	add	r1, r0
 800232c:	1850      	adds	r0, r2, r1
 800232e:	4283      	cmp	r3, r0
 8002330:	6011      	str	r1, [r2, #0]
 8002332:	d1e0      	bne.n	80022f6 <_free_r+0x22>
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4401      	add	r1, r0
 800233a:	6011      	str	r1, [r2, #0]
 800233c:	6053      	str	r3, [r2, #4]
 800233e:	e7da      	b.n	80022f6 <_free_r+0x22>
 8002340:	d902      	bls.n	8002348 <_free_r+0x74>
 8002342:	230c      	movs	r3, #12
 8002344:	602b      	str	r3, [r5, #0]
 8002346:	e7d6      	b.n	80022f6 <_free_r+0x22>
 8002348:	6820      	ldr	r0, [r4, #0]
 800234a:	1821      	adds	r1, r4, r0
 800234c:	428b      	cmp	r3, r1
 800234e:	bf01      	itttt	eq
 8002350:	6819      	ldreq	r1, [r3, #0]
 8002352:	685b      	ldreq	r3, [r3, #4]
 8002354:	1809      	addeq	r1, r1, r0
 8002356:	6021      	streq	r1, [r4, #0]
 8002358:	6063      	str	r3, [r4, #4]
 800235a:	6054      	str	r4, [r2, #4]
 800235c:	e7cb      	b.n	80022f6 <_free_r+0x22>
 800235e:	bd38      	pop	{r3, r4, r5, pc}
 8002360:	200000e0 	.word	0x200000e0

08002364 <sbrk_aligned>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	4e0e      	ldr	r6, [pc, #56]	; (80023a0 <sbrk_aligned+0x3c>)
 8002368:	460c      	mov	r4, r1
 800236a:	6831      	ldr	r1, [r6, #0]
 800236c:	4605      	mov	r5, r0
 800236e:	b911      	cbnz	r1, 8002376 <sbrk_aligned+0x12>
 8002370:	f000 f8a0 	bl	80024b4 <_sbrk_r>
 8002374:	6030      	str	r0, [r6, #0]
 8002376:	4621      	mov	r1, r4
 8002378:	4628      	mov	r0, r5
 800237a:	f000 f89b 	bl	80024b4 <_sbrk_r>
 800237e:	1c43      	adds	r3, r0, #1
 8002380:	d00a      	beq.n	8002398 <sbrk_aligned+0x34>
 8002382:	1cc4      	adds	r4, r0, #3
 8002384:	f024 0403 	bic.w	r4, r4, #3
 8002388:	42a0      	cmp	r0, r4
 800238a:	d007      	beq.n	800239c <sbrk_aligned+0x38>
 800238c:	1a21      	subs	r1, r4, r0
 800238e:	4628      	mov	r0, r5
 8002390:	f000 f890 	bl	80024b4 <_sbrk_r>
 8002394:	3001      	adds	r0, #1
 8002396:	d101      	bne.n	800239c <sbrk_aligned+0x38>
 8002398:	f04f 34ff 	mov.w	r4, #4294967295
 800239c:	4620      	mov	r0, r4
 800239e:	bd70      	pop	{r4, r5, r6, pc}
 80023a0:	200000e4 	.word	0x200000e4

080023a4 <_malloc_r>:
 80023a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023a8:	1ccd      	adds	r5, r1, #3
 80023aa:	f025 0503 	bic.w	r5, r5, #3
 80023ae:	3508      	adds	r5, #8
 80023b0:	2d0c      	cmp	r5, #12
 80023b2:	bf38      	it	cc
 80023b4:	250c      	movcc	r5, #12
 80023b6:	2d00      	cmp	r5, #0
 80023b8:	4607      	mov	r7, r0
 80023ba:	db01      	blt.n	80023c0 <_malloc_r+0x1c>
 80023bc:	42a9      	cmp	r1, r5
 80023be:	d905      	bls.n	80023cc <_malloc_r+0x28>
 80023c0:	230c      	movs	r3, #12
 80023c2:	2600      	movs	r6, #0
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	4630      	mov	r0, r6
 80023c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023cc:	4e2e      	ldr	r6, [pc, #184]	; (8002488 <_malloc_r+0xe4>)
 80023ce:	f000 f93d 	bl	800264c <__malloc_lock>
 80023d2:	6833      	ldr	r3, [r6, #0]
 80023d4:	461c      	mov	r4, r3
 80023d6:	bb34      	cbnz	r4, 8002426 <_malloc_r+0x82>
 80023d8:	4629      	mov	r1, r5
 80023da:	4638      	mov	r0, r7
 80023dc:	f7ff ffc2 	bl	8002364 <sbrk_aligned>
 80023e0:	1c43      	adds	r3, r0, #1
 80023e2:	4604      	mov	r4, r0
 80023e4:	d14d      	bne.n	8002482 <_malloc_r+0xde>
 80023e6:	6834      	ldr	r4, [r6, #0]
 80023e8:	4626      	mov	r6, r4
 80023ea:	2e00      	cmp	r6, #0
 80023ec:	d140      	bne.n	8002470 <_malloc_r+0xcc>
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	4631      	mov	r1, r6
 80023f2:	4638      	mov	r0, r7
 80023f4:	eb04 0803 	add.w	r8, r4, r3
 80023f8:	f000 f85c 	bl	80024b4 <_sbrk_r>
 80023fc:	4580      	cmp	r8, r0
 80023fe:	d13a      	bne.n	8002476 <_malloc_r+0xd2>
 8002400:	6821      	ldr	r1, [r4, #0]
 8002402:	3503      	adds	r5, #3
 8002404:	1a6d      	subs	r5, r5, r1
 8002406:	f025 0503 	bic.w	r5, r5, #3
 800240a:	3508      	adds	r5, #8
 800240c:	2d0c      	cmp	r5, #12
 800240e:	bf38      	it	cc
 8002410:	250c      	movcc	r5, #12
 8002412:	4638      	mov	r0, r7
 8002414:	4629      	mov	r1, r5
 8002416:	f7ff ffa5 	bl	8002364 <sbrk_aligned>
 800241a:	3001      	adds	r0, #1
 800241c:	d02b      	beq.n	8002476 <_malloc_r+0xd2>
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	442b      	add	r3, r5
 8002422:	6023      	str	r3, [r4, #0]
 8002424:	e00e      	b.n	8002444 <_malloc_r+0xa0>
 8002426:	6822      	ldr	r2, [r4, #0]
 8002428:	1b52      	subs	r2, r2, r5
 800242a:	d41e      	bmi.n	800246a <_malloc_r+0xc6>
 800242c:	2a0b      	cmp	r2, #11
 800242e:	d916      	bls.n	800245e <_malloc_r+0xba>
 8002430:	1961      	adds	r1, r4, r5
 8002432:	42a3      	cmp	r3, r4
 8002434:	6025      	str	r5, [r4, #0]
 8002436:	bf18      	it	ne
 8002438:	6059      	strne	r1, [r3, #4]
 800243a:	6863      	ldr	r3, [r4, #4]
 800243c:	bf08      	it	eq
 800243e:	6031      	streq	r1, [r6, #0]
 8002440:	5162      	str	r2, [r4, r5]
 8002442:	604b      	str	r3, [r1, #4]
 8002444:	4638      	mov	r0, r7
 8002446:	f104 060b 	add.w	r6, r4, #11
 800244a:	f000 f905 	bl	8002658 <__malloc_unlock>
 800244e:	f026 0607 	bic.w	r6, r6, #7
 8002452:	1d23      	adds	r3, r4, #4
 8002454:	1af2      	subs	r2, r6, r3
 8002456:	d0b6      	beq.n	80023c6 <_malloc_r+0x22>
 8002458:	1b9b      	subs	r3, r3, r6
 800245a:	50a3      	str	r3, [r4, r2]
 800245c:	e7b3      	b.n	80023c6 <_malloc_r+0x22>
 800245e:	6862      	ldr	r2, [r4, #4]
 8002460:	42a3      	cmp	r3, r4
 8002462:	bf0c      	ite	eq
 8002464:	6032      	streq	r2, [r6, #0]
 8002466:	605a      	strne	r2, [r3, #4]
 8002468:	e7ec      	b.n	8002444 <_malloc_r+0xa0>
 800246a:	4623      	mov	r3, r4
 800246c:	6864      	ldr	r4, [r4, #4]
 800246e:	e7b2      	b.n	80023d6 <_malloc_r+0x32>
 8002470:	4634      	mov	r4, r6
 8002472:	6876      	ldr	r6, [r6, #4]
 8002474:	e7b9      	b.n	80023ea <_malloc_r+0x46>
 8002476:	230c      	movs	r3, #12
 8002478:	4638      	mov	r0, r7
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	f000 f8ec 	bl	8002658 <__malloc_unlock>
 8002480:	e7a1      	b.n	80023c6 <_malloc_r+0x22>
 8002482:	6025      	str	r5, [r4, #0]
 8002484:	e7de      	b.n	8002444 <_malloc_r+0xa0>
 8002486:	bf00      	nop
 8002488:	200000e0 	.word	0x200000e0

0800248c <putchar>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <putchar+0x24>)
 8002490:	4605      	mov	r5, r0
 8002492:	681c      	ldr	r4, [r3, #0]
 8002494:	b124      	cbz	r4, 80024a0 <putchar+0x14>
 8002496:	69a3      	ldr	r3, [r4, #24]
 8002498:	b913      	cbnz	r3, 80024a0 <putchar+0x14>
 800249a:	4620      	mov	r0, r4
 800249c:	f7ff fe4c 	bl	8002138 <__sinit>
 80024a0:	4629      	mov	r1, r5
 80024a2:	4620      	mov	r0, r4
 80024a4:	68a2      	ldr	r2, [r4, #8]
 80024a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024aa:	f000 bbcd 	b.w	8002c48 <_putc_r>
 80024ae:	bf00      	nop
 80024b0:	2000000c 	.word	0x2000000c

080024b4 <_sbrk_r>:
 80024b4:	b538      	push	{r3, r4, r5, lr}
 80024b6:	2300      	movs	r3, #0
 80024b8:	4d05      	ldr	r5, [pc, #20]	; (80024d0 <_sbrk_r+0x1c>)
 80024ba:	4604      	mov	r4, r0
 80024bc:	4608      	mov	r0, r1
 80024be:	602b      	str	r3, [r5, #0]
 80024c0:	f7fe fb4a 	bl	8000b58 <_sbrk>
 80024c4:	1c43      	adds	r3, r0, #1
 80024c6:	d102      	bne.n	80024ce <_sbrk_r+0x1a>
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	b103      	cbz	r3, 80024ce <_sbrk_r+0x1a>
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	bd38      	pop	{r3, r4, r5, pc}
 80024d0:	200000e8 	.word	0x200000e8

080024d4 <siprintf>:
 80024d4:	b40e      	push	{r1, r2, r3}
 80024d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80024da:	b500      	push	{lr}
 80024dc:	b09c      	sub	sp, #112	; 0x70
 80024de:	ab1d      	add	r3, sp, #116	; 0x74
 80024e0:	9002      	str	r0, [sp, #8]
 80024e2:	9006      	str	r0, [sp, #24]
 80024e4:	9107      	str	r1, [sp, #28]
 80024e6:	9104      	str	r1, [sp, #16]
 80024e8:	4808      	ldr	r0, [pc, #32]	; (800250c <siprintf+0x38>)
 80024ea:	4909      	ldr	r1, [pc, #36]	; (8002510 <siprintf+0x3c>)
 80024ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80024f0:	9105      	str	r1, [sp, #20]
 80024f2:	6800      	ldr	r0, [r0, #0]
 80024f4:	a902      	add	r1, sp, #8
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	f000 f910 	bl	800271c <_svfiprintf_r>
 80024fc:	2200      	movs	r2, #0
 80024fe:	9b02      	ldr	r3, [sp, #8]
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	b01c      	add	sp, #112	; 0x70
 8002504:	f85d eb04 	ldr.w	lr, [sp], #4
 8002508:	b003      	add	sp, #12
 800250a:	4770      	bx	lr
 800250c:	2000000c 	.word	0x2000000c
 8002510:	ffff0208 	.word	0xffff0208

08002514 <__sread>:
 8002514:	b510      	push	{r4, lr}
 8002516:	460c      	mov	r4, r1
 8002518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800251c:	f000 fbdc 	bl	8002cd8 <_read_r>
 8002520:	2800      	cmp	r0, #0
 8002522:	bfab      	itete	ge
 8002524:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002526:	89a3      	ldrhlt	r3, [r4, #12]
 8002528:	181b      	addge	r3, r3, r0
 800252a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800252e:	bfac      	ite	ge
 8002530:	6563      	strge	r3, [r4, #84]	; 0x54
 8002532:	81a3      	strhlt	r3, [r4, #12]
 8002534:	bd10      	pop	{r4, pc}

08002536 <__swrite>:
 8002536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800253a:	461f      	mov	r7, r3
 800253c:	898b      	ldrh	r3, [r1, #12]
 800253e:	4605      	mov	r5, r0
 8002540:	05db      	lsls	r3, r3, #23
 8002542:	460c      	mov	r4, r1
 8002544:	4616      	mov	r6, r2
 8002546:	d505      	bpl.n	8002554 <__swrite+0x1e>
 8002548:	2302      	movs	r3, #2
 800254a:	2200      	movs	r2, #0
 800254c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002550:	f000 f86a 	bl	8002628 <_lseek_r>
 8002554:	89a3      	ldrh	r3, [r4, #12]
 8002556:	4632      	mov	r2, r6
 8002558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800255c:	81a3      	strh	r3, [r4, #12]
 800255e:	4628      	mov	r0, r5
 8002560:	463b      	mov	r3, r7
 8002562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800256a:	f000 b83b 	b.w	80025e4 <_write_r>

0800256e <__sseek>:
 800256e:	b510      	push	{r4, lr}
 8002570:	460c      	mov	r4, r1
 8002572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002576:	f000 f857 	bl	8002628 <_lseek_r>
 800257a:	1c43      	adds	r3, r0, #1
 800257c:	89a3      	ldrh	r3, [r4, #12]
 800257e:	bf15      	itete	ne
 8002580:	6560      	strne	r0, [r4, #84]	; 0x54
 8002582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800258a:	81a3      	strheq	r3, [r4, #12]
 800258c:	bf18      	it	ne
 800258e:	81a3      	strhne	r3, [r4, #12]
 8002590:	bd10      	pop	{r4, pc}

08002592 <__sclose>:
 8002592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002596:	f000 b837 	b.w	8002608 <_close_r>

0800259a <strcspn>:
 800259a:	4603      	mov	r3, r0
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	461e      	mov	r6, r3
 80025a0:	f813 4b01 	ldrb.w	r4, [r3], #1
 80025a4:	b144      	cbz	r4, 80025b8 <strcspn+0x1e>
 80025a6:	1e4a      	subs	r2, r1, #1
 80025a8:	e001      	b.n	80025ae <strcspn+0x14>
 80025aa:	42a5      	cmp	r5, r4
 80025ac:	d004      	beq.n	80025b8 <strcspn+0x1e>
 80025ae:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80025b2:	2d00      	cmp	r5, #0
 80025b4:	d1f9      	bne.n	80025aa <strcspn+0x10>
 80025b6:	e7f2      	b.n	800259e <strcspn+0x4>
 80025b8:	1a30      	subs	r0, r6, r0
 80025ba:	bd70      	pop	{r4, r5, r6, pc}

080025bc <strncat>:
 80025bc:	b530      	push	{r4, r5, lr}
 80025be:	4604      	mov	r4, r0
 80025c0:	7825      	ldrb	r5, [r4, #0]
 80025c2:	4623      	mov	r3, r4
 80025c4:	3401      	adds	r4, #1
 80025c6:	2d00      	cmp	r5, #0
 80025c8:	d1fa      	bne.n	80025c0 <strncat+0x4>
 80025ca:	3a01      	subs	r2, #1
 80025cc:	d304      	bcc.n	80025d8 <strncat+0x1c>
 80025ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025d2:	f803 4b01 	strb.w	r4, [r3], #1
 80025d6:	b904      	cbnz	r4, 80025da <strncat+0x1e>
 80025d8:	bd30      	pop	{r4, r5, pc}
 80025da:	2a00      	cmp	r2, #0
 80025dc:	d1f5      	bne.n	80025ca <strncat+0xe>
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	e7f3      	b.n	80025ca <strncat+0xe>
	...

080025e4 <_write_r>:
 80025e4:	b538      	push	{r3, r4, r5, lr}
 80025e6:	4604      	mov	r4, r0
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	2200      	movs	r2, #0
 80025ee:	4d05      	ldr	r5, [pc, #20]	; (8002604 <_write_r+0x20>)
 80025f0:	602a      	str	r2, [r5, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f7fe fa64 	bl	8000ac0 <_write>
 80025f8:	1c43      	adds	r3, r0, #1
 80025fa:	d102      	bne.n	8002602 <_write_r+0x1e>
 80025fc:	682b      	ldr	r3, [r5, #0]
 80025fe:	b103      	cbz	r3, 8002602 <_write_r+0x1e>
 8002600:	6023      	str	r3, [r4, #0]
 8002602:	bd38      	pop	{r3, r4, r5, pc}
 8002604:	200000e8 	.word	0x200000e8

08002608 <_close_r>:
 8002608:	b538      	push	{r3, r4, r5, lr}
 800260a:	2300      	movs	r3, #0
 800260c:	4d05      	ldr	r5, [pc, #20]	; (8002624 <_close_r+0x1c>)
 800260e:	4604      	mov	r4, r0
 8002610:	4608      	mov	r0, r1
 8002612:	602b      	str	r3, [r5, #0]
 8002614:	f7fe fa70 	bl	8000af8 <_close>
 8002618:	1c43      	adds	r3, r0, #1
 800261a:	d102      	bne.n	8002622 <_close_r+0x1a>
 800261c:	682b      	ldr	r3, [r5, #0]
 800261e:	b103      	cbz	r3, 8002622 <_close_r+0x1a>
 8002620:	6023      	str	r3, [r4, #0]
 8002622:	bd38      	pop	{r3, r4, r5, pc}
 8002624:	200000e8 	.word	0x200000e8

08002628 <_lseek_r>:
 8002628:	b538      	push	{r3, r4, r5, lr}
 800262a:	4604      	mov	r4, r0
 800262c:	4608      	mov	r0, r1
 800262e:	4611      	mov	r1, r2
 8002630:	2200      	movs	r2, #0
 8002632:	4d05      	ldr	r5, [pc, #20]	; (8002648 <_lseek_r+0x20>)
 8002634:	602a      	str	r2, [r5, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	f7fe fa82 	bl	8000b40 <_lseek>
 800263c:	1c43      	adds	r3, r0, #1
 800263e:	d102      	bne.n	8002646 <_lseek_r+0x1e>
 8002640:	682b      	ldr	r3, [r5, #0]
 8002642:	b103      	cbz	r3, 8002646 <_lseek_r+0x1e>
 8002644:	6023      	str	r3, [r4, #0]
 8002646:	bd38      	pop	{r3, r4, r5, pc}
 8002648:	200000e8 	.word	0x200000e8

0800264c <__malloc_lock>:
 800264c:	4801      	ldr	r0, [pc, #4]	; (8002654 <__malloc_lock+0x8>)
 800264e:	f7ff be36 	b.w	80022be <__retarget_lock_acquire_recursive>
 8002652:	bf00      	nop
 8002654:	200000dc 	.word	0x200000dc

08002658 <__malloc_unlock>:
 8002658:	4801      	ldr	r0, [pc, #4]	; (8002660 <__malloc_unlock+0x8>)
 800265a:	f7ff be31 	b.w	80022c0 <__retarget_lock_release_recursive>
 800265e:	bf00      	nop
 8002660:	200000dc 	.word	0x200000dc

08002664 <__ssputs_r>:
 8002664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002668:	688e      	ldr	r6, [r1, #8]
 800266a:	4682      	mov	sl, r0
 800266c:	429e      	cmp	r6, r3
 800266e:	460c      	mov	r4, r1
 8002670:	4690      	mov	r8, r2
 8002672:	461f      	mov	r7, r3
 8002674:	d838      	bhi.n	80026e8 <__ssputs_r+0x84>
 8002676:	898a      	ldrh	r2, [r1, #12]
 8002678:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800267c:	d032      	beq.n	80026e4 <__ssputs_r+0x80>
 800267e:	6825      	ldr	r5, [r4, #0]
 8002680:	6909      	ldr	r1, [r1, #16]
 8002682:	3301      	adds	r3, #1
 8002684:	eba5 0901 	sub.w	r9, r5, r1
 8002688:	6965      	ldr	r5, [r4, #20]
 800268a:	444b      	add	r3, r9
 800268c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002694:	106d      	asrs	r5, r5, #1
 8002696:	429d      	cmp	r5, r3
 8002698:	bf38      	it	cc
 800269a:	461d      	movcc	r5, r3
 800269c:	0553      	lsls	r3, r2, #21
 800269e:	d531      	bpl.n	8002704 <__ssputs_r+0xa0>
 80026a0:	4629      	mov	r1, r5
 80026a2:	f7ff fe7f 	bl	80023a4 <_malloc_r>
 80026a6:	4606      	mov	r6, r0
 80026a8:	b950      	cbnz	r0, 80026c0 <__ssputs_r+0x5c>
 80026aa:	230c      	movs	r3, #12
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f8ca 3000 	str.w	r3, [sl]
 80026b4:	89a3      	ldrh	r3, [r4, #12]
 80026b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ba:	81a3      	strh	r3, [r4, #12]
 80026bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026c0:	464a      	mov	r2, r9
 80026c2:	6921      	ldr	r1, [r4, #16]
 80026c4:	f000 fc4e 	bl	8002f64 <memcpy>
 80026c8:	89a3      	ldrh	r3, [r4, #12]
 80026ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80026ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d2:	81a3      	strh	r3, [r4, #12]
 80026d4:	6126      	str	r6, [r4, #16]
 80026d6:	444e      	add	r6, r9
 80026d8:	6026      	str	r6, [r4, #0]
 80026da:	463e      	mov	r6, r7
 80026dc:	6165      	str	r5, [r4, #20]
 80026de:	eba5 0509 	sub.w	r5, r5, r9
 80026e2:	60a5      	str	r5, [r4, #8]
 80026e4:	42be      	cmp	r6, r7
 80026e6:	d900      	bls.n	80026ea <__ssputs_r+0x86>
 80026e8:	463e      	mov	r6, r7
 80026ea:	4632      	mov	r2, r6
 80026ec:	4641      	mov	r1, r8
 80026ee:	6820      	ldr	r0, [r4, #0]
 80026f0:	f000 fc46 	bl	8002f80 <memmove>
 80026f4:	68a3      	ldr	r3, [r4, #8]
 80026f6:	2000      	movs	r0, #0
 80026f8:	1b9b      	subs	r3, r3, r6
 80026fa:	60a3      	str	r3, [r4, #8]
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	4433      	add	r3, r6
 8002700:	6023      	str	r3, [r4, #0]
 8002702:	e7db      	b.n	80026bc <__ssputs_r+0x58>
 8002704:	462a      	mov	r2, r5
 8002706:	f000 fc55 	bl	8002fb4 <_realloc_r>
 800270a:	4606      	mov	r6, r0
 800270c:	2800      	cmp	r0, #0
 800270e:	d1e1      	bne.n	80026d4 <__ssputs_r+0x70>
 8002710:	4650      	mov	r0, sl
 8002712:	6921      	ldr	r1, [r4, #16]
 8002714:	f7ff fdde 	bl	80022d4 <_free_r>
 8002718:	e7c7      	b.n	80026aa <__ssputs_r+0x46>
	...

0800271c <_svfiprintf_r>:
 800271c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002720:	4698      	mov	r8, r3
 8002722:	898b      	ldrh	r3, [r1, #12]
 8002724:	4607      	mov	r7, r0
 8002726:	061b      	lsls	r3, r3, #24
 8002728:	460d      	mov	r5, r1
 800272a:	4614      	mov	r4, r2
 800272c:	b09d      	sub	sp, #116	; 0x74
 800272e:	d50e      	bpl.n	800274e <_svfiprintf_r+0x32>
 8002730:	690b      	ldr	r3, [r1, #16]
 8002732:	b963      	cbnz	r3, 800274e <_svfiprintf_r+0x32>
 8002734:	2140      	movs	r1, #64	; 0x40
 8002736:	f7ff fe35 	bl	80023a4 <_malloc_r>
 800273a:	6028      	str	r0, [r5, #0]
 800273c:	6128      	str	r0, [r5, #16]
 800273e:	b920      	cbnz	r0, 800274a <_svfiprintf_r+0x2e>
 8002740:	230c      	movs	r3, #12
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	f04f 30ff 	mov.w	r0, #4294967295
 8002748:	e0d1      	b.n	80028ee <_svfiprintf_r+0x1d2>
 800274a:	2340      	movs	r3, #64	; 0x40
 800274c:	616b      	str	r3, [r5, #20]
 800274e:	2300      	movs	r3, #0
 8002750:	9309      	str	r3, [sp, #36]	; 0x24
 8002752:	2320      	movs	r3, #32
 8002754:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002758:	2330      	movs	r3, #48	; 0x30
 800275a:	f04f 0901 	mov.w	r9, #1
 800275e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002762:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002908 <_svfiprintf_r+0x1ec>
 8002766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800276a:	4623      	mov	r3, r4
 800276c:	469a      	mov	sl, r3
 800276e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002772:	b10a      	cbz	r2, 8002778 <_svfiprintf_r+0x5c>
 8002774:	2a25      	cmp	r2, #37	; 0x25
 8002776:	d1f9      	bne.n	800276c <_svfiprintf_r+0x50>
 8002778:	ebba 0b04 	subs.w	fp, sl, r4
 800277c:	d00b      	beq.n	8002796 <_svfiprintf_r+0x7a>
 800277e:	465b      	mov	r3, fp
 8002780:	4622      	mov	r2, r4
 8002782:	4629      	mov	r1, r5
 8002784:	4638      	mov	r0, r7
 8002786:	f7ff ff6d 	bl	8002664 <__ssputs_r>
 800278a:	3001      	adds	r0, #1
 800278c:	f000 80aa 	beq.w	80028e4 <_svfiprintf_r+0x1c8>
 8002790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002792:	445a      	add	r2, fp
 8002794:	9209      	str	r2, [sp, #36]	; 0x24
 8002796:	f89a 3000 	ldrb.w	r3, [sl]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80a2 	beq.w	80028e4 <_svfiprintf_r+0x1c8>
 80027a0:	2300      	movs	r3, #0
 80027a2:	f04f 32ff 	mov.w	r2, #4294967295
 80027a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027aa:	f10a 0a01 	add.w	sl, sl, #1
 80027ae:	9304      	str	r3, [sp, #16]
 80027b0:	9307      	str	r3, [sp, #28]
 80027b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027b6:	931a      	str	r3, [sp, #104]	; 0x68
 80027b8:	4654      	mov	r4, sl
 80027ba:	2205      	movs	r2, #5
 80027bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027c0:	4851      	ldr	r0, [pc, #324]	; (8002908 <_svfiprintf_r+0x1ec>)
 80027c2:	f000 fbc1 	bl	8002f48 <memchr>
 80027c6:	9a04      	ldr	r2, [sp, #16]
 80027c8:	b9d8      	cbnz	r0, 8002802 <_svfiprintf_r+0xe6>
 80027ca:	06d0      	lsls	r0, r2, #27
 80027cc:	bf44      	itt	mi
 80027ce:	2320      	movmi	r3, #32
 80027d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027d4:	0711      	lsls	r1, r2, #28
 80027d6:	bf44      	itt	mi
 80027d8:	232b      	movmi	r3, #43	; 0x2b
 80027da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027de:	f89a 3000 	ldrb.w	r3, [sl]
 80027e2:	2b2a      	cmp	r3, #42	; 0x2a
 80027e4:	d015      	beq.n	8002812 <_svfiprintf_r+0xf6>
 80027e6:	4654      	mov	r4, sl
 80027e8:	2000      	movs	r0, #0
 80027ea:	f04f 0c0a 	mov.w	ip, #10
 80027ee:	9a07      	ldr	r2, [sp, #28]
 80027f0:	4621      	mov	r1, r4
 80027f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027f6:	3b30      	subs	r3, #48	; 0x30
 80027f8:	2b09      	cmp	r3, #9
 80027fa:	d94e      	bls.n	800289a <_svfiprintf_r+0x17e>
 80027fc:	b1b0      	cbz	r0, 800282c <_svfiprintf_r+0x110>
 80027fe:	9207      	str	r2, [sp, #28]
 8002800:	e014      	b.n	800282c <_svfiprintf_r+0x110>
 8002802:	eba0 0308 	sub.w	r3, r0, r8
 8002806:	fa09 f303 	lsl.w	r3, r9, r3
 800280a:	4313      	orrs	r3, r2
 800280c:	46a2      	mov	sl, r4
 800280e:	9304      	str	r3, [sp, #16]
 8002810:	e7d2      	b.n	80027b8 <_svfiprintf_r+0x9c>
 8002812:	9b03      	ldr	r3, [sp, #12]
 8002814:	1d19      	adds	r1, r3, #4
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	9103      	str	r1, [sp, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	bfbb      	ittet	lt
 800281e:	425b      	neglt	r3, r3
 8002820:	f042 0202 	orrlt.w	r2, r2, #2
 8002824:	9307      	strge	r3, [sp, #28]
 8002826:	9307      	strlt	r3, [sp, #28]
 8002828:	bfb8      	it	lt
 800282a:	9204      	strlt	r2, [sp, #16]
 800282c:	7823      	ldrb	r3, [r4, #0]
 800282e:	2b2e      	cmp	r3, #46	; 0x2e
 8002830:	d10c      	bne.n	800284c <_svfiprintf_r+0x130>
 8002832:	7863      	ldrb	r3, [r4, #1]
 8002834:	2b2a      	cmp	r3, #42	; 0x2a
 8002836:	d135      	bne.n	80028a4 <_svfiprintf_r+0x188>
 8002838:	9b03      	ldr	r3, [sp, #12]
 800283a:	3402      	adds	r4, #2
 800283c:	1d1a      	adds	r2, r3, #4
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	9203      	str	r2, [sp, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	bfb8      	it	lt
 8002846:	f04f 33ff 	movlt.w	r3, #4294967295
 800284a:	9305      	str	r3, [sp, #20]
 800284c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800290c <_svfiprintf_r+0x1f0>
 8002850:	2203      	movs	r2, #3
 8002852:	4650      	mov	r0, sl
 8002854:	7821      	ldrb	r1, [r4, #0]
 8002856:	f000 fb77 	bl	8002f48 <memchr>
 800285a:	b140      	cbz	r0, 800286e <_svfiprintf_r+0x152>
 800285c:	2340      	movs	r3, #64	; 0x40
 800285e:	eba0 000a 	sub.w	r0, r0, sl
 8002862:	fa03 f000 	lsl.w	r0, r3, r0
 8002866:	9b04      	ldr	r3, [sp, #16]
 8002868:	3401      	adds	r4, #1
 800286a:	4303      	orrs	r3, r0
 800286c:	9304      	str	r3, [sp, #16]
 800286e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002872:	2206      	movs	r2, #6
 8002874:	4826      	ldr	r0, [pc, #152]	; (8002910 <_svfiprintf_r+0x1f4>)
 8002876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800287a:	f000 fb65 	bl	8002f48 <memchr>
 800287e:	2800      	cmp	r0, #0
 8002880:	d038      	beq.n	80028f4 <_svfiprintf_r+0x1d8>
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <_svfiprintf_r+0x1f8>)
 8002884:	bb1b      	cbnz	r3, 80028ce <_svfiprintf_r+0x1b2>
 8002886:	9b03      	ldr	r3, [sp, #12]
 8002888:	3307      	adds	r3, #7
 800288a:	f023 0307 	bic.w	r3, r3, #7
 800288e:	3308      	adds	r3, #8
 8002890:	9303      	str	r3, [sp, #12]
 8002892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002894:	4433      	add	r3, r6
 8002896:	9309      	str	r3, [sp, #36]	; 0x24
 8002898:	e767      	b.n	800276a <_svfiprintf_r+0x4e>
 800289a:	460c      	mov	r4, r1
 800289c:	2001      	movs	r0, #1
 800289e:	fb0c 3202 	mla	r2, ip, r2, r3
 80028a2:	e7a5      	b.n	80027f0 <_svfiprintf_r+0xd4>
 80028a4:	2300      	movs	r3, #0
 80028a6:	f04f 0c0a 	mov.w	ip, #10
 80028aa:	4619      	mov	r1, r3
 80028ac:	3401      	adds	r4, #1
 80028ae:	9305      	str	r3, [sp, #20]
 80028b0:	4620      	mov	r0, r4
 80028b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028b6:	3a30      	subs	r2, #48	; 0x30
 80028b8:	2a09      	cmp	r2, #9
 80028ba:	d903      	bls.n	80028c4 <_svfiprintf_r+0x1a8>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0c5      	beq.n	800284c <_svfiprintf_r+0x130>
 80028c0:	9105      	str	r1, [sp, #20]
 80028c2:	e7c3      	b.n	800284c <_svfiprintf_r+0x130>
 80028c4:	4604      	mov	r4, r0
 80028c6:	2301      	movs	r3, #1
 80028c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80028cc:	e7f0      	b.n	80028b0 <_svfiprintf_r+0x194>
 80028ce:	ab03      	add	r3, sp, #12
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	462a      	mov	r2, r5
 80028d4:	4638      	mov	r0, r7
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <_svfiprintf_r+0x1fc>)
 80028d8:	a904      	add	r1, sp, #16
 80028da:	f3af 8000 	nop.w
 80028de:	1c42      	adds	r2, r0, #1
 80028e0:	4606      	mov	r6, r0
 80028e2:	d1d6      	bne.n	8002892 <_svfiprintf_r+0x176>
 80028e4:	89ab      	ldrh	r3, [r5, #12]
 80028e6:	065b      	lsls	r3, r3, #25
 80028e8:	f53f af2c 	bmi.w	8002744 <_svfiprintf_r+0x28>
 80028ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80028ee:	b01d      	add	sp, #116	; 0x74
 80028f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f4:	ab03      	add	r3, sp, #12
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	462a      	mov	r2, r5
 80028fa:	4638      	mov	r0, r7
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <_svfiprintf_r+0x1fc>)
 80028fe:	a904      	add	r1, sp, #16
 8002900:	f000 f87c 	bl	80029fc <_printf_i>
 8002904:	e7eb      	b.n	80028de <_svfiprintf_r+0x1c2>
 8002906:	bf00      	nop
 8002908:	08003b40 	.word	0x08003b40
 800290c:	08003b46 	.word	0x08003b46
 8002910:	08003b4a 	.word	0x08003b4a
 8002914:	00000000 	.word	0x00000000
 8002918:	08002665 	.word	0x08002665

0800291c <_printf_common>:
 800291c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002920:	4616      	mov	r6, r2
 8002922:	4699      	mov	r9, r3
 8002924:	688a      	ldr	r2, [r1, #8]
 8002926:	690b      	ldr	r3, [r1, #16]
 8002928:	4607      	mov	r7, r0
 800292a:	4293      	cmp	r3, r2
 800292c:	bfb8      	it	lt
 800292e:	4613      	movlt	r3, r2
 8002930:	6033      	str	r3, [r6, #0]
 8002932:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002936:	460c      	mov	r4, r1
 8002938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800293c:	b10a      	cbz	r2, 8002942 <_printf_common+0x26>
 800293e:	3301      	adds	r3, #1
 8002940:	6033      	str	r3, [r6, #0]
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	0699      	lsls	r1, r3, #26
 8002946:	bf42      	ittt	mi
 8002948:	6833      	ldrmi	r3, [r6, #0]
 800294a:	3302      	addmi	r3, #2
 800294c:	6033      	strmi	r3, [r6, #0]
 800294e:	6825      	ldr	r5, [r4, #0]
 8002950:	f015 0506 	ands.w	r5, r5, #6
 8002954:	d106      	bne.n	8002964 <_printf_common+0x48>
 8002956:	f104 0a19 	add.w	sl, r4, #25
 800295a:	68e3      	ldr	r3, [r4, #12]
 800295c:	6832      	ldr	r2, [r6, #0]
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	42ab      	cmp	r3, r5
 8002962:	dc28      	bgt.n	80029b6 <_printf_common+0x9a>
 8002964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002968:	1e13      	subs	r3, r2, #0
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	bf18      	it	ne
 800296e:	2301      	movne	r3, #1
 8002970:	0692      	lsls	r2, r2, #26
 8002972:	d42d      	bmi.n	80029d0 <_printf_common+0xb4>
 8002974:	4649      	mov	r1, r9
 8002976:	4638      	mov	r0, r7
 8002978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800297c:	47c0      	blx	r8
 800297e:	3001      	adds	r0, #1
 8002980:	d020      	beq.n	80029c4 <_printf_common+0xa8>
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	68e5      	ldr	r5, [r4, #12]
 8002986:	f003 0306 	and.w	r3, r3, #6
 800298a:	2b04      	cmp	r3, #4
 800298c:	bf18      	it	ne
 800298e:	2500      	movne	r5, #0
 8002990:	6832      	ldr	r2, [r6, #0]
 8002992:	f04f 0600 	mov.w	r6, #0
 8002996:	68a3      	ldr	r3, [r4, #8]
 8002998:	bf08      	it	eq
 800299a:	1aad      	subeq	r5, r5, r2
 800299c:	6922      	ldr	r2, [r4, #16]
 800299e:	bf08      	it	eq
 80029a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029a4:	4293      	cmp	r3, r2
 80029a6:	bfc4      	itt	gt
 80029a8:	1a9b      	subgt	r3, r3, r2
 80029aa:	18ed      	addgt	r5, r5, r3
 80029ac:	341a      	adds	r4, #26
 80029ae:	42b5      	cmp	r5, r6
 80029b0:	d11a      	bne.n	80029e8 <_printf_common+0xcc>
 80029b2:	2000      	movs	r0, #0
 80029b4:	e008      	b.n	80029c8 <_printf_common+0xac>
 80029b6:	2301      	movs	r3, #1
 80029b8:	4652      	mov	r2, sl
 80029ba:	4649      	mov	r1, r9
 80029bc:	4638      	mov	r0, r7
 80029be:	47c0      	blx	r8
 80029c0:	3001      	adds	r0, #1
 80029c2:	d103      	bne.n	80029cc <_printf_common+0xb0>
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295
 80029c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029cc:	3501      	adds	r5, #1
 80029ce:	e7c4      	b.n	800295a <_printf_common+0x3e>
 80029d0:	2030      	movs	r0, #48	; 0x30
 80029d2:	18e1      	adds	r1, r4, r3
 80029d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029de:	4422      	add	r2, r4
 80029e0:	3302      	adds	r3, #2
 80029e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029e6:	e7c5      	b.n	8002974 <_printf_common+0x58>
 80029e8:	2301      	movs	r3, #1
 80029ea:	4622      	mov	r2, r4
 80029ec:	4649      	mov	r1, r9
 80029ee:	4638      	mov	r0, r7
 80029f0:	47c0      	blx	r8
 80029f2:	3001      	adds	r0, #1
 80029f4:	d0e6      	beq.n	80029c4 <_printf_common+0xa8>
 80029f6:	3601      	adds	r6, #1
 80029f8:	e7d9      	b.n	80029ae <_printf_common+0x92>
	...

080029fc <_printf_i>:
 80029fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a00:	7e0f      	ldrb	r7, [r1, #24]
 8002a02:	4691      	mov	r9, r2
 8002a04:	2f78      	cmp	r7, #120	; 0x78
 8002a06:	4680      	mov	r8, r0
 8002a08:	460c      	mov	r4, r1
 8002a0a:	469a      	mov	sl, r3
 8002a0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a12:	d807      	bhi.n	8002a24 <_printf_i+0x28>
 8002a14:	2f62      	cmp	r7, #98	; 0x62
 8002a16:	d80a      	bhi.n	8002a2e <_printf_i+0x32>
 8002a18:	2f00      	cmp	r7, #0
 8002a1a:	f000 80d9 	beq.w	8002bd0 <_printf_i+0x1d4>
 8002a1e:	2f58      	cmp	r7, #88	; 0x58
 8002a20:	f000 80a4 	beq.w	8002b6c <_printf_i+0x170>
 8002a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a2c:	e03a      	b.n	8002aa4 <_printf_i+0xa8>
 8002a2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a32:	2b15      	cmp	r3, #21
 8002a34:	d8f6      	bhi.n	8002a24 <_printf_i+0x28>
 8002a36:	a101      	add	r1, pc, #4	; (adr r1, 8002a3c <_printf_i+0x40>)
 8002a38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a3c:	08002a95 	.word	0x08002a95
 8002a40:	08002aa9 	.word	0x08002aa9
 8002a44:	08002a25 	.word	0x08002a25
 8002a48:	08002a25 	.word	0x08002a25
 8002a4c:	08002a25 	.word	0x08002a25
 8002a50:	08002a25 	.word	0x08002a25
 8002a54:	08002aa9 	.word	0x08002aa9
 8002a58:	08002a25 	.word	0x08002a25
 8002a5c:	08002a25 	.word	0x08002a25
 8002a60:	08002a25 	.word	0x08002a25
 8002a64:	08002a25 	.word	0x08002a25
 8002a68:	08002bb7 	.word	0x08002bb7
 8002a6c:	08002ad9 	.word	0x08002ad9
 8002a70:	08002b99 	.word	0x08002b99
 8002a74:	08002a25 	.word	0x08002a25
 8002a78:	08002a25 	.word	0x08002a25
 8002a7c:	08002bd9 	.word	0x08002bd9
 8002a80:	08002a25 	.word	0x08002a25
 8002a84:	08002ad9 	.word	0x08002ad9
 8002a88:	08002a25 	.word	0x08002a25
 8002a8c:	08002a25 	.word	0x08002a25
 8002a90:	08002ba1 	.word	0x08002ba1
 8002a94:	682b      	ldr	r3, [r5, #0]
 8002a96:	1d1a      	adds	r2, r3, #4
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	602a      	str	r2, [r5, #0]
 8002a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0a4      	b.n	8002bf2 <_printf_i+0x1f6>
 8002aa8:	6820      	ldr	r0, [r4, #0]
 8002aaa:	6829      	ldr	r1, [r5, #0]
 8002aac:	0606      	lsls	r6, r0, #24
 8002aae:	f101 0304 	add.w	r3, r1, #4
 8002ab2:	d50a      	bpl.n	8002aca <_printf_i+0xce>
 8002ab4:	680e      	ldr	r6, [r1, #0]
 8002ab6:	602b      	str	r3, [r5, #0]
 8002ab8:	2e00      	cmp	r6, #0
 8002aba:	da03      	bge.n	8002ac4 <_printf_i+0xc8>
 8002abc:	232d      	movs	r3, #45	; 0x2d
 8002abe:	4276      	negs	r6, r6
 8002ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ac4:	230a      	movs	r3, #10
 8002ac6:	485e      	ldr	r0, [pc, #376]	; (8002c40 <_printf_i+0x244>)
 8002ac8:	e019      	b.n	8002afe <_printf_i+0x102>
 8002aca:	680e      	ldr	r6, [r1, #0]
 8002acc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ad0:	602b      	str	r3, [r5, #0]
 8002ad2:	bf18      	it	ne
 8002ad4:	b236      	sxthne	r6, r6
 8002ad6:	e7ef      	b.n	8002ab8 <_printf_i+0xbc>
 8002ad8:	682b      	ldr	r3, [r5, #0]
 8002ada:	6820      	ldr	r0, [r4, #0]
 8002adc:	1d19      	adds	r1, r3, #4
 8002ade:	6029      	str	r1, [r5, #0]
 8002ae0:	0601      	lsls	r1, r0, #24
 8002ae2:	d501      	bpl.n	8002ae8 <_printf_i+0xec>
 8002ae4:	681e      	ldr	r6, [r3, #0]
 8002ae6:	e002      	b.n	8002aee <_printf_i+0xf2>
 8002ae8:	0646      	lsls	r6, r0, #25
 8002aea:	d5fb      	bpl.n	8002ae4 <_printf_i+0xe8>
 8002aec:	881e      	ldrh	r6, [r3, #0]
 8002aee:	2f6f      	cmp	r7, #111	; 0x6f
 8002af0:	bf0c      	ite	eq
 8002af2:	2308      	moveq	r3, #8
 8002af4:	230a      	movne	r3, #10
 8002af6:	4852      	ldr	r0, [pc, #328]	; (8002c40 <_printf_i+0x244>)
 8002af8:	2100      	movs	r1, #0
 8002afa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002afe:	6865      	ldr	r5, [r4, #4]
 8002b00:	2d00      	cmp	r5, #0
 8002b02:	bfa8      	it	ge
 8002b04:	6821      	ldrge	r1, [r4, #0]
 8002b06:	60a5      	str	r5, [r4, #8]
 8002b08:	bfa4      	itt	ge
 8002b0a:	f021 0104 	bicge.w	r1, r1, #4
 8002b0e:	6021      	strge	r1, [r4, #0]
 8002b10:	b90e      	cbnz	r6, 8002b16 <_printf_i+0x11a>
 8002b12:	2d00      	cmp	r5, #0
 8002b14:	d04d      	beq.n	8002bb2 <_printf_i+0x1b6>
 8002b16:	4615      	mov	r5, r2
 8002b18:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b1c:	fb03 6711 	mls	r7, r3, r1, r6
 8002b20:	5dc7      	ldrb	r7, [r0, r7]
 8002b22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b26:	4637      	mov	r7, r6
 8002b28:	42bb      	cmp	r3, r7
 8002b2a:	460e      	mov	r6, r1
 8002b2c:	d9f4      	bls.n	8002b18 <_printf_i+0x11c>
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d10b      	bne.n	8002b4a <_printf_i+0x14e>
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	07de      	lsls	r6, r3, #31
 8002b36:	d508      	bpl.n	8002b4a <_printf_i+0x14e>
 8002b38:	6923      	ldr	r3, [r4, #16]
 8002b3a:	6861      	ldr	r1, [r4, #4]
 8002b3c:	4299      	cmp	r1, r3
 8002b3e:	bfde      	ittt	le
 8002b40:	2330      	movle	r3, #48	; 0x30
 8002b42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b4a:	1b52      	subs	r2, r2, r5
 8002b4c:	6122      	str	r2, [r4, #16]
 8002b4e:	464b      	mov	r3, r9
 8002b50:	4621      	mov	r1, r4
 8002b52:	4640      	mov	r0, r8
 8002b54:	f8cd a000 	str.w	sl, [sp]
 8002b58:	aa03      	add	r2, sp, #12
 8002b5a:	f7ff fedf 	bl	800291c <_printf_common>
 8002b5e:	3001      	adds	r0, #1
 8002b60:	d14c      	bne.n	8002bfc <_printf_i+0x200>
 8002b62:	f04f 30ff 	mov.w	r0, #4294967295
 8002b66:	b004      	add	sp, #16
 8002b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b6c:	4834      	ldr	r0, [pc, #208]	; (8002c40 <_printf_i+0x244>)
 8002b6e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002b72:	6829      	ldr	r1, [r5, #0]
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b7a:	6029      	str	r1, [r5, #0]
 8002b7c:	061d      	lsls	r5, r3, #24
 8002b7e:	d514      	bpl.n	8002baa <_printf_i+0x1ae>
 8002b80:	07df      	lsls	r7, r3, #31
 8002b82:	bf44      	itt	mi
 8002b84:	f043 0320 	orrmi.w	r3, r3, #32
 8002b88:	6023      	strmi	r3, [r4, #0]
 8002b8a:	b91e      	cbnz	r6, 8002b94 <_printf_i+0x198>
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	f023 0320 	bic.w	r3, r3, #32
 8002b92:	6023      	str	r3, [r4, #0]
 8002b94:	2310      	movs	r3, #16
 8002b96:	e7af      	b.n	8002af8 <_printf_i+0xfc>
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	f043 0320 	orr.w	r3, r3, #32
 8002b9e:	6023      	str	r3, [r4, #0]
 8002ba0:	2378      	movs	r3, #120	; 0x78
 8002ba2:	4828      	ldr	r0, [pc, #160]	; (8002c44 <_printf_i+0x248>)
 8002ba4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ba8:	e7e3      	b.n	8002b72 <_printf_i+0x176>
 8002baa:	0659      	lsls	r1, r3, #25
 8002bac:	bf48      	it	mi
 8002bae:	b2b6      	uxthmi	r6, r6
 8002bb0:	e7e6      	b.n	8002b80 <_printf_i+0x184>
 8002bb2:	4615      	mov	r5, r2
 8002bb4:	e7bb      	b.n	8002b2e <_printf_i+0x132>
 8002bb6:	682b      	ldr	r3, [r5, #0]
 8002bb8:	6826      	ldr	r6, [r4, #0]
 8002bba:	1d18      	adds	r0, r3, #4
 8002bbc:	6961      	ldr	r1, [r4, #20]
 8002bbe:	6028      	str	r0, [r5, #0]
 8002bc0:	0635      	lsls	r5, r6, #24
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	d501      	bpl.n	8002bca <_printf_i+0x1ce>
 8002bc6:	6019      	str	r1, [r3, #0]
 8002bc8:	e002      	b.n	8002bd0 <_printf_i+0x1d4>
 8002bca:	0670      	lsls	r0, r6, #25
 8002bcc:	d5fb      	bpl.n	8002bc6 <_printf_i+0x1ca>
 8002bce:	8019      	strh	r1, [r3, #0]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	4615      	mov	r5, r2
 8002bd4:	6123      	str	r3, [r4, #16]
 8002bd6:	e7ba      	b.n	8002b4e <_printf_i+0x152>
 8002bd8:	682b      	ldr	r3, [r5, #0]
 8002bda:	2100      	movs	r1, #0
 8002bdc:	1d1a      	adds	r2, r3, #4
 8002bde:	602a      	str	r2, [r5, #0]
 8002be0:	681d      	ldr	r5, [r3, #0]
 8002be2:	6862      	ldr	r2, [r4, #4]
 8002be4:	4628      	mov	r0, r5
 8002be6:	f000 f9af 	bl	8002f48 <memchr>
 8002bea:	b108      	cbz	r0, 8002bf0 <_printf_i+0x1f4>
 8002bec:	1b40      	subs	r0, r0, r5
 8002bee:	6060      	str	r0, [r4, #4]
 8002bf0:	6863      	ldr	r3, [r4, #4]
 8002bf2:	6123      	str	r3, [r4, #16]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bfa:	e7a8      	b.n	8002b4e <_printf_i+0x152>
 8002bfc:	462a      	mov	r2, r5
 8002bfe:	4649      	mov	r1, r9
 8002c00:	4640      	mov	r0, r8
 8002c02:	6923      	ldr	r3, [r4, #16]
 8002c04:	47d0      	blx	sl
 8002c06:	3001      	adds	r0, #1
 8002c08:	d0ab      	beq.n	8002b62 <_printf_i+0x166>
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	079b      	lsls	r3, r3, #30
 8002c0e:	d413      	bmi.n	8002c38 <_printf_i+0x23c>
 8002c10:	68e0      	ldr	r0, [r4, #12]
 8002c12:	9b03      	ldr	r3, [sp, #12]
 8002c14:	4298      	cmp	r0, r3
 8002c16:	bfb8      	it	lt
 8002c18:	4618      	movlt	r0, r3
 8002c1a:	e7a4      	b.n	8002b66 <_printf_i+0x16a>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	4632      	mov	r2, r6
 8002c20:	4649      	mov	r1, r9
 8002c22:	4640      	mov	r0, r8
 8002c24:	47d0      	blx	sl
 8002c26:	3001      	adds	r0, #1
 8002c28:	d09b      	beq.n	8002b62 <_printf_i+0x166>
 8002c2a:	3501      	adds	r5, #1
 8002c2c:	68e3      	ldr	r3, [r4, #12]
 8002c2e:	9903      	ldr	r1, [sp, #12]
 8002c30:	1a5b      	subs	r3, r3, r1
 8002c32:	42ab      	cmp	r3, r5
 8002c34:	dcf2      	bgt.n	8002c1c <_printf_i+0x220>
 8002c36:	e7eb      	b.n	8002c10 <_printf_i+0x214>
 8002c38:	2500      	movs	r5, #0
 8002c3a:	f104 0619 	add.w	r6, r4, #25
 8002c3e:	e7f5      	b.n	8002c2c <_printf_i+0x230>
 8002c40:	08003b51 	.word	0x08003b51
 8002c44:	08003b62 	.word	0x08003b62

08002c48 <_putc_r>:
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	460d      	mov	r5, r1
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	4606      	mov	r6, r0
 8002c50:	b118      	cbz	r0, 8002c5a <_putc_r+0x12>
 8002c52:	6983      	ldr	r3, [r0, #24]
 8002c54:	b90b      	cbnz	r3, 8002c5a <_putc_r+0x12>
 8002c56:	f7ff fa6f 	bl	8002138 <__sinit>
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <_putc_r+0x84>)
 8002c5c:	429c      	cmp	r4, r3
 8002c5e:	d124      	bne.n	8002caa <_putc_r+0x62>
 8002c60:	6874      	ldr	r4, [r6, #4]
 8002c62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c64:	07d8      	lsls	r0, r3, #31
 8002c66:	d405      	bmi.n	8002c74 <_putc_r+0x2c>
 8002c68:	89a3      	ldrh	r3, [r4, #12]
 8002c6a:	0599      	lsls	r1, r3, #22
 8002c6c:	d402      	bmi.n	8002c74 <_putc_r+0x2c>
 8002c6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c70:	f7ff fb25 	bl	80022be <__retarget_lock_acquire_recursive>
 8002c74:	68a3      	ldr	r3, [r4, #8]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	60a3      	str	r3, [r4, #8]
 8002c7c:	da05      	bge.n	8002c8a <_putc_r+0x42>
 8002c7e:	69a2      	ldr	r2, [r4, #24]
 8002c80:	4293      	cmp	r3, r2
 8002c82:	db1c      	blt.n	8002cbe <_putc_r+0x76>
 8002c84:	b2eb      	uxtb	r3, r5
 8002c86:	2b0a      	cmp	r3, #10
 8002c88:	d019      	beq.n	8002cbe <_putc_r+0x76>
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	6022      	str	r2, [r4, #0]
 8002c90:	701d      	strb	r5, [r3, #0]
 8002c92:	b2ed      	uxtb	r5, r5
 8002c94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c96:	07da      	lsls	r2, r3, #31
 8002c98:	d405      	bmi.n	8002ca6 <_putc_r+0x5e>
 8002c9a:	89a3      	ldrh	r3, [r4, #12]
 8002c9c:	059b      	lsls	r3, r3, #22
 8002c9e:	d402      	bmi.n	8002ca6 <_putc_r+0x5e>
 8002ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ca2:	f7ff fb0d 	bl	80022c0 <__retarget_lock_release_recursive>
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	bd70      	pop	{r4, r5, r6, pc}
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <_putc_r+0x88>)
 8002cac:	429c      	cmp	r4, r3
 8002cae:	d101      	bne.n	8002cb4 <_putc_r+0x6c>
 8002cb0:	68b4      	ldr	r4, [r6, #8]
 8002cb2:	e7d6      	b.n	8002c62 <_putc_r+0x1a>
 8002cb4:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <_putc_r+0x8c>)
 8002cb6:	429c      	cmp	r4, r3
 8002cb8:	bf08      	it	eq
 8002cba:	68f4      	ldreq	r4, [r6, #12]
 8002cbc:	e7d1      	b.n	8002c62 <_putc_r+0x1a>
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	f000 f81a 	bl	8002cfc <__swbuf_r>
 8002cc8:	4605      	mov	r5, r0
 8002cca:	e7e3      	b.n	8002c94 <_putc_r+0x4c>
 8002ccc:	08003afc 	.word	0x08003afc
 8002cd0:	08003b1c 	.word	0x08003b1c
 8002cd4:	08003adc 	.word	0x08003adc

08002cd8 <_read_r>:
 8002cd8:	b538      	push	{r3, r4, r5, lr}
 8002cda:	4604      	mov	r4, r0
 8002cdc:	4608      	mov	r0, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4d05      	ldr	r5, [pc, #20]	; (8002cf8 <_read_r+0x20>)
 8002ce4:	602a      	str	r2, [r5, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f7fd fecd 	bl	8000a86 <_read>
 8002cec:	1c43      	adds	r3, r0, #1
 8002cee:	d102      	bne.n	8002cf6 <_read_r+0x1e>
 8002cf0:	682b      	ldr	r3, [r5, #0]
 8002cf2:	b103      	cbz	r3, 8002cf6 <_read_r+0x1e>
 8002cf4:	6023      	str	r3, [r4, #0]
 8002cf6:	bd38      	pop	{r3, r4, r5, pc}
 8002cf8:	200000e8 	.word	0x200000e8

08002cfc <__swbuf_r>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	460e      	mov	r6, r1
 8002d00:	4614      	mov	r4, r2
 8002d02:	4605      	mov	r5, r0
 8002d04:	b118      	cbz	r0, 8002d0e <__swbuf_r+0x12>
 8002d06:	6983      	ldr	r3, [r0, #24]
 8002d08:	b90b      	cbnz	r3, 8002d0e <__swbuf_r+0x12>
 8002d0a:	f7ff fa15 	bl	8002138 <__sinit>
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <__swbuf_r+0x98>)
 8002d10:	429c      	cmp	r4, r3
 8002d12:	d12b      	bne.n	8002d6c <__swbuf_r+0x70>
 8002d14:	686c      	ldr	r4, [r5, #4]
 8002d16:	69a3      	ldr	r3, [r4, #24]
 8002d18:	60a3      	str	r3, [r4, #8]
 8002d1a:	89a3      	ldrh	r3, [r4, #12]
 8002d1c:	071a      	lsls	r2, r3, #28
 8002d1e:	d52f      	bpl.n	8002d80 <__swbuf_r+0x84>
 8002d20:	6923      	ldr	r3, [r4, #16]
 8002d22:	b36b      	cbz	r3, 8002d80 <__swbuf_r+0x84>
 8002d24:	6923      	ldr	r3, [r4, #16]
 8002d26:	6820      	ldr	r0, [r4, #0]
 8002d28:	b2f6      	uxtb	r6, r6
 8002d2a:	1ac0      	subs	r0, r0, r3
 8002d2c:	6963      	ldr	r3, [r4, #20]
 8002d2e:	4637      	mov	r7, r6
 8002d30:	4283      	cmp	r3, r0
 8002d32:	dc04      	bgt.n	8002d3e <__swbuf_r+0x42>
 8002d34:	4621      	mov	r1, r4
 8002d36:	4628      	mov	r0, r5
 8002d38:	f7ff f958 	bl	8001fec <_fflush_r>
 8002d3c:	bb30      	cbnz	r0, 8002d8c <__swbuf_r+0x90>
 8002d3e:	68a3      	ldr	r3, [r4, #8]
 8002d40:	3001      	adds	r0, #1
 8002d42:	3b01      	subs	r3, #1
 8002d44:	60a3      	str	r3, [r4, #8]
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	6022      	str	r2, [r4, #0]
 8002d4c:	701e      	strb	r6, [r3, #0]
 8002d4e:	6963      	ldr	r3, [r4, #20]
 8002d50:	4283      	cmp	r3, r0
 8002d52:	d004      	beq.n	8002d5e <__swbuf_r+0x62>
 8002d54:	89a3      	ldrh	r3, [r4, #12]
 8002d56:	07db      	lsls	r3, r3, #31
 8002d58:	d506      	bpl.n	8002d68 <__swbuf_r+0x6c>
 8002d5a:	2e0a      	cmp	r6, #10
 8002d5c:	d104      	bne.n	8002d68 <__swbuf_r+0x6c>
 8002d5e:	4621      	mov	r1, r4
 8002d60:	4628      	mov	r0, r5
 8002d62:	f7ff f943 	bl	8001fec <_fflush_r>
 8002d66:	b988      	cbnz	r0, 8002d8c <__swbuf_r+0x90>
 8002d68:	4638      	mov	r0, r7
 8002d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <__swbuf_r+0x9c>)
 8002d6e:	429c      	cmp	r4, r3
 8002d70:	d101      	bne.n	8002d76 <__swbuf_r+0x7a>
 8002d72:	68ac      	ldr	r4, [r5, #8]
 8002d74:	e7cf      	b.n	8002d16 <__swbuf_r+0x1a>
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <__swbuf_r+0xa0>)
 8002d78:	429c      	cmp	r4, r3
 8002d7a:	bf08      	it	eq
 8002d7c:	68ec      	ldreq	r4, [r5, #12]
 8002d7e:	e7ca      	b.n	8002d16 <__swbuf_r+0x1a>
 8002d80:	4621      	mov	r1, r4
 8002d82:	4628      	mov	r0, r5
 8002d84:	f000 f80c 	bl	8002da0 <__swsetup_r>
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	d0cb      	beq.n	8002d24 <__swbuf_r+0x28>
 8002d8c:	f04f 37ff 	mov.w	r7, #4294967295
 8002d90:	e7ea      	b.n	8002d68 <__swbuf_r+0x6c>
 8002d92:	bf00      	nop
 8002d94:	08003afc 	.word	0x08003afc
 8002d98:	08003b1c 	.word	0x08003b1c
 8002d9c:	08003adc 	.word	0x08003adc

08002da0 <__swsetup_r>:
 8002da0:	4b32      	ldr	r3, [pc, #200]	; (8002e6c <__swsetup_r+0xcc>)
 8002da2:	b570      	push	{r4, r5, r6, lr}
 8002da4:	681d      	ldr	r5, [r3, #0]
 8002da6:	4606      	mov	r6, r0
 8002da8:	460c      	mov	r4, r1
 8002daa:	b125      	cbz	r5, 8002db6 <__swsetup_r+0x16>
 8002dac:	69ab      	ldr	r3, [r5, #24]
 8002dae:	b913      	cbnz	r3, 8002db6 <__swsetup_r+0x16>
 8002db0:	4628      	mov	r0, r5
 8002db2:	f7ff f9c1 	bl	8002138 <__sinit>
 8002db6:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <__swsetup_r+0xd0>)
 8002db8:	429c      	cmp	r4, r3
 8002dba:	d10f      	bne.n	8002ddc <__swsetup_r+0x3c>
 8002dbc:	686c      	ldr	r4, [r5, #4]
 8002dbe:	89a3      	ldrh	r3, [r4, #12]
 8002dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002dc4:	0719      	lsls	r1, r3, #28
 8002dc6:	d42c      	bmi.n	8002e22 <__swsetup_r+0x82>
 8002dc8:	06dd      	lsls	r5, r3, #27
 8002dca:	d411      	bmi.n	8002df0 <__swsetup_r+0x50>
 8002dcc:	2309      	movs	r3, #9
 8002dce:	6033      	str	r3, [r6, #0]
 8002dd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	81a3      	strh	r3, [r4, #12]
 8002dda:	e03e      	b.n	8002e5a <__swsetup_r+0xba>
 8002ddc:	4b25      	ldr	r3, [pc, #148]	; (8002e74 <__swsetup_r+0xd4>)
 8002dde:	429c      	cmp	r4, r3
 8002de0:	d101      	bne.n	8002de6 <__swsetup_r+0x46>
 8002de2:	68ac      	ldr	r4, [r5, #8]
 8002de4:	e7eb      	b.n	8002dbe <__swsetup_r+0x1e>
 8002de6:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <__swsetup_r+0xd8>)
 8002de8:	429c      	cmp	r4, r3
 8002dea:	bf08      	it	eq
 8002dec:	68ec      	ldreq	r4, [r5, #12]
 8002dee:	e7e6      	b.n	8002dbe <__swsetup_r+0x1e>
 8002df0:	0758      	lsls	r0, r3, #29
 8002df2:	d512      	bpl.n	8002e1a <__swsetup_r+0x7a>
 8002df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002df6:	b141      	cbz	r1, 8002e0a <__swsetup_r+0x6a>
 8002df8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002dfc:	4299      	cmp	r1, r3
 8002dfe:	d002      	beq.n	8002e06 <__swsetup_r+0x66>
 8002e00:	4630      	mov	r0, r6
 8002e02:	f7ff fa67 	bl	80022d4 <_free_r>
 8002e06:	2300      	movs	r3, #0
 8002e08:	6363      	str	r3, [r4, #52]	; 0x34
 8002e0a:	89a3      	ldrh	r3, [r4, #12]
 8002e0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e10:	81a3      	strh	r3, [r4, #12]
 8002e12:	2300      	movs	r3, #0
 8002e14:	6063      	str	r3, [r4, #4]
 8002e16:	6923      	ldr	r3, [r4, #16]
 8002e18:	6023      	str	r3, [r4, #0]
 8002e1a:	89a3      	ldrh	r3, [r4, #12]
 8002e1c:	f043 0308 	orr.w	r3, r3, #8
 8002e20:	81a3      	strh	r3, [r4, #12]
 8002e22:	6923      	ldr	r3, [r4, #16]
 8002e24:	b94b      	cbnz	r3, 8002e3a <__swsetup_r+0x9a>
 8002e26:	89a3      	ldrh	r3, [r4, #12]
 8002e28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e30:	d003      	beq.n	8002e3a <__swsetup_r+0x9a>
 8002e32:	4621      	mov	r1, r4
 8002e34:	4630      	mov	r0, r6
 8002e36:	f000 f847 	bl	8002ec8 <__smakebuf_r>
 8002e3a:	89a0      	ldrh	r0, [r4, #12]
 8002e3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e40:	f010 0301 	ands.w	r3, r0, #1
 8002e44:	d00a      	beq.n	8002e5c <__swsetup_r+0xbc>
 8002e46:	2300      	movs	r3, #0
 8002e48:	60a3      	str	r3, [r4, #8]
 8002e4a:	6963      	ldr	r3, [r4, #20]
 8002e4c:	425b      	negs	r3, r3
 8002e4e:	61a3      	str	r3, [r4, #24]
 8002e50:	6923      	ldr	r3, [r4, #16]
 8002e52:	b943      	cbnz	r3, 8002e66 <__swsetup_r+0xc6>
 8002e54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e58:	d1ba      	bne.n	8002dd0 <__swsetup_r+0x30>
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
 8002e5c:	0781      	lsls	r1, r0, #30
 8002e5e:	bf58      	it	pl
 8002e60:	6963      	ldrpl	r3, [r4, #20]
 8002e62:	60a3      	str	r3, [r4, #8]
 8002e64:	e7f4      	b.n	8002e50 <__swsetup_r+0xb0>
 8002e66:	2000      	movs	r0, #0
 8002e68:	e7f7      	b.n	8002e5a <__swsetup_r+0xba>
 8002e6a:	bf00      	nop
 8002e6c:	2000000c 	.word	0x2000000c
 8002e70:	08003afc 	.word	0x08003afc
 8002e74:	08003b1c 	.word	0x08003b1c
 8002e78:	08003adc 	.word	0x08003adc

08002e7c <__swhatbuf_r>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	460e      	mov	r6, r1
 8002e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e84:	4614      	mov	r4, r2
 8002e86:	2900      	cmp	r1, #0
 8002e88:	461d      	mov	r5, r3
 8002e8a:	b096      	sub	sp, #88	; 0x58
 8002e8c:	da08      	bge.n	8002ea0 <__swhatbuf_r+0x24>
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002e94:	602a      	str	r2, [r5, #0]
 8002e96:	061a      	lsls	r2, r3, #24
 8002e98:	d410      	bmi.n	8002ebc <__swhatbuf_r+0x40>
 8002e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e9e:	e00e      	b.n	8002ebe <__swhatbuf_r+0x42>
 8002ea0:	466a      	mov	r2, sp
 8002ea2:	f000 f8b7 	bl	8003014 <_fstat_r>
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	dbf1      	blt.n	8002e8e <__swhatbuf_r+0x12>
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002eb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002eb4:	425a      	negs	r2, r3
 8002eb6:	415a      	adcs	r2, r3
 8002eb8:	602a      	str	r2, [r5, #0]
 8002eba:	e7ee      	b.n	8002e9a <__swhatbuf_r+0x1e>
 8002ebc:	2340      	movs	r3, #64	; 0x40
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	6023      	str	r3, [r4, #0]
 8002ec2:	b016      	add	sp, #88	; 0x58
 8002ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ec8 <__smakebuf_r>:
 8002ec8:	898b      	ldrh	r3, [r1, #12]
 8002eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ecc:	079d      	lsls	r5, r3, #30
 8002ece:	4606      	mov	r6, r0
 8002ed0:	460c      	mov	r4, r1
 8002ed2:	d507      	bpl.n	8002ee4 <__smakebuf_r+0x1c>
 8002ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ed8:	6023      	str	r3, [r4, #0]
 8002eda:	6123      	str	r3, [r4, #16]
 8002edc:	2301      	movs	r3, #1
 8002ede:	6163      	str	r3, [r4, #20]
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}
 8002ee4:	466a      	mov	r2, sp
 8002ee6:	ab01      	add	r3, sp, #4
 8002ee8:	f7ff ffc8 	bl	8002e7c <__swhatbuf_r>
 8002eec:	9900      	ldr	r1, [sp, #0]
 8002eee:	4605      	mov	r5, r0
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	f7ff fa57 	bl	80023a4 <_malloc_r>
 8002ef6:	b948      	cbnz	r0, 8002f0c <__smakebuf_r+0x44>
 8002ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002efc:	059a      	lsls	r2, r3, #22
 8002efe:	d4ef      	bmi.n	8002ee0 <__smakebuf_r+0x18>
 8002f00:	f023 0303 	bic.w	r3, r3, #3
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	81a3      	strh	r3, [r4, #12]
 8002f0a:	e7e3      	b.n	8002ed4 <__smakebuf_r+0xc>
 8002f0c:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <__smakebuf_r+0x7c>)
 8002f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f10:	89a3      	ldrh	r3, [r4, #12]
 8002f12:	6020      	str	r0, [r4, #0]
 8002f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f18:	81a3      	strh	r3, [r4, #12]
 8002f1a:	9b00      	ldr	r3, [sp, #0]
 8002f1c:	6120      	str	r0, [r4, #16]
 8002f1e:	6163      	str	r3, [r4, #20]
 8002f20:	9b01      	ldr	r3, [sp, #4]
 8002f22:	b15b      	cbz	r3, 8002f3c <__smakebuf_r+0x74>
 8002f24:	4630      	mov	r0, r6
 8002f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f2a:	f000 f885 	bl	8003038 <_isatty_r>
 8002f2e:	b128      	cbz	r0, 8002f3c <__smakebuf_r+0x74>
 8002f30:	89a3      	ldrh	r3, [r4, #12]
 8002f32:	f023 0303 	bic.w	r3, r3, #3
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	81a3      	strh	r3, [r4, #12]
 8002f3c:	89a0      	ldrh	r0, [r4, #12]
 8002f3e:	4305      	orrs	r5, r0
 8002f40:	81a5      	strh	r5, [r4, #12]
 8002f42:	e7cd      	b.n	8002ee0 <__smakebuf_r+0x18>
 8002f44:	080020d1 	.word	0x080020d1

08002f48 <memchr>:
 8002f48:	4603      	mov	r3, r0
 8002f4a:	b510      	push	{r4, lr}
 8002f4c:	b2c9      	uxtb	r1, r1
 8002f4e:	4402      	add	r2, r0
 8002f50:	4293      	cmp	r3, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	d101      	bne.n	8002f5a <memchr+0x12>
 8002f56:	2000      	movs	r0, #0
 8002f58:	e003      	b.n	8002f62 <memchr+0x1a>
 8002f5a:	7804      	ldrb	r4, [r0, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	428c      	cmp	r4, r1
 8002f60:	d1f6      	bne.n	8002f50 <memchr+0x8>
 8002f62:	bd10      	pop	{r4, pc}

08002f64 <memcpy>:
 8002f64:	440a      	add	r2, r1
 8002f66:	4291      	cmp	r1, r2
 8002f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f6c:	d100      	bne.n	8002f70 <memcpy+0xc>
 8002f6e:	4770      	bx	lr
 8002f70:	b510      	push	{r4, lr}
 8002f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f76:	4291      	cmp	r1, r2
 8002f78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f7c:	d1f9      	bne.n	8002f72 <memcpy+0xe>
 8002f7e:	bd10      	pop	{r4, pc}

08002f80 <memmove>:
 8002f80:	4288      	cmp	r0, r1
 8002f82:	b510      	push	{r4, lr}
 8002f84:	eb01 0402 	add.w	r4, r1, r2
 8002f88:	d902      	bls.n	8002f90 <memmove+0x10>
 8002f8a:	4284      	cmp	r4, r0
 8002f8c:	4623      	mov	r3, r4
 8002f8e:	d807      	bhi.n	8002fa0 <memmove+0x20>
 8002f90:	1e43      	subs	r3, r0, #1
 8002f92:	42a1      	cmp	r1, r4
 8002f94:	d008      	beq.n	8002fa8 <memmove+0x28>
 8002f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f9e:	e7f8      	b.n	8002f92 <memmove+0x12>
 8002fa0:	4601      	mov	r1, r0
 8002fa2:	4402      	add	r2, r0
 8002fa4:	428a      	cmp	r2, r1
 8002fa6:	d100      	bne.n	8002faa <memmove+0x2a>
 8002fa8:	bd10      	pop	{r4, pc}
 8002faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fb2:	e7f7      	b.n	8002fa4 <memmove+0x24>

08002fb4 <_realloc_r>:
 8002fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb8:	4680      	mov	r8, r0
 8002fba:	4614      	mov	r4, r2
 8002fbc:	460e      	mov	r6, r1
 8002fbe:	b921      	cbnz	r1, 8002fca <_realloc_r+0x16>
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc6:	f7ff b9ed 	b.w	80023a4 <_malloc_r>
 8002fca:	b92a      	cbnz	r2, 8002fd8 <_realloc_r+0x24>
 8002fcc:	f7ff f982 	bl	80022d4 <_free_r>
 8002fd0:	4625      	mov	r5, r4
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fd8:	f000 f83e 	bl	8003058 <_malloc_usable_size_r>
 8002fdc:	4284      	cmp	r4, r0
 8002fde:	4607      	mov	r7, r0
 8002fe0:	d802      	bhi.n	8002fe8 <_realloc_r+0x34>
 8002fe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002fe6:	d812      	bhi.n	800300e <_realloc_r+0x5a>
 8002fe8:	4621      	mov	r1, r4
 8002fea:	4640      	mov	r0, r8
 8002fec:	f7ff f9da 	bl	80023a4 <_malloc_r>
 8002ff0:	4605      	mov	r5, r0
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d0ed      	beq.n	8002fd2 <_realloc_r+0x1e>
 8002ff6:	42bc      	cmp	r4, r7
 8002ff8:	4622      	mov	r2, r4
 8002ffa:	4631      	mov	r1, r6
 8002ffc:	bf28      	it	cs
 8002ffe:	463a      	movcs	r2, r7
 8003000:	f7ff ffb0 	bl	8002f64 <memcpy>
 8003004:	4631      	mov	r1, r6
 8003006:	4640      	mov	r0, r8
 8003008:	f7ff f964 	bl	80022d4 <_free_r>
 800300c:	e7e1      	b.n	8002fd2 <_realloc_r+0x1e>
 800300e:	4635      	mov	r5, r6
 8003010:	e7df      	b.n	8002fd2 <_realloc_r+0x1e>
	...

08003014 <_fstat_r>:
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	2300      	movs	r3, #0
 8003018:	4d06      	ldr	r5, [pc, #24]	; (8003034 <_fstat_r+0x20>)
 800301a:	4604      	mov	r4, r0
 800301c:	4608      	mov	r0, r1
 800301e:	4611      	mov	r1, r2
 8003020:	602b      	str	r3, [r5, #0]
 8003022:	f7fd fd74 	bl	8000b0e <_fstat>
 8003026:	1c43      	adds	r3, r0, #1
 8003028:	d102      	bne.n	8003030 <_fstat_r+0x1c>
 800302a:	682b      	ldr	r3, [r5, #0]
 800302c:	b103      	cbz	r3, 8003030 <_fstat_r+0x1c>
 800302e:	6023      	str	r3, [r4, #0]
 8003030:	bd38      	pop	{r3, r4, r5, pc}
 8003032:	bf00      	nop
 8003034:	200000e8 	.word	0x200000e8

08003038 <_isatty_r>:
 8003038:	b538      	push	{r3, r4, r5, lr}
 800303a:	2300      	movs	r3, #0
 800303c:	4d05      	ldr	r5, [pc, #20]	; (8003054 <_isatty_r+0x1c>)
 800303e:	4604      	mov	r4, r0
 8003040:	4608      	mov	r0, r1
 8003042:	602b      	str	r3, [r5, #0]
 8003044:	f7fd fd72 	bl	8000b2c <_isatty>
 8003048:	1c43      	adds	r3, r0, #1
 800304a:	d102      	bne.n	8003052 <_isatty_r+0x1a>
 800304c:	682b      	ldr	r3, [r5, #0]
 800304e:	b103      	cbz	r3, 8003052 <_isatty_r+0x1a>
 8003050:	6023      	str	r3, [r4, #0]
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	200000e8 	.word	0x200000e8

08003058 <_malloc_usable_size_r>:
 8003058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800305c:	1f18      	subs	r0, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	bfbc      	itt	lt
 8003062:	580b      	ldrlt	r3, [r1, r0]
 8003064:	18c0      	addlt	r0, r0, r3
 8003066:	4770      	bx	lr

08003068 <_init>:
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306a:	bf00      	nop
 800306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306e:	bc08      	pop	{r3}
 8003070:	469e      	mov	lr, r3
 8003072:	4770      	bx	lr

08003074 <_fini>:
 8003074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003076:	bf00      	nop
 8003078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307a:	bc08      	pop	{r3}
 800307c:	469e      	mov	lr, r3
 800307e:	4770      	bx	lr
